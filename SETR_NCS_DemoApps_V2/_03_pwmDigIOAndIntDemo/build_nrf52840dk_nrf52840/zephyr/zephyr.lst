
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200013e0 	.word	0x200013e0
}
   4:	000019fd 	.word	0x000019fd
   8:	00006951 	.word	0x00006951
   c:	000019e9 	.word	0x000019e9
  10:	000019e9 	.word	0x000019e9
  14:	000019e9 	.word	0x000019e9
  18:	000019e9 	.word	0x000019e9
	...
  2c:	00001805 	.word	0x00001805
  30:	000019e9 	.word	0x000019e9
  34:	00000000 	.word	0x00000000
  38:	000017b1 	.word	0x000017b1
  3c:	000033cd 	.word	0x000033cd

00000040 <_irq_vector_table>:
  40:	00001769 00001769 00001769 00001769     i...i...i...i...
  50:	00001769 00001769 00001769 00001769     i...i...i...i...
  60:	00001769 00001769 00001769 00001769     i...i...i...i...
  70:	00001769 00001769 00001769 00001769     i...i...i...i...
  80:	00001769 00001769 00001769 00001769     i...i...i...i...
  90:	00001769 00001769 00001769 00001769     i...i...i...i...
  a0:	00001769 00001769 00001769 00001769     i...i...i...i...
  b0:	00001769 00001769 00001769 00001769     i...i...i...i...
  c0:	00001769 00001769 00001769 00001769     i...i...i...i...
  d0:	00001769 00001769 00001769 00001769     i...i...i...i...
  e0:	00001769 00001769 00001769 00001769     i...i...i...i...
  f0:	00001769 00001769 00001769 00001769     i...i...i...i...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     184:	f080 8116 	bcs.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_IDLE_STACK_SIZE+0x26e>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_IDLE_STACK_SIZE+0x29c>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2ea:	d271      	bcs.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     342:	d247      	bcs.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_IDLE_STACK_SIZE+0x280>
     38c:	d016      	beq.n	3bc <CONFIG_IDLE_STACK_SIZE+0x27c>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_IDLE_STACK_SIZE+0x268>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <but1press_cbfunction>:
static struct gpio_callback but1_cb_data; /* Callback structure */

/* Callback function and variables*/
volatile int dcToggleFlag = 0; /* Flag to signal a BUT1 press */

void but1press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
     3f4:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     3f6:	f006 fd66 	bl	6ec6 <sys_clock_cycle_get_32>
     3fa:	4601      	mov	r1, r0
    
    /* Inform that button was hit*/
    printk("But1 pressed at %d\n\r", k_cycle_get_32());
     3fc:	4803      	ldr	r0, [pc, #12]	; (40c <CONFIG_FLASH_SIZE+0xc>)
     3fe:	f006 fa86 	bl	690e <printk>
    
    /* Update Flag*/
    dcToggleFlag = 1;
     402:	4b03      	ldr	r3, [pc, #12]	; (410 <CONFIG_FLASH_SIZE+0x10>)
     404:	2201      	movs	r2, #1
     406:	601a      	str	r2, [r3, #0]
}
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000074d8 	.word	0x000074d8
     410:	20000264 	.word	0x20000264

00000414 <main>:

/* Main function */
void main(void) {
     414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const struct device *gpio0_dev;         /* Pointer to GPIO device structure */
    const struct device *pwm0_dev;          /* Pointer to PWM device structure */
    int ret=0;                              /* Generic return value variable */
    
    unsigned int pwmPeriod_us = 1000;       /* PWM priod in us */
    unsigned int dcValue[]={0,33,66,100};   /* Duty-cycle in % */
     418:	4b6f      	ldr	r3, [pc, #444]	; (5d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf0>)
     41a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void main(void) {
     41c:	b08b      	sub	sp, #44	; 0x2c
    unsigned int dcValue[]={0,33,66,100};   /* Duty-cycle in % */
     41e:	ac0a      	add	r4, sp, #40	; 0x28
     420:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    unsigned int dcIndex=0;                 /* DC Index */
    
    /* Task init code */
    printk("pwmDemo\n\r"); 
     424:	486d      	ldr	r0, [pc, #436]	; (5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>)
     426:	f006 fa72 	bl	690e <printk>
    printk("Hit But1 to cycle among intensities ...\n\r ");
     42a:	486d      	ldr	r0, [pc, #436]	; (5e0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf8>)
     42c:	f006 fa6f 	bl	690e <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     430:	486c      	ldr	r0, [pc, #432]	; (5e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfc>)
     432:	f003 fd91 	bl	3f58 <z_impl_device_get_binding>

    /* Bind to GPIO 0 and PWM0 */
    gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
    if (gpio0_dev == NULL) {
     436:	4605      	mov	r5, r0
     438:	b928      	cbnz	r0, 446 <main+0x32>
        printk("Error: Failed to bind to GPIO0\n\r");        
     43a:	486b      	ldr	r0, [pc, #428]	; (5e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x100>)
        printk("Bind to GPIO0 successfull \n\r");        
    }
    
    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
    if (pwm0_dev == NULL) {
	printk("Error: Failed to bind to PWM0\n r");
     43c:	f006 fa67 	bl	690e <printk>
        }            
           
    }

    return;
}
     440:	b00b      	add	sp, #44	; 0x2c
     442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        printk("Bind to GPIO0 successfull \n\r");        
     446:	4869      	ldr	r0, [pc, #420]	; (5ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x104>)
     448:	f006 fa61 	bl	690e <printk>
     44c:	4868      	ldr	r0, [pc, #416]	; (5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>)
     44e:	f003 fd83 	bl	3f58 <z_impl_device_get_binding>
    if (pwm0_dev == NULL) {
     452:	4604      	mov	r4, r0
     454:	b908      	cbnz	r0, 45a <main+0x46>
	printk("Error: Failed to bind to PWM0\n r");
     456:	4867      	ldr	r0, [pc, #412]	; (5f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10c>)
     458:	e7f0      	b.n	43c <main+0x28>
        printk("Bind to PWM0 successful\n\r");            
     45a:	4867      	ldr	r0, [pc, #412]	; (5f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x110>)
     45c:	f006 fa57 	bl	690e <printk>
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     460:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_api *api =
     462:	68af      	ldr	r7, [r5, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     464:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
     466:	692e      	ldr	r6, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     468:	051a      	lsls	r2, r3, #20
     46a:	d40e      	bmi.n	48a <main+0x76>
     46c:	4963      	ldr	r1, [pc, #396]	; (5fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x114>)
     46e:	4a64      	ldr	r2, [pc, #400]	; (600 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x118>)
     470:	4864      	ldr	r0, [pc, #400]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     472:	f44f 733c 	mov.w	r3, #752	; 0x2f0
     476:	f006 fa4a 	bl	690e <printk>
     47a:	4863      	ldr	r0, [pc, #396]	; (608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>)
     47c:	f006 fa47 	bl	690e <printk>
     480:	485f      	ldr	r0, [pc, #380]	; (600 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x118>)
     482:	f44f 713c 	mov.w	r1, #752	; 0x2f0
     486:	f006 f969 	bl	675c <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     48a:	6833      	ldr	r3, [r6, #0]
     48c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     490:	6033      	str	r3, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
     492:	210b      	movs	r1, #11
     494:	683b      	ldr	r3, [r7, #0]
     496:	f44f 7288 	mov.w	r2, #272	; 0x110
     49a:	4628      	mov	r0, r5
     49c:	4798      	blx	r3
    if (ret < 0) {
     49e:	1e01      	subs	r1, r0, #0
     4a0:	da03      	bge.n	4aa <main+0x96>
        printk("Error %d: Failed to configure BUT 1 \n\r", ret);
     4a2:	485a      	ldr	r0, [pc, #360]	; (60c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x124>)
                printk("Error %d: failed to set pulse width\n", ret);
     4a4:	f006 fa33 	bl	690e <printk>
		return;
     4a8:	e7ca      	b.n	440 <main+0x2c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     4aa:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_api *api =
     4ac:	68ae      	ldr	r6, [r5, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     4ae:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
     4b0:	692f      	ldr	r7, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     4b2:	051b      	lsls	r3, r3, #20
     4b4:	d40e      	bmi.n	4d4 <main+0xc0>
     4b6:	4951      	ldr	r1, [pc, #324]	; (5fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x114>)
     4b8:	4a51      	ldr	r2, [pc, #324]	; (600 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x118>)
     4ba:	4852      	ldr	r0, [pc, #328]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     4bc:	f44f 7324 	mov.w	r3, #656	; 0x290
     4c0:	f006 fa25 	bl	690e <printk>
     4c4:	4850      	ldr	r0, [pc, #320]	; (608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>)
     4c6:	f006 fa22 	bl	690e <printk>
     4ca:	484d      	ldr	r0, [pc, #308]	; (600 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x118>)
     4cc:	f44f 7124 	mov.w	r1, #656	; 0x290
     4d0:	f006 f944 	bl	675c <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     4d4:	683b      	ldr	r3, [r7, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     4d6:	69b6      	ldr	r6, [r6, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
     4d8:	f413 6f00 	tst.w	r3, #2048	; 0x800
	return api->pin_interrupt_configure(port, pin, mode, trig);
     4dc:	f04f 010b 	mov.w	r1, #11
     4e0:	bf14      	ite	ne
     4e2:	f44f 3300 	movne.w	r3, #131072	; 0x20000
     4e6:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
     4ea:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
     4ee:	4628      	mov	r0, r5
     4f0:	47b0      	blx	r6
    if (ret != 0) {
     4f2:	4601      	mov	r1, r0
     4f4:	b108      	cbz	r0, 4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
	printk("Error %d: failed to configure interrupt on BUT1 pin \n\r", ret);
     4f6:	4846      	ldr	r0, [pc, #280]	; (610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>)
     4f8:	e7d4      	b.n	4a4 <main+0x90>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     4fa:	4946      	ldr	r1, [pc, #280]	; (614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>)
     4fc:	4b46      	ldr	r3, [pc, #280]	; (618 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x130>)
     4fe:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     500:	f44f 6300 	mov.w	r3, #2048	; 0x800
     504:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     506:	68ab      	ldr	r3, [r5, #8]
     508:	69db      	ldr	r3, [r3, #28]
     50a:	b113      	cbz	r3, 512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     50c:	2201      	movs	r2, #1
     50e:	4628      	mov	r0, r5
     510:	4798      	blx	r3
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
     512:	f04f 0800 	mov.w	r8, #0
        if(dcToggleFlag) {
     516:	4b41      	ldr	r3, [pc, #260]	; (61c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x134>)
     518:	681b      	ldr	r3, [r3, #0]
     51a:	2b00      	cmp	r3, #0
     51c:	d0fb      	beq.n	516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
            dcIndex++;
     51e:	f108 0801 	add.w	r8, r8, #1
            dcToggleFlag = 0;
     522:	4a3e      	ldr	r2, [pc, #248]	; (61c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x134>)
            printk("PWM DC value set to %u %%\n\r",dcValue[dcIndex]);
     524:	483e      	ldr	r0, [pc, #248]	; (620 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x138>)
                dcIndex = 0;
     526:	f1b8 0f04 	cmp.w	r8, #4
            dcToggleFlag = 0;
     52a:	f04f 0300 	mov.w	r3, #0
                dcIndex = 0;
     52e:	bf08      	it	eq
     530:	f04f 0800 	moveq.w	r8, #0
            dcToggleFlag = 0;
     534:	6013      	str	r3, [r2, #0]
            printk("PWM DC value set to %u %%\n\r",dcValue[dcIndex]);
     536:	ab0a      	add	r3, sp, #40	; 0x28
     538:	eb03 0388 	add.w	r3, r3, r8, lsl #2
		      pwmPeriod_us,(unsigned int)((pwmPeriod_us*dcValue[dcIndex])/100), PWM_POLARITY_NORMAL);
     53c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
            printk("PWM DC value set to %u %%\n\r",dcValue[dcIndex]);
     540:	f853 5c10 	ldr.w	r5, [r3, #-16]
     544:	4629      	mov	r1, r5
     546:	f006 f9e2 	bl	690e <printk>
		      pwmPeriod_us,(unsigned int)((pwmPeriod_us*dcValue[dcIndex])/100), PWM_POLARITY_NORMAL);
     54a:	437d      	muls	r5, r7
            ret = pwm_pin_set_usec(pwm0_dev, BOARDLED1,
     54c:	2164      	movs	r1, #100	; 0x64
     54e:	fbb5 f5f1 	udiv	r5, r5, r1
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
     552:	68a3      	ldr	r3, [r4, #8]
     554:	aa04      	add	r2, sp, #16
     556:	685b      	ldr	r3, [r3, #4]
     558:	210d      	movs	r1, #13
     55a:	4620      	mov	r0, r4
     55c:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     55e:	9002      	str	r0, [sp, #8]
     560:	b118      	cbz	r0, 56a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x82>
		return -EIO;
     562:	f06f 0104 	mvn.w	r1, #4
                printk("Error %d: failed to set pulse width\n", ret);
     566:	482f      	ldr	r0, [pc, #188]	; (624 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13c>)
     568:	e79c      	b.n	4a4 <main+0x90>
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     56a:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
     56e:	fba6 ab07 	umull	sl, fp, r6, r7
     572:	fb07 bb03 	mla	fp, r7, r3, fp
     576:	4a2c      	ldr	r2, [pc, #176]	; (628 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x140>)
     578:	9303      	str	r3, [sp, #12]
     57a:	4650      	mov	r0, sl
     57c:	2300      	movs	r3, #0
     57e:	4659      	mov	r1, fp
     580:	f7ff fdbe 	bl	100 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
     584:	4b29      	ldr	r3, [pc, #164]	; (62c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x144>)
     586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     58a:	455b      	cmp	r3, fp
     58c:	bf08      	it	eq
     58e:	4552      	cmpeq	r2, sl
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     590:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
     592:	d202      	bcs.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
		return -ENOTSUP;
     594:	f06f 0185 	mvn.w	r1, #133	; 0x85
     598:	e7e5      	b.n	566 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7e>
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     59a:	9b03      	ldr	r3, [sp, #12]
     59c:	4a22      	ldr	r2, [pc, #136]	; (628 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x140>)
     59e:	fba5 6706 	umull	r6, r7, r5, r6
     5a2:	fb05 7703 	mla	r7, r5, r3, r7
     5a6:	4630      	mov	r0, r6
     5a8:	2300      	movs	r3, #0
     5aa:	4639      	mov	r1, r7
     5ac:	f7ff fda8 	bl	100 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     5b0:	4a1e      	ldr	r2, [pc, #120]	; (62c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x144>)
     5b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     5b6:	42ba      	cmp	r2, r7
     5b8:	bf08      	it	eq
     5ba:	42b1      	cmpeq	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     5bc:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     5be:	d3e9      	bcc.n	594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>
	return api->pin_set(dev, pwm, period, pulse, flags);
     5c0:	68a2      	ldr	r2, [r4, #8]
     5c2:	9902      	ldr	r1, [sp, #8]
     5c4:	9100      	str	r1, [sp, #0]
     5c6:	6815      	ldr	r5, [r2, #0]
     5c8:	210d      	movs	r1, #13
     5ca:	464a      	mov	r2, r9
     5cc:	4620      	mov	r0, r4
     5ce:	47a8      	blx	r5
            if (ret) {
     5d0:	4601      	mov	r1, r0
     5d2:	2800      	cmp	r0, #0
     5d4:	d09f      	beq.n	516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     5d6:	e7c6      	b.n	566 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7e>
     5d8:	000072e0 	.word	0x000072e0
     5dc:	000074ed 	.word	0x000074ed
     5e0:	000074f7 	.word	0x000074f7
     5e4:	00007522 	.word	0x00007522
     5e8:	00007529 	.word	0x00007529
     5ec:	0000754a 	.word	0x0000754a
     5f0:	00007567 	.word	0x00007567
     5f4:	0000756d 	.word	0x0000756d
     5f8:	0000758e 	.word	0x0000758e
     5fc:	000075d2 	.word	0x000075d2
     600:	000075a8 	.word	0x000075a8
     604:	00007610 	.word	0x00007610
     608:	0000762d 	.word	0x0000762d
     60c:	0000763f 	.word	0x0000763f
     610:	00007666 	.word	0x00007666
     614:	20000258 	.word	0x20000258
     618:	000003f5 	.word	0x000003f5
     61c:	20000264 	.word	0x20000264
     620:	0000769d 	.word	0x0000769d
     624:	000076b9 	.word	0x000076b9
     628:	000f4240 	.word	0x000f4240
     62c:	000f423f 	.word	0x000f423f

00000630 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     634:	b091      	sub	sp, #68	; 0x44
     636:	468b      	mov	fp, r1
     638:	9002      	str	r0, [sp, #8]
     63a:	4692      	mov	sl, r2
     63c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     63e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     640:	f89a 0000 	ldrb.w	r0, [sl]
     644:	b908      	cbnz	r0, 64a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     646:	4628      	mov	r0, r5
     648:	e35e      	b.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
		if (*fp != '%') {
     64a:	2825      	cmp	r0, #37	; 0x25
     64c:	f10a 0701 	add.w	r7, sl, #1
     650:	d007      	beq.n	662 <cbvprintf+0x32>
			OUTC('%');
     652:	9b02      	ldr	r3, [sp, #8]
     654:	4659      	mov	r1, fp
     656:	4798      	blx	r3
     658:	2800      	cmp	r0, #0
     65a:	f2c0 8355 	blt.w	d08 <CONFIG_ISR_STACK_SIZE+0x508>
     65e:	3501      	adds	r5, #1
			break;
     660:	e210      	b.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
		} state = {
     662:	2218      	movs	r2, #24
     664:	2100      	movs	r1, #0
     666:	a80a      	add	r0, sp, #40	; 0x28
     668:	f006 f9ad 	bl	69c6 <memset>
	if (*sp == '%') {
     66c:	f89a 3001 	ldrb.w	r3, [sl, #1]
     670:	2b25      	cmp	r3, #37	; 0x25
     672:	d078      	beq.n	766 <cbvprintf+0x136>
     674:	2200      	movs	r2, #0
     676:	4694      	mov	ip, r2
     678:	4616      	mov	r6, r2
     67a:	4696      	mov	lr, r2
     67c:	4610      	mov	r0, r2
     67e:	4639      	mov	r1, r7
		switch (*sp) {
     680:	f817 3b01 	ldrb.w	r3, [r7], #1
     684:	2b2b      	cmp	r3, #43	; 0x2b
     686:	f000 809d 	beq.w	7c4 <cbvprintf+0x194>
     68a:	f200 8094 	bhi.w	7b6 <cbvprintf+0x186>
     68e:	2b20      	cmp	r3, #32
     690:	f000 809b 	beq.w	7ca <cbvprintf+0x19a>
     694:	2b23      	cmp	r3, #35	; 0x23
     696:	f000 809a 	beq.w	7ce <cbvprintf+0x19e>
     69a:	b128      	cbz	r0, 6a8 <cbvprintf+0x78>
     69c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6a0:	f040 0004 	orr.w	r0, r0, #4
     6a4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6a8:	f1be 0f00 	cmp.w	lr, #0
     6ac:	d005      	beq.n	6ba <cbvprintf+0x8a>
     6ae:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6b2:	f040 0008 	orr.w	r0, r0, #8
     6b6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6ba:	b12e      	cbz	r6, 6c8 <cbvprintf+0x98>
     6bc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6c0:	f040 0010 	orr.w	r0, r0, #16
     6c4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6c8:	f1bc 0f00 	cmp.w	ip, #0
     6cc:	d005      	beq.n	6da <cbvprintf+0xaa>
     6ce:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6d2:	f040 0020 	orr.w	r0, r0, #32
     6d6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6da:	b12a      	cbz	r2, 6e8 <cbvprintf+0xb8>
     6dc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     6e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     6e4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     6e8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     6ec:	f002 0044 	and.w	r0, r2, #68	; 0x44
     6f0:	2844      	cmp	r0, #68	; 0x44
     6f2:	d103      	bne.n	6fc <cbvprintf+0xcc>
		conv->flag_zero = false;
     6f4:	f36f 1286 	bfc	r2, #6, #1
     6f8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     6fc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     700:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     702:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     706:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     70a:	d17b      	bne.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
		conv->width_star = true;
     70c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     710:	f042 0201 	orr.w	r2, r2, #1
     714:	1c4b      	adds	r3, r1, #1
     716:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     71a:	781a      	ldrb	r2, [r3, #0]
     71c:	2a2e      	cmp	r2, #46	; 0x2e
     71e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     722:	bf0c      	ite	eq
     724:	2101      	moveq	r1, #1
     726:	2100      	movne	r1, #0
     728:	f361 0241 	bfi	r2, r1, #1, #1
     72c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     730:	d174      	bne.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
	if (*sp == '*') {
     732:	785a      	ldrb	r2, [r3, #1]
     734:	2a2a      	cmp	r2, #42	; 0x2a
     736:	d06a      	beq.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
     738:	3301      	adds	r3, #1
	size_t val = 0;
     73a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     73c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     73e:	4618      	mov	r0, r3
     740:	f810 2b01 	ldrb.w	r2, [r0], #1
     744:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     748:	2f09      	cmp	r7, #9
     74a:	f240 808e 	bls.w	86a <CONFIG_ISR_STACK_SIZE+0x6a>
	conv->unsupported |= ((conv->prec_value < 0)
     74e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     752:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     754:	f3c2 0040 	ubfx	r0, r2, #1, #1
     758:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     75c:	f361 0241 	bfi	r2, r1, #1, #1
     760:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     764:	e05a      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
		conv->specifier = *sp++;
     766:	f10a 0702 	add.w	r7, sl, #2
     76a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     76e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     772:	07d9      	lsls	r1, r3, #31
     774:	f140 8149 	bpl.w	a0a <CONFIG_ISR_STACK_SIZE+0x20a>
			width = va_arg(ap, int);
     778:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     77c:	f1b9 0f00 	cmp.w	r9, #0
     780:	da07      	bge.n	792 <cbvprintf+0x162>
				conv->flag_dash = true;
     782:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     786:	f042 0204 	orr.w	r2, r2, #4
     78a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     78e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     792:	075a      	lsls	r2, r3, #29
     794:	f140 8142 	bpl.w	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
			int arg = va_arg(ap, int);
     798:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     79c:	f1b8 0f00 	cmp.w	r8, #0
     7a0:	f280 8141 	bge.w	a26 <CONFIG_ISR_STACK_SIZE+0x226>
				conv->prec_present = false;
     7a4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7a8:	f36f 0341 	bfc	r3, #1, #1
     7ac:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     7b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     7b4:	e137      	b.n	a26 <CONFIG_ISR_STACK_SIZE+0x226>
		switch (*sp) {
     7b6:	2b2d      	cmp	r3, #45	; 0x2d
     7b8:	d00c      	beq.n	7d4 <cbvprintf+0x1a4>
     7ba:	2b30      	cmp	r3, #48	; 0x30
     7bc:	f47f af6d 	bne.w	69a <cbvprintf+0x6a>
			conv->flag_zero = true;
     7c0:	2201      	movs	r2, #1
	} while (loop);
     7c2:	e75c      	b.n	67e <cbvprintf+0x4e>
			conv->flag_plus = true;
     7c4:	f04f 0e01 	mov.w	lr, #1
     7c8:	e759      	b.n	67e <cbvprintf+0x4e>
			conv->flag_space = true;
     7ca:	2601      	movs	r6, #1
     7cc:	e757      	b.n	67e <cbvprintf+0x4e>
			conv->flag_hash = true;
     7ce:	f04f 0c01 	mov.w	ip, #1
     7d2:	e754      	b.n	67e <cbvprintf+0x4e>
		switch (*sp) {
     7d4:	2001      	movs	r0, #1
     7d6:	e752      	b.n	67e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     7d8:	fb0c 0202 	mla	r2, ip, r2, r0
     7dc:	3a30      	subs	r2, #48	; 0x30
     7de:	4633      	mov	r3, r6
     7e0:	461e      	mov	r6, r3
     7e2:	f816 0b01 	ldrb.w	r0, [r6], #1
     7e6:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7ea:	2f09      	cmp	r7, #9
     7ec:	d9f4      	bls.n	7d8 <cbvprintf+0x1a8>
	if (sp != wp) {
     7ee:	4299      	cmp	r1, r3
     7f0:	d093      	beq.n	71a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     7f2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     7f6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     7f8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     7fa:	f362 0141 	bfi	r1, r2, #1, #1
     7fe:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     802:	e78a      	b.n	71a <cbvprintf+0xea>
     804:	460b      	mov	r3, r1
	size_t val = 0;
     806:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     808:	f04f 0c0a 	mov.w	ip, #10
     80c:	e7e8      	b.n	7e0 <cbvprintf+0x1b0>
		conv->prec_star = true;
     80e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     812:	f042 0204 	orr.w	r2, r2, #4
     816:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     81a:	3302      	adds	r3, #2
	switch (*sp) {
     81c:	461f      	mov	r7, r3
     81e:	f817 2b01 	ldrb.w	r2, [r7], #1
     822:	2a6c      	cmp	r2, #108	; 0x6c
     824:	d041      	beq.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
     826:	d825      	bhi.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     828:	2a68      	cmp	r2, #104	; 0x68
     82a:	d02b      	beq.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
     82c:	2a6a      	cmp	r2, #106	; 0x6a
     82e:	d046      	beq.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
     830:	2a4c      	cmp	r2, #76	; 0x4c
     832:	d04c      	beq.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     834:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     836:	f817 2b01 	ldrb.w	r2, [r7], #1
     83a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     83e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     842:	2a78      	cmp	r2, #120	; 0x78
     844:	f200 80d9 	bhi.w	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     848:	2a57      	cmp	r2, #87	; 0x57
     84a:	d84d      	bhi.n	8e8 <CONFIG_ISR_STACK_SIZE+0xe8>
     84c:	2a41      	cmp	r2, #65	; 0x41
     84e:	d003      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     850:	3a45      	subs	r2, #69	; 0x45
     852:	2a02      	cmp	r2, #2
     854:	f200 80d1 	bhi.w	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
		conv->specifier_cat = SPECIFIER_FP;
     858:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     85c:	2204      	movs	r2, #4
     85e:	f362 0302 	bfi	r3, r2, #0, #3
     862:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     866:	2301      	movs	r3, #1
			break;
     868:	e09e      	b.n	9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>
		val = 10U * val + *sp++ - '0';
     86a:	fb06 2101 	mla	r1, r6, r1, r2
     86e:	3930      	subs	r1, #48	; 0x30
     870:	4603      	mov	r3, r0
     872:	e764      	b.n	73e <cbvprintf+0x10e>
	switch (*sp) {
     874:	2a74      	cmp	r2, #116	; 0x74
     876:	d026      	beq.n	8c6 <CONFIG_ISR_STACK_SIZE+0xc6>
     878:	2a7a      	cmp	r2, #122	; 0x7a
     87a:	d1db      	bne.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
		conv->length_mod = LENGTH_Z;
     87c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     880:	2206      	movs	r2, #6
     882:	e00d      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
		if (*++sp == 'h') {
     884:	785a      	ldrb	r2, [r3, #1]
     886:	2a68      	cmp	r2, #104	; 0x68
     888:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     88c:	d106      	bne.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
			conv->length_mod = LENGTH_HH;
     88e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     890:	f361 02c6 	bfi	r2, r1, #3, #4
     894:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     898:	1c9f      	adds	r7, r3, #2
     89a:	e7cc      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
			conv->length_mod = LENGTH_H;
     89c:	4613      	mov	r3, r2
     89e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     8a0:	f362 03c6 	bfi	r3, r2, #3, #4
     8a4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     8a8:	e7c5      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
		if (*++sp == 'l') {
     8aa:	785a      	ldrb	r2, [r3, #1]
     8ac:	2a6c      	cmp	r2, #108	; 0x6c
     8ae:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8b2:	d101      	bne.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
			conv->length_mod = LENGTH_LL;
     8b4:	2104      	movs	r1, #4
     8b6:	e7eb      	b.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
			conv->length_mod = LENGTH_L;
     8b8:	4613      	mov	r3, r2
     8ba:	2203      	movs	r2, #3
     8bc:	e7f0      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
		conv->length_mod = LENGTH_J;
     8be:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8c2:	2205      	movs	r2, #5
     8c4:	e7ec      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
		conv->length_mod = LENGTH_T;
     8c6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8ca:	2207      	movs	r2, #7
     8cc:	e7e8      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
		conv->unsupported = true;
     8ce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     8d2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     8d6:	f023 0302 	bic.w	r3, r3, #2
     8da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     8de:	f043 0302 	orr.w	r3, r3, #2
     8e2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     8e6:	e7a6      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     8e8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     8ec:	2920      	cmp	r1, #32
     8ee:	f200 8084 	bhi.w	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     8f2:	a001      	add	r0, pc, #4	; (adr r0, 8f8 <CONFIG_ISR_STACK_SIZE+0xf8>)
     8f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     8f8:	000009bd 	.word	0x000009bd
     8fc:	000009fb 	.word	0x000009fb
     900:	000009fb 	.word	0x000009fb
     904:	000009fb 	.word	0x000009fb
     908:	000009fb 	.word	0x000009fb
     90c:	000009fb 	.word	0x000009fb
     910:	000009fb 	.word	0x000009fb
     914:	000009fb 	.word	0x000009fb
     918:	000009fb 	.word	0x000009fb
     91c:	00000859 	.word	0x00000859
     920:	000009fb 	.word	0x000009fb
     924:	000009bd 	.word	0x000009bd
     928:	0000097d 	.word	0x0000097d
     92c:	00000859 	.word	0x00000859
     930:	00000859 	.word	0x00000859
     934:	00000859 	.word	0x00000859
     938:	000009fb 	.word	0x000009fb
     93c:	0000097d 	.word	0x0000097d
     940:	000009fb 	.word	0x000009fb
     944:	000009fb 	.word	0x000009fb
     948:	000009fb 	.word	0x000009fb
     94c:	000009fb 	.word	0x000009fb
     950:	000009c5 	.word	0x000009c5
     954:	000009bd 	.word	0x000009bd
     958:	000009e1 	.word	0x000009e1
     95c:	000009fb 	.word	0x000009fb
     960:	000009fb 	.word	0x000009fb
     964:	000009e1 	.word	0x000009e1
     968:	000009fb 	.word	0x000009fb
     96c:	000009bd 	.word	0x000009bd
     970:	000009fb 	.word	0x000009fb
     974:	000009fb 	.word	0x000009fb
     978:	000009bd 	.word	0x000009bd
		conv->specifier_cat = SPECIFIER_SINT;
     97c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     980:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     982:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     986:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     98a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     98c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     990:	bf02      	ittt	eq
     992:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     996:	f041 0101 	orreq.w	r1, r1, #1
     99a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     99e:	2a63      	cmp	r2, #99	; 0x63
     9a0:	d131      	bne.n	a06 <CONFIG_ISR_STACK_SIZE+0x206>
			unsupported = (conv->length_mod != LENGTH_NONE);
     9a2:	3b00      	subs	r3, #0
     9a4:	bf18      	it	ne
     9a6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     9a8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     9ac:	f3c2 0140 	ubfx	r1, r2, #1, #1
     9b0:	430b      	orrs	r3, r1
     9b2:	f363 0241 	bfi	r2, r3, #1, #1
     9b6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     9ba:	e6d8      	b.n	76e <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     9bc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     9c0:	2002      	movs	r0, #2
     9c2:	e7de      	b.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
		conv->specifier_cat = SPECIFIER_PTR;
     9c4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9c8:	f003 0378 	and.w	r3, r3, #120	; 0x78
     9cc:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     9d0:	2103      	movs	r1, #3
     9d2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9d6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     9d8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9dc:	4143      	adcs	r3, r0
     9de:	e7e3      	b.n	9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>
		conv->specifier_cat = SPECIFIER_PTR;
     9e0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     9e4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     9e6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     9ea:	f361 0202 	bfi	r2, r1, #0, #3
     9ee:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     9f2:	bf14      	ite	ne
     9f4:	2301      	movne	r3, #1
     9f6:	2300      	moveq	r3, #0
     9f8:	e7d6      	b.n	9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>
		conv->invalid = true;
     9fa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     9fe:	f043 0301 	orr.w	r3, r3, #1
     a02:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     a06:	2300      	movs	r3, #0
     a08:	e7ce      	b.n	9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>
		} else if (conv->width_present) {
     a0a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     a0e:	2a00      	cmp	r2, #0
			width = conv->width_value;
     a10:	bfb4      	ite	lt
     a12:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     a16:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     a1a:	e6ba      	b.n	792 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     a1c:	079b      	lsls	r3, r3, #30
     a1e:	f57f aec7 	bpl.w	7b0 <cbvprintf+0x180>
			precision = conv->prec_value;
     a22:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     a26:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     a2a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a2c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     a30:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     a34:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a38:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a3a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     a3e:	d136      	bne.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
			switch (length_mod) {
     a40:	1ed3      	subs	r3, r2, #3
     a42:	2b04      	cmp	r3, #4
     a44:	d820      	bhi.n	a88 <CONFIG_ISR_STACK_SIZE+0x288>
     a46:	e8df f003 	tbb	[pc, r3]
     a4a:	0703      	.short	0x0703
     a4c:	1f07      	.short	0x1f07
     a4e:	1f          	.byte	0x1f
     a4f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     a50:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     a54:	17c1      	asrs	r1, r0, #31
     a56:	e004      	b.n	a62 <CONFIG_ISR_STACK_SIZE+0x262>
					(sint_value_type)va_arg(ap, intmax_t);
     a58:	3407      	adds	r4, #7
     a5a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     a5e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     a62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     a66:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a6a:	f013 0603 	ands.w	r6, r3, #3
     a6e:	d054      	beq.n	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
			OUTS(sp, fp);
     a70:	9802      	ldr	r0, [sp, #8]
     a72:	463b      	mov	r3, r7
     a74:	4652      	mov	r2, sl
     a76:	4659      	mov	r1, fp
     a78:	f005 fec2 	bl	6800 <outs>
     a7c:	2800      	cmp	r0, #0
     a7e:	f2c0 8143 	blt.w	d08 <CONFIG_ISR_STACK_SIZE+0x508>
     a82:	4405      	add	r5, r0
			continue;
     a84:	46ba      	mov	sl, r7
     a86:	e5db      	b.n	640 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a88:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     a8c:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a8e:	ea4f 71e0 	mov.w	r1, r0, asr #31
     a92:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a96:	d105      	bne.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
				value->uint = (unsigned char)value->uint;
     a98:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     a9c:	930a      	str	r3, [sp, #40]	; 0x28
     a9e:	2300      	movs	r3, #0
     aa0:	930b      	str	r3, [sp, #44]	; 0x2c
     aa2:	e7e0      	b.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
			} else if (length_mod == LENGTH_H) {
     aa4:	2a02      	cmp	r2, #2
     aa6:	d1de      	bne.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
				value->sint = (short)value->sint;
     aa8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     aac:	e7d2      	b.n	a54 <CONFIG_ISR_STACK_SIZE+0x254>
		} else if (specifier_cat == SPECIFIER_UINT) {
     aae:	2b02      	cmp	r3, #2
     ab0:	d123      	bne.n	afa <CONFIG_ISR_STACK_SIZE+0x2fa>
			switch (length_mod) {
     ab2:	1ed3      	subs	r3, r2, #3
     ab4:	2b04      	cmp	r3, #4
     ab6:	d813      	bhi.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
     ab8:	e8df f003 	tbb	[pc, r3]
     abc:	120a0a03 	.word	0x120a0a03
     ac0:	12          	.byte	0x12
     ac1:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     ac2:	6820      	ldr	r0, [r4, #0]
     ac4:	900a      	str	r0, [sp, #40]	; 0x28
     ac6:	2100      	movs	r1, #0
     ac8:	1d23      	adds	r3, r4, #4
     aca:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     acc:	461c      	mov	r4, r3
     ace:	e7ca      	b.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
					(uint_value_type)va_arg(ap,
     ad0:	3407      	adds	r4, #7
     ad2:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     ad6:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     ada:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     ade:	e7f5      	b.n	acc <CONFIG_ISR_STACK_SIZE+0x2cc>
					(uint_value_type)va_arg(ap, size_t);
     ae0:	f854 3b04 	ldr.w	r3, [r4], #4
     ae4:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ae6:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     ae8:	f04f 0300 	mov.w	r3, #0
     aec:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     aee:	d0d3      	beq.n	a98 <CONFIG_ISR_STACK_SIZE+0x298>
			} else if (length_mod == LENGTH_H) {
     af0:	2a02      	cmp	r2, #2
     af2:	d1b8      	bne.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
				value->uint = (unsigned short)value->uint;
     af4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     af8:	e7d0      	b.n	a9c <CONFIG_ISR_STACK_SIZE+0x29c>
		} else if (specifier_cat == SPECIFIER_FP) {
     afa:	2b04      	cmp	r3, #4
     afc:	d107      	bne.n	b0e <CONFIG_ISR_STACK_SIZE+0x30e>
			if (length_mod == LENGTH_UPPER_L) {
     afe:	3407      	adds	r4, #7
     b00:	f024 0407 	bic.w	r4, r4, #7
     b04:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     b08:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     b0c:	e7ab      	b.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b0e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     b10:	bf04      	itt	eq
     b12:	f854 3b04 	ldreq.w	r3, [r4], #4
     b16:	930a      	streq	r3, [sp, #40]	; 0x28
     b18:	e7a5      	b.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
		switch (conv->specifier) {
     b1a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     b1e:	2878      	cmp	r0, #120	; 0x78
     b20:	d8b0      	bhi.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
     b22:	2862      	cmp	r0, #98	; 0x62
     b24:	d822      	bhi.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
     b26:	2825      	cmp	r0, #37	; 0x25
     b28:	f43f ad93 	beq.w	652 <cbvprintf+0x22>
     b2c:	2858      	cmp	r0, #88	; 0x58
     b2e:	d1a9      	bne.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b30:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     b34:	9300      	str	r3, [sp, #0]
     b36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     b3a:	ab04      	add	r3, sp, #16
     b3c:	aa0c      	add	r2, sp, #48	; 0x30
     b3e:	f005 fe14 	bl	676a <encode_uint>
     b42:	4682      	mov	sl, r0
			if (precision >= 0) {
     b44:	f1b8 0f00 	cmp.w	r8, #0
     b48:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     b4c:	db0c      	blt.n	b68 <CONFIG_ISR_STACK_SIZE+0x368>
				conv->flag_zero = false;
     b4e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     b52:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     b56:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     b5a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     b5c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     b60:	d902      	bls.n	b68 <CONFIG_ISR_STACK_SIZE+0x368>
					conv->pad0_value = precision - (int)len;
     b62:	eba8 0303 	sub.w	r3, r8, r3
     b66:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     b68:	4680      	mov	r8, r0
     b6a:	e03d      	b.n	be8 <CONFIG_ISR_STACK_SIZE+0x3e8>
     b6c:	3863      	subs	r0, #99	; 0x63
     b6e:	2815      	cmp	r0, #21
     b70:	d888      	bhi.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
     b72:	a101      	add	r1, pc, #4	; (adr r1, b78 <CONFIG_ISR_STACK_SIZE+0x378>)
     b74:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     b78:	00000bf9 	.word	0x00000bf9
     b7c:	00000c5d 	.word	0x00000c5d
     b80:	00000a85 	.word	0x00000a85
     b84:	00000a85 	.word	0x00000a85
     b88:	00000a85 	.word	0x00000a85
     b8c:	00000a85 	.word	0x00000a85
     b90:	00000c5d 	.word	0x00000c5d
     b94:	00000a85 	.word	0x00000a85
     b98:	00000a85 	.word	0x00000a85
     b9c:	00000a85 	.word	0x00000a85
     ba0:	00000a85 	.word	0x00000a85
     ba4:	00000cbb 	.word	0x00000cbb
     ba8:	00000c89 	.word	0x00000c89
     bac:	00000c8d 	.word	0x00000c8d
     bb0:	00000a85 	.word	0x00000a85
     bb4:	00000a85 	.word	0x00000a85
     bb8:	00000bd1 	.word	0x00000bd1
     bbc:	00000a85 	.word	0x00000a85
     bc0:	00000c89 	.word	0x00000c89
     bc4:	00000a85 	.word	0x00000a85
     bc8:	00000a85 	.word	0x00000a85
     bcc:	00000c89 	.word	0x00000c89
			if (precision >= 0) {
     bd0:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     bd4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     bd8:	db0a      	blt.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
				len = strnlen(bps, precision);
     bda:	4641      	mov	r1, r8
     bdc:	4650      	mov	r0, sl
     bde:	f005 fed2 	bl	6986 <strnlen>
			bpe = bps + len;
     be2:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     be6:	2600      	movs	r6, #0
		if (bps == NULL) {
     be8:	f1ba 0f00 	cmp.w	sl, #0
     bec:	d10c      	bne.n	c08 <CONFIG_ISR_STACK_SIZE+0x408>
     bee:	e749      	b.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
				len = strlen(bps);
     bf0:	4650      	mov	r0, sl
     bf2:	f005 fec1 	bl	6978 <strlen>
     bf6:	e7f4      	b.n	be2 <CONFIG_ISR_STACK_SIZE+0x3e2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     bfa:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     bfe:	2600      	movs	r6, #0
			bpe = buf + 1;
     c00:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
     c04:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     c08:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     c0c:	b106      	cbz	r6, c10 <CONFIG_ISR_STACK_SIZE+0x410>
			nj_len += 1U;
     c0e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     c10:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     c14:	06d0      	lsls	r0, r2, #27
     c16:	d56b      	bpl.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
			nj_len += 2U;
     c18:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     c1a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     c1c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     c1e:	bf48      	it	mi
     c20:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     c22:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     c24:	bf48      	it	mi
     c26:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     c28:	f1b9 0f00 	cmp.w	r9, #0
     c2c:	dd79      	ble.n	d22 <CONFIG_ISR_STACK_SIZE+0x522>
			if (!conv->flag_dash) {
     c2e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     c32:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     c36:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c3a:	9303      	str	r3, [sp, #12]
     c3c:	0753      	lsls	r3, r2, #29
     c3e:	d470      	bmi.n	d22 <CONFIG_ISR_STACK_SIZE+0x522>
				if (conv->flag_zero) {
     c40:	0650      	lsls	r0, r2, #25
     c42:	d564      	bpl.n	d0e <CONFIG_ISR_STACK_SIZE+0x50e>
					if (sign != 0) {
     c44:	b146      	cbz	r6, c58 <CONFIG_ISR_STACK_SIZE+0x458>
						OUTC(sign);
     c46:	9b02      	ldr	r3, [sp, #8]
     c48:	4659      	mov	r1, fp
     c4a:	4630      	mov	r0, r6
     c4c:	4798      	blx	r3
     c4e:	2800      	cmp	r0, #0
     c50:	db5a      	blt.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
						sign = 0;
     c52:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     c54:	3501      	adds	r5, #1
						sign = 0;
     c56:	461e      	mov	r6, r3
					pad = '0';
     c58:	2330      	movs	r3, #48	; 0x30
     c5a:	e059      	b.n	d10 <CONFIG_ISR_STACK_SIZE+0x510>
			if (conv->flag_plus) {
     c5c:	071e      	lsls	r6, r3, #28
     c5e:	d411      	bmi.n	c84 <CONFIG_ISR_STACK_SIZE+0x484>
				sign = ' ';
     c60:	f013 0610 	ands.w	r6, r3, #16
     c64:	bf18      	it	ne
     c66:	2620      	movne	r6, #32
			sint = value->sint;
     c68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     c6c:	2a00      	cmp	r2, #0
     c6e:	f173 0100 	sbcs.w	r1, r3, #0
     c72:	f6bf af5d 	bge.w	b30 <CONFIG_ISR_STACK_SIZE+0x330>
				value->uint = (uint_value_type)-sint;
     c76:	4252      	negs	r2, r2
     c78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     c80:	262d      	movs	r6, #45	; 0x2d
     c82:	e755      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
				sign = '+';
     c84:	262b      	movs	r6, #43	; 0x2b
     c86:	e7ef      	b.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
		switch (conv->specifier) {
     c88:	2600      	movs	r6, #0
     c8a:	e751      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
			if (value->ptr != NULL) {
     c8c:	980a      	ldr	r0, [sp, #40]	; 0x28
     c8e:	b348      	cbz	r0, ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c90:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c94:	9300      	str	r3, [sp, #0]
     c96:	aa0c      	add	r2, sp, #48	; 0x30
     c98:	ab04      	add	r3, sp, #16
     c9a:	2100      	movs	r1, #0
     c9c:	f005 fd65 	bl	676a <encode_uint>
				conv->altform_0c = true;
     ca0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     ca4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     ca8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     cac:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     cb0:	4682      	mov	sl, r0
				conv->altform_0c = true;
     cb2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     cb6:	2600      	movs	r6, #0
				goto prec_int_pad0;
     cb8:	e744      	b.n	b44 <CONFIG_ISR_STACK_SIZE+0x344>
				store_count(conv, value->ptr, count);
     cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     cbc:	2a07      	cmp	r2, #7
     cbe:	f63f aee1 	bhi.w	a84 <CONFIG_ISR_STACK_SIZE+0x284>
     cc2:	e8df f002 	tbb	[pc, r2]
     cc6:	040d      	.short	0x040d
     cc8:	08080d06 	.word	0x08080d06
     ccc:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     cce:	701d      	strb	r5, [r3, #0]
		break;
     cd0:	e6d8      	b.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
		*(short *)dp = (short)count;
     cd2:	801d      	strh	r5, [r3, #0]
		break;
     cd4:	e6d6      	b.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
		*(intmax_t *)dp = (intmax_t)count;
     cd6:	4628      	mov	r0, r5
     cd8:	17e9      	asrs	r1, r5, #31
     cda:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     cde:	e6d1      	b.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     ce0:	601d      	str	r5, [r3, #0]
		break;
     ce2:	e6cf      	b.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
			bpe = bps + 5;
     ce4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; dac <CONFIG_ISR_STACK_SIZE+0x5ac>
     ce8:	4606      	mov	r6, r0
			bps = "(nil)";
     cea:	f1a8 0a05 	sub.w	sl, r8, #5
     cee:	e78b      	b.n	c08 <CONFIG_ISR_STACK_SIZE+0x408>
		} else if (conv->altform_0) {
     cf0:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     cf2:	bf48      	it	mi
     cf4:	3301      	addmi	r3, #1
     cf6:	e790      	b.n	c1a <CONFIG_ISR_STACK_SIZE+0x41a>
					OUTC(pad);
     cf8:	4618      	mov	r0, r3
     cfa:	9303      	str	r3, [sp, #12]
     cfc:	4659      	mov	r1, fp
     cfe:	9b02      	ldr	r3, [sp, #8]
     d00:	4798      	blx	r3
     d02:	2800      	cmp	r0, #0
     d04:	9b03      	ldr	r3, [sp, #12]
     d06:	da04      	bge.n	d12 <CONFIG_ISR_STACK_SIZE+0x512>
#undef OUTS
#undef OUTC
}
     d08:	b011      	add	sp, #68	; 0x44
     d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d0e:	2320      	movs	r3, #32
     d10:	444d      	add	r5, r9
     d12:	464a      	mov	r2, r9
				while (width-- > 0) {
     d14:	2a00      	cmp	r2, #0
     d16:	eba5 0109 	sub.w	r1, r5, r9
     d1a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     d1e:	dceb      	bgt.n	cf8 <CONFIG_ISR_STACK_SIZE+0x4f8>
     d20:	460d      	mov	r5, r1
		if (sign != 0) {
     d22:	b136      	cbz	r6, d32 <CONFIG_ISR_STACK_SIZE+0x532>
			OUTC(sign);
     d24:	9b02      	ldr	r3, [sp, #8]
     d26:	4659      	mov	r1, fp
     d28:	4630      	mov	r0, r6
     d2a:	4798      	blx	r3
     d2c:	2800      	cmp	r0, #0
     d2e:	dbeb      	blt.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
     d30:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     d32:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d36:	06d9      	lsls	r1, r3, #27
     d38:	d401      	bmi.n	d3e <CONFIG_ISR_STACK_SIZE+0x53e>
     d3a:	071a      	lsls	r2, r3, #28
     d3c:	d506      	bpl.n	d4c <CONFIG_ISR_STACK_SIZE+0x54c>
				OUTC('0');
     d3e:	9b02      	ldr	r3, [sp, #8]
     d40:	4659      	mov	r1, fp
     d42:	2030      	movs	r0, #48	; 0x30
     d44:	4798      	blx	r3
     d46:	2800      	cmp	r0, #0
     d48:	dbde      	blt.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
     d4a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     d4c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d50:	06db      	lsls	r3, r3, #27
     d52:	d507      	bpl.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
				OUTC(conv->specifier);
     d54:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     d58:	9b02      	ldr	r3, [sp, #8]
     d5a:	4659      	mov	r1, fp
     d5c:	4798      	blx	r3
     d5e:	2800      	cmp	r0, #0
     d60:	dbd2      	blt.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
     d62:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d64:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     d66:	442e      	add	r6, r5
     d68:	1b73      	subs	r3, r6, r5
     d6a:	2b00      	cmp	r3, #0
     d6c:	dc16      	bgt.n	d9c <CONFIG_ISR_STACK_SIZE+0x59c>
			OUTS(bps, bpe);
     d6e:	9802      	ldr	r0, [sp, #8]
     d70:	4643      	mov	r3, r8
     d72:	4652      	mov	r2, sl
     d74:	4659      	mov	r1, fp
     d76:	f005 fd43 	bl	6800 <outs>
     d7a:	2800      	cmp	r0, #0
     d7c:	dbc4      	blt.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
     d7e:	4405      	add	r5, r0
		while (width > 0) {
     d80:	44a9      	add	r9, r5
     d82:	eba9 0305 	sub.w	r3, r9, r5
     d86:	2b00      	cmp	r3, #0
     d88:	f77f ae7c 	ble.w	a84 <CONFIG_ISR_STACK_SIZE+0x284>
			OUTC(' ');
     d8c:	9b02      	ldr	r3, [sp, #8]
     d8e:	4659      	mov	r1, fp
     d90:	2020      	movs	r0, #32
     d92:	4798      	blx	r3
     d94:	2800      	cmp	r0, #0
     d96:	dbb7      	blt.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
     d98:	3501      	adds	r5, #1
			--width;
     d9a:	e7f2      	b.n	d82 <CONFIG_ISR_STACK_SIZE+0x582>
				OUTC('0');
     d9c:	9b02      	ldr	r3, [sp, #8]
     d9e:	4659      	mov	r1, fp
     da0:	2030      	movs	r0, #48	; 0x30
     da2:	4798      	blx	r3
     da4:	2800      	cmp	r0, #0
     da6:	dbaf      	blt.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
     da8:	3501      	adds	r5, #1
     daa:	e7dd      	b.n	d68 <CONFIG_ISR_STACK_SIZE+0x568>
     dac:	000076e3 	.word	0x000076e3

00000db0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     db0:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     db2:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     db4:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
     db6:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
     dba:	2c03      	cmp	r4, #3
{
     dbc:	4605      	mov	r5, r0
	switch (method) {
     dbe:	d002      	beq.n	dc6 <sys_notify_finalize+0x16>
     dc0:	b12c      	cbz	r4, dce <sys_notify_finalize+0x1e>
     dc2:	2000      	movs	r0, #0
     dc4:	e000      	b.n	dc8 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     dc6:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     dc8:	2300      	movs	r3, #0
     dca:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     dcc:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     dce:	4a05      	ldr	r2, [pc, #20]	; (de4 <sys_notify_finalize+0x34>)
     dd0:	4905      	ldr	r1, [pc, #20]	; (de8 <sys_notify_finalize+0x38>)
     dd2:	4806      	ldr	r0, [pc, #24]	; (dec <sys_notify_finalize+0x3c>)
     dd4:	2345      	movs	r3, #69	; 0x45
     dd6:	f005 fd9a 	bl	690e <printk>
     dda:	4802      	ldr	r0, [pc, #8]	; (de4 <sys_notify_finalize+0x34>)
     ddc:	2145      	movs	r1, #69	; 0x45
     dde:	f005 fcbd 	bl	675c <assert_post_action>
     de2:	e7ee      	b.n	dc2 <sys_notify_finalize+0x12>
     de4:	000076e4 	.word	0x000076e4
     de8:	00007f38 	.word	0x00007f38
     dec:	00007610 	.word	0x00007610

00000df0 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
     df0:	4801      	ldr	r0, [pc, #4]	; (df8 <nrf_cc3xx_platform_abort_init+0x8>)
     df2:	f005 bb21 	b.w	6438 <nrf_cc3xx_platform_set_abort>
     df6:	bf00      	nop
     df8:	000072f8 	.word	0x000072f8

00000dfc <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     dfc:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     dfe:	b1d0      	cbz	r0, e36 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
     e00:	6843      	ldr	r3, [r0, #4]
     e02:	2b04      	cmp	r3, #4
     e04:	d111      	bne.n	e2a <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
     e06:	2200      	movs	r2, #0
     e08:	6803      	ldr	r3, [r0, #0]
     e0a:	f3bf 8f5b 	dmb	ish
     e0e:	e853 1f00 	ldrex	r1, [r3]
     e12:	2901      	cmp	r1, #1
     e14:	d103      	bne.n	e1e <mutex_unlock_platform+0x22>
     e16:	e843 2000 	strex	r0, r2, [r3]
     e1a:	2800      	cmp	r0, #0
     e1c:	d1f7      	bne.n	e0e <mutex_unlock_platform+0x12>
     e1e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
     e22:	4807      	ldr	r0, [pc, #28]	; (e40 <mutex_unlock_platform+0x44>)
     e24:	bf08      	it	eq
     e26:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
     e28:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     e2a:	b13b      	cbz	r3, e3c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
     e2c:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     e2e:	f003 fbeb 	bl	4608 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
     e32:	2000      	movs	r0, #0
     e34:	e7f8      	b.n	e28 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
     e36:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     e3a:	e7f5      	b.n	e28 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     e3c:	4801      	ldr	r0, [pc, #4]	; (e44 <mutex_unlock_platform+0x48>)
     e3e:	e7f3      	b.n	e28 <mutex_unlock_platform+0x2c>
     e40:	ffff8fe9 	.word	0xffff8fe9
     e44:	ffff8fea 	.word	0xffff8fea

00000e48 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     e48:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     e4a:	4604      	mov	r4, r0
     e4c:	b918      	cbnz	r0, e56 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
     e4e:	4b0d      	ldr	r3, [pc, #52]	; (e84 <mutex_free_platform+0x3c>)
     e50:	480d      	ldr	r0, [pc, #52]	; (e88 <mutex_free_platform+0x40>)
     e52:	685b      	ldr	r3, [r3, #4]
     e54:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
     e56:	6861      	ldr	r1, [r4, #4]
     e58:	2908      	cmp	r1, #8
     e5a:	d00d      	beq.n	e78 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     e5c:	f031 0304 	bics.w	r3, r1, #4
     e60:	d00a      	beq.n	e78 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
     e62:	f011 0102 	ands.w	r1, r1, #2
     e66:	d008      	beq.n	e7a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
     e68:	4808      	ldr	r0, [pc, #32]	; (e8c <mutex_free_platform+0x44>)
     e6a:	4621      	mov	r1, r4
     e6c:	f003 fa68 	bl	4340 <k_mem_slab_free>
        mutex->mutex = NULL;
     e70:	2300      	movs	r3, #0
     e72:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
     e74:	2300      	movs	r3, #0
     e76:	6063      	str	r3, [r4, #4]
}
     e78:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     e7a:	6820      	ldr	r0, [r4, #0]
     e7c:	2214      	movs	r2, #20
     e7e:	f005 fda2 	bl	69c6 <memset>
     e82:	e7f7      	b.n	e74 <mutex_free_platform+0x2c>
     e84:	20000060 	.word	0x20000060
     e88:	00007707 	.word	0x00007707
     e8c:	20000268 	.word	0x20000268

00000e90 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     e90:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     e92:	4604      	mov	r4, r0
     e94:	b918      	cbnz	r0, e9e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
     e96:	4b16      	ldr	r3, [pc, #88]	; (ef0 <mutex_init_platform+0x60>)
     e98:	4816      	ldr	r0, [pc, #88]	; (ef4 <mutex_init_platform+0x64>)
     e9a:	685b      	ldr	r3, [r3, #4]
     e9c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
     e9e:	6863      	ldr	r3, [r4, #4]
     ea0:	2b04      	cmp	r3, #4
     ea2:	d023      	beq.n	eec <mutex_init_platform+0x5c>
     ea4:	2b08      	cmp	r3, #8
     ea6:	d021      	beq.n	eec <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
     ea8:	b9cb      	cbnz	r3, ede <mutex_init_platform+0x4e>
     eaa:	6823      	ldr	r3, [r4, #0]
     eac:	b9bb      	cbnz	r3, ede <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     eae:	4812      	ldr	r0, [pc, #72]	; (ef8 <mutex_init_platform+0x68>)
     eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     eb8:	4621      	mov	r1, r4
     eba:	f003 f9d5 	bl	4268 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     ebe:	b908      	cbnz	r0, ec4 <mutex_init_platform+0x34>
     ec0:	6823      	ldr	r3, [r4, #0]
     ec2:	b91b      	cbnz	r3, ecc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
     ec4:	4b0a      	ldr	r3, [pc, #40]	; (ef0 <mutex_init_platform+0x60>)
     ec6:	480d      	ldr	r0, [pc, #52]	; (efc <mutex_init_platform+0x6c>)
     ec8:	685b      	ldr	r3, [r3, #4]
     eca:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     ecc:	6820      	ldr	r0, [r4, #0]
     ece:	2214      	movs	r2, #20
     ed0:	2100      	movs	r1, #0
     ed2:	f005 fd78 	bl	69c6 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     ed6:	6863      	ldr	r3, [r4, #4]
     ed8:	f043 0302 	orr.w	r3, r3, #2
     edc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
     ede:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
     ee0:	f006 f861 	bl	6fa6 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
     ee4:	6863      	ldr	r3, [r4, #4]
     ee6:	f043 0301 	orr.w	r3, r3, #1
     eea:	6063      	str	r3, [r4, #4]
}
     eec:	bd10      	pop	{r4, pc}
     eee:	bf00      	nop
     ef0:	20000060 	.word	0x20000060
     ef4:	00007707 	.word	0x00007707
     ef8:	20000268 	.word	0x20000268
     efc:	0000772d 	.word	0x0000772d

00000f00 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     f00:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     f02:	b308      	cbz	r0, f48 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
     f04:	6843      	ldr	r3, [r0, #4]
     f06:	2b04      	cmp	r3, #4
     f08:	d110      	bne.n	f2c <mutex_lock_platform+0x2c>
     f0a:	2201      	movs	r2, #1
     f0c:	6803      	ldr	r3, [r0, #0]
     f0e:	f3bf 8f5b 	dmb	ish
     f12:	e853 1f00 	ldrex	r1, [r3]
     f16:	2900      	cmp	r1, #0
     f18:	d103      	bne.n	f22 <mutex_lock_platform+0x22>
     f1a:	e843 2000 	strex	r0, r2, [r3]
     f1e:	2800      	cmp	r0, #0
     f20:	d1f7      	bne.n	f12 <mutex_lock_platform+0x12>
     f22:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
     f26:	d10b      	bne.n	f40 <mutex_lock_platform+0x40>
     f28:	2000      	movs	r0, #0
}
     f2a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     f2c:	b153      	cbz	r3, f44 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
     f2e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f38:	f003 fa66 	bl	4408 <z_impl_k_mutex_lock>
        if (ret == 0) {
     f3c:	2800      	cmp	r0, #0
     f3e:	d0f3      	beq.n	f28 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
     f40:	4803      	ldr	r0, [pc, #12]	; (f50 <mutex_lock_platform+0x50>)
     f42:	e7f2      	b.n	f2a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     f44:	4803      	ldr	r0, [pc, #12]	; (f54 <mutex_lock_platform+0x54>)
     f46:	e7f0      	b.n	f2a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
     f48:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     f4c:	e7ed      	b.n	f2a <mutex_lock_platform+0x2a>
     f4e:	bf00      	nop
     f50:	ffff8fe9 	.word	0xffff8fe9
     f54:	ffff8fea 	.word	0xffff8fea

00000f58 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
     f58:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
     f5a:	4906      	ldr	r1, [pc, #24]	; (f74 <nrf_cc3xx_platform_mutex_init+0x1c>)
     f5c:	4806      	ldr	r0, [pc, #24]	; (f78 <nrf_cc3xx_platform_mutex_init+0x20>)
     f5e:	2340      	movs	r3, #64	; 0x40
     f60:	2214      	movs	r2, #20
     f62:	f006 f804 	bl	6f6e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
     f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
     f6a:	4904      	ldr	r1, [pc, #16]	; (f7c <nrf_cc3xx_platform_mutex_init+0x24>)
     f6c:	4804      	ldr	r0, [pc, #16]	; (f80 <nrf_cc3xx_platform_mutex_init+0x28>)
     f6e:	f005 bac5 	b.w	64fc <nrf_cc3xx_platform_set_mutexes>
     f72:	bf00      	nop
     f74:	20000288 	.word	0x20000288
     f78:	20000268 	.word	0x20000268
     f7c:	00007310 	.word	0x00007310
     f80:	00007300 	.word	0x00007300

00000f84 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f88:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
     f8c:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     f8e:	f019 0f08 	tst.w	r9, #8
{
     f92:	4604      	mov	r4, r0
     f94:	9203      	str	r2, [sp, #12]
	if (processing) {
     f96:	d022      	beq.n	fde <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
     f98:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     f9a:	bf0c      	ite	eq
     f9c:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     fa0:	f049 0920 	orrne.w	r9, r9, #32
     fa4:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     fa8:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     faa:	4620      	mov	r0, r4
     fac:	f004 fe92 	bl	5cd4 <z_spin_unlock_valid>
     fb0:	b968      	cbnz	r0, fce <process_event+0x4a>
     fb2:	4a9f      	ldr	r2, [pc, #636]	; (1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>)
     fb4:	499f      	ldr	r1, [pc, #636]	; (1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>)
     fb6:	48a0      	ldr	r0, [pc, #640]	; (1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>)
     fb8:	23ac      	movs	r3, #172	; 0xac
     fba:	f005 fca8 	bl	690e <printk>
     fbe:	489f      	ldr	r0, [pc, #636]	; (123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>)
     fc0:	4621      	mov	r1, r4
     fc2:	f005 fca4 	bl	690e <printk>
     fc6:	489a      	ldr	r0, [pc, #616]	; (1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>)
     fc8:	21ac      	movs	r1, #172	; 0xac
     fca:	f005 fbc7 	bl	675c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     fce:	9b03      	ldr	r3, [sp, #12]
     fd0:	f383 8811 	msr	BASEPRI, r3
     fd4:	f3bf 8f6f 	isb	sy
}
     fd8:	b005      	add	sp, #20
     fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     fde:	4f98      	ldr	r7, [pc, #608]	; (1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>)
     fe0:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     fe4:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     fe8:	2902      	cmp	r1, #2
     fea:	d106      	bne.n	ffa <process_event+0x76>
			evt = process_recheck(mgr);
     fec:	4620      	mov	r0, r4
     fee:	f005 fc33 	bl	6858 <process_recheck>
		if (evt == EVT_NOP) {
     ff2:	2800      	cmp	r0, #0
     ff4:	d0d8      	beq.n	fa8 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
     ff6:	2801      	cmp	r0, #1
     ff8:	d168      	bne.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
			res = mgr->last_res;
     ffa:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     ffe:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1000:	f1bb 0f00 	cmp.w	fp, #0
    1004:	da0a      	bge.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1006:	2600      	movs	r6, #0
		*clients = mgr->clients;
    1008:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    100a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    100e:	e9c4 6600 	strd	r6, r6, [r4]
    1012:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1016:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1018:	9601      	str	r6, [sp, #4]
    101a:	e027      	b.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    101c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1020:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1022:	2901      	cmp	r1, #1
    1024:	d834      	bhi.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
	list->head = NULL;
    1026:	2100      	movs	r1, #0
    1028:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    102c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    102e:	6825      	ldr	r5, [r4, #0]
    1030:	b29b      	uxth	r3, r3
	list->tail = NULL;
    1032:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1036:	d10c      	bne.n	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1038:	428d      	cmp	r5, r1
    103a:	462a      	mov	r2, r5
    103c:	bf38      	it	cc
    103e:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1040:	b12a      	cbz	r2, 104e <CONFIG_FPROTECT_BLOCK_SIZE+0x4e>
				mgr->refs += 1U;
    1042:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1044:	6812      	ldr	r2, [r2, #0]
    1046:	3101      	adds	r1, #1
    1048:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    104a:	2a00      	cmp	r2, #0
    104c:	d1f8      	bne.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    104e:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1052:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1054:	4620      	mov	r0, r4
    1056:	f005 fbff 	bl	6858 <process_recheck>
    105a:	4606      	mov	r6, r0
    105c:	2800      	cmp	r0, #0
    105e:	d0db      	beq.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1060:	8ba3      	ldrh	r3, [r4, #28]
    1062:	f043 0320 	orr.w	r3, r3, #32
    1066:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1068:	2300      	movs	r3, #0
    106a:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    106c:	8ba3      	ldrh	r3, [r4, #28]
    106e:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1072:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1074:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    1076:	d003      	beq.n	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
		if (do_monitors
    1078:	68a2      	ldr	r2, [r4, #8]
    107a:	2a00      	cmp	r2, #0
    107c:	f040 80f0 	bne.w	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
		    || !sys_slist_is_empty(&clients)
    1080:	b91d      	cbnz	r5, 108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
		    || (transit != NULL)) {
    1082:	9a01      	ldr	r2, [sp, #4]
    1084:	2a00      	cmp	r2, #0
    1086:	f000 8136 	beq.w	12f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f6>
    108a:	f04f 0900 	mov.w	r9, #0
    108e:	e0e9      	b.n	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1090:	2a04      	cmp	r2, #4
    1092:	d10e      	bne.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1094:	f023 0307 	bic.w	r3, r3, #7
    1098:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    109a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    109c:	4620      	mov	r0, r4
    109e:	f005 fbdb 	bl	6858 <process_recheck>
    10a2:	4605      	mov	r5, r0
    10a4:	b118      	cbz	r0, 10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    10a6:	f042 0220 	orr.w	r2, r2, #32
    10aa:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    10ac:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    10ae:	9501      	str	r5, [sp, #4]
    10b0:	e7dc      	b.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
		__ASSERT_NO_MSG(false);
    10b2:	4640      	mov	r0, r8
    10b4:	4963      	ldr	r1, [pc, #396]	; (1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>)
    10b6:	f240 131b 	movw	r3, #283	; 0x11b
    10ba:	463a      	mov	r2, r7
    10bc:	f005 fc27 	bl	690e <printk>
    10c0:	f240 111b 	movw	r1, #283	; 0x11b
    10c4:	4638      	mov	r0, r7
    10c6:	f005 fb49 	bl	675c <assert_post_action>
    10ca:	e7ef      	b.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
		} else if (evt == EVT_START) {
    10cc:	2803      	cmp	r0, #3
    10ce:	d135      	bne.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    10d0:	f1b9 0f00 	cmp.w	r9, #0
    10d4:	d00b      	beq.n	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
    10d6:	495c      	ldr	r1, [pc, #368]	; (1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>)
    10d8:	4640      	mov	r0, r8
    10da:	f44f 73ab 	mov.w	r3, #342	; 0x156
    10de:	463a      	mov	r2, r7
    10e0:	f005 fc15 	bl	690e <printk>
    10e4:	f44f 71ab 	mov.w	r1, #342	; 0x156
    10e8:	4638      	mov	r0, r7
    10ea:	f005 fb37 	bl	675c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    10ee:	6823      	ldr	r3, [r4, #0]
    10f0:	b95b      	cbnz	r3, 110a <CONFIG_FPROTECT_BLOCK_SIZE+0x10a>
    10f2:	4956      	ldr	r1, [pc, #344]	; (124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>)
    10f4:	4640      	mov	r0, r8
    10f6:	f240 1357 	movw	r3, #343	; 0x157
    10fa:	463a      	mov	r2, r7
    10fc:	f005 fc07 	bl	690e <printk>
    1100:	f240 1157 	movw	r1, #343	; 0x157
    1104:	4638      	mov	r0, r7
    1106:	f005 fb29 	bl	675c <assert_post_action>
			transit = mgr->transitions->start;
    110a:	6923      	ldr	r3, [r4, #16]
    110c:	681b      	ldr	r3, [r3, #0]
    110e:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1110:	b95b      	cbnz	r3, 112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
    1112:	494f      	ldr	r1, [pc, #316]	; (1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>)
    1114:	4640      	mov	r0, r8
    1116:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    111a:	463a      	mov	r2, r7
    111c:	f005 fbf7 	bl	690e <printk>
    1120:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1124:	4638      	mov	r0, r7
    1126:	f005 fb19 	bl	675c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    112a:	8ba3      	ldrh	r3, [r4, #28]
    112c:	f023 0307 	bic.w	r3, r3, #7
    1130:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1134:	83a3      	strh	r3, [r4, #28]
}
    1136:	2500      	movs	r5, #0
		res = 0;
    1138:	46ab      	mov	fp, r5
}
    113a:	e797      	b.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
		} else if (evt == EVT_STOP) {
    113c:	2804      	cmp	r0, #4
    113e:	d132      	bne.n	11a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1140:	f1b9 0f02 	cmp.w	r9, #2
    1144:	d00b      	beq.n	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
    1146:	4943      	ldr	r1, [pc, #268]	; (1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>)
    1148:	4640      	mov	r0, r8
    114a:	f240 135d 	movw	r3, #349	; 0x15d
    114e:	463a      	mov	r2, r7
    1150:	f005 fbdd 	bl	690e <printk>
    1154:	f240 115d 	movw	r1, #349	; 0x15d
    1158:	4638      	mov	r0, r7
    115a:	f005 faff 	bl	675c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    115e:	8be3      	ldrh	r3, [r4, #30]
    1160:	b15b      	cbz	r3, 117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
    1162:	493d      	ldr	r1, [pc, #244]	; (1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>)
    1164:	4640      	mov	r0, r8
    1166:	f44f 73af 	mov.w	r3, #350	; 0x15e
    116a:	463a      	mov	r2, r7
    116c:	f005 fbcf 	bl	690e <printk>
    1170:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1174:	4638      	mov	r0, r7
    1176:	f005 faf1 	bl	675c <assert_post_action>
			transit = mgr->transitions->stop;
    117a:	6923      	ldr	r3, [r4, #16]
    117c:	685b      	ldr	r3, [r3, #4]
    117e:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1180:	b95b      	cbnz	r3, 119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
    1182:	4933      	ldr	r1, [pc, #204]	; (1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>)
    1184:	4640      	mov	r0, r8
    1186:	f240 1361 	movw	r3, #353	; 0x161
    118a:	463a      	mov	r2, r7
    118c:	f005 fbbf 	bl	690e <printk>
    1190:	f240 1161 	movw	r1, #353	; 0x161
    1194:	4638      	mov	r0, r7
    1196:	f005 fae1 	bl	675c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    119a:	8ba3      	ldrh	r3, [r4, #28]
    119c:	f023 0307 	bic.w	r3, r3, #7
    11a0:	f043 0304 	orr.w	r3, r3, #4
    11a4:	e7c6      	b.n	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
		} else if (evt == EVT_RESET) {
    11a6:	2805      	cmp	r0, #5
    11a8:	d132      	bne.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    11aa:	f1b9 0f01 	cmp.w	r9, #1
    11ae:	d00b      	beq.n	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
    11b0:	492a      	ldr	r1, [pc, #168]	; (125c <CONFIG_FPROTECT_BLOCK_SIZE+0x25c>)
    11b2:	4640      	mov	r0, r8
    11b4:	f44f 73b2 	mov.w	r3, #356	; 0x164
    11b8:	463a      	mov	r2, r7
    11ba:	f005 fba8 	bl	690e <printk>
    11be:	f44f 71b2 	mov.w	r1, #356	; 0x164
    11c2:	4638      	mov	r0, r7
    11c4:	f005 faca 	bl	675c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    11c8:	6823      	ldr	r3, [r4, #0]
    11ca:	b95b      	cbnz	r3, 11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
    11cc:	491f      	ldr	r1, [pc, #124]	; (124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>)
    11ce:	4640      	mov	r0, r8
    11d0:	f240 1365 	movw	r3, #357	; 0x165
    11d4:	463a      	mov	r2, r7
    11d6:	f005 fb9a 	bl	690e <printk>
    11da:	f240 1165 	movw	r1, #357	; 0x165
    11de:	4638      	mov	r0, r7
    11e0:	f005 fabc 	bl	675c <assert_post_action>
			transit = mgr->transitions->reset;
    11e4:	6923      	ldr	r3, [r4, #16]
    11e6:	689b      	ldr	r3, [r3, #8]
    11e8:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    11ea:	b95b      	cbnz	r3, 1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11ec:	4918      	ldr	r1, [pc, #96]	; (1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>)
    11ee:	4640      	mov	r0, r8
    11f0:	f44f 73b4 	mov.w	r3, #360	; 0x168
    11f4:	463a      	mov	r2, r7
    11f6:	f005 fb8a 	bl	690e <printk>
    11fa:	f44f 71b4 	mov.w	r1, #360	; 0x168
    11fe:	4638      	mov	r0, r7
    1200:	f005 faac 	bl	675c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1204:	8ba3      	ldrh	r3, [r4, #28]
    1206:	f023 0307 	bic.w	r3, r3, #7
    120a:	f043 0305 	orr.w	r3, r3, #5
    120e:	e791      	b.n	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
			__ASSERT_NO_MSG(false);
    1210:	490c      	ldr	r1, [pc, #48]	; (1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>)
    1212:	f240 136b 	movw	r3, #363	; 0x16b
    1216:	463a      	mov	r2, r7
    1218:	4640      	mov	r0, r8
    121a:	f005 fb78 	bl	690e <printk>
    121e:	2500      	movs	r5, #0
    1220:	f240 116b 	movw	r1, #363	; 0x16b
    1224:	4638      	mov	r0, r7
    1226:	f005 fa99 	bl	675c <assert_post_action>
		onoff_transition_fn transit = NULL;
    122a:	9501      	str	r5, [sp, #4]
    122c:	e784      	b.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    122e:	bf00      	nop
    1230:	000077fd 	.word	0x000077fd
    1234:	00007823 	.word	0x00007823
    1238:	00007610 	.word	0x00007610
    123c:	0000783a 	.word	0x0000783a
    1240:	0000775a 	.word	0x0000775a
    1244:	00007f38 	.word	0x00007f38
    1248:	0000777c 	.word	0x0000777c
    124c:	00007788 	.word	0x00007788
    1250:	000077ab 	.word	0x000077ab
    1254:	000077c2 	.word	0x000077c2
    1258:	000077d8 	.word	0x000077d8
    125c:	000077e7 	.word	0x000077e7
				   && !sys_slist_is_empty(&mgr->monitors);
    1260:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1264:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1268:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    126c:	83a3      	strh	r3, [r4, #28]
    126e:	4650      	mov	r0, sl
    1270:	f004 fd30 	bl	5cd4 <z_spin_unlock_valid>
    1274:	b968      	cbnz	r0, 1292 <CONFIG_FPROTECT_BLOCK_SIZE+0x292>
    1276:	4a3a      	ldr	r2, [pc, #232]	; (1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>)
    1278:	493a      	ldr	r1, [pc, #232]	; (1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>)
    127a:	23ac      	movs	r3, #172	; 0xac
    127c:	4640      	mov	r0, r8
    127e:	f005 fb46 	bl	690e <printk>
    1282:	4839      	ldr	r0, [pc, #228]	; (1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>)
    1284:	4651      	mov	r1, sl
    1286:	f005 fb42 	bl	690e <printk>
    128a:	4835      	ldr	r0, [pc, #212]	; (1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>)
    128c:	21ac      	movs	r1, #172	; 0xac
    128e:	f005 fa65 	bl	675c <assert_post_action>
    1292:	9b03      	ldr	r3, [sp, #12]
    1294:	f383 8811 	msr	BASEPRI, r3
    1298:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    129c:	f1b9 0f00 	cmp.w	r9, #0
    12a0:	d138      	bne.n	1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>
	while (!sys_slist_is_empty(list)) {
    12a2:	2d00      	cmp	r5, #0
    12a4:	d14b      	bne.n	133e <CONFIG_FPROTECT_BLOCK_SIZE+0x33e>
			if (transit != NULL) {
    12a6:	9b01      	ldr	r3, [sp, #4]
    12a8:	b113      	cbz	r3, 12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>
				transit(mgr, transition_complete);
    12aa:	4930      	ldr	r1, [pc, #192]	; (136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>)
    12ac:	4620      	mov	r0, r4
    12ae:	4798      	blx	r3
	__asm__ volatile(
    12b0:	f04f 0320 	mov.w	r3, #32
    12b4:	f3ef 8b11 	mrs	fp, BASEPRI
    12b8:	f383 8812 	msr	BASEPRI_MAX, r3
    12bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    12c0:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    12c2:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    12c6:	f004 fcf7 	bl	5cb8 <z_spin_lock_valid>
    12ca:	b968      	cbnz	r0, 12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
    12cc:	4a24      	ldr	r2, [pc, #144]	; (1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>)
    12ce:	4928      	ldr	r1, [pc, #160]	; (1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>)
    12d0:	2381      	movs	r3, #129	; 0x81
    12d2:	4640      	mov	r0, r8
    12d4:	f005 fb1b 	bl	690e <printk>
    12d8:	4826      	ldr	r0, [pc, #152]	; (1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>)
    12da:	4651      	mov	r1, sl
    12dc:	f005 fb17 	bl	690e <printk>
    12e0:	481f      	ldr	r0, [pc, #124]	; (1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>)
    12e2:	2181      	movs	r1, #129	; 0x81
    12e4:	f005 fa3a 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    12e8:	4650      	mov	r0, sl
    12ea:	f004 fd03 	bl	5cf4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    12ee:	8ba3      	ldrh	r3, [r4, #28]
    12f0:	f023 0308 	bic.w	r3, r3, #8
    12f4:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    12f6:	8ba3      	ldrh	r3, [r4, #28]
    12f8:	06da      	lsls	r2, r3, #27
    12fa:	d528      	bpl.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    12fc:	f023 0310 	bic.w	r3, r3, #16
    1300:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    1302:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1304:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    1308:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    130c:	2900      	cmp	r1, #0
    130e:	f47f ae6b 	bne.w	fe8 <process_event+0x64>
out:
    1312:	e649      	b.n	fa8 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1314:	68a1      	ldr	r1, [r4, #8]
    1316:	2900      	cmp	r1, #0
    1318:	d0c3      	beq.n	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
	return node->next;
    131a:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    131c:	9a02      	ldr	r2, [sp, #8]
    131e:	2b00      	cmp	r3, #0
    1320:	bf38      	it	cc
    1322:	2300      	movcc	r3, #0
    1324:	4699      	mov	r9, r3
    1326:	684b      	ldr	r3, [r1, #4]
    1328:	4620      	mov	r0, r4
    132a:	461e      	mov	r6, r3
    132c:	465b      	mov	r3, fp
    132e:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1330:	f1b9 0f00 	cmp.w	r9, #0
    1334:	d0b5      	beq.n	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
    1336:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    133a:	4649      	mov	r1, r9
    133c:	e7ee      	b.n	131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    133e:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1340:	9a02      	ldr	r2, [sp, #8]
    1342:	682d      	ldr	r5, [r5, #0]
    1344:	465b      	mov	r3, fp
    1346:	4620      	mov	r0, r4
    1348:	f005 faa2 	bl	6890 <notify_one>
    134c:	e7a9      	b.n	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    134e:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1352:	bf1e      	ittt	ne
    1354:	f023 0320 	bicne.w	r3, r3, #32
    1358:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    135a:	2102      	movne	r1, #2
    135c:	e7d2      	b.n	1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>
    135e:	bf00      	nop
    1360:	000077fd 	.word	0x000077fd
    1364:	00007823 	.word	0x00007823
    1368:	0000783a 	.word	0x0000783a
    136c:	00001379 	.word	0x00001379
    1370:	0000784f 	.word	0x0000784f
    1374:	00007864 	.word	0x00007864

00001378 <transition_complete>:
{
    1378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    137a:	4604      	mov	r4, r0
    137c:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    137e:	f100 0614 	add.w	r6, r0, #20
    1382:	f04f 0320 	mov.w	r3, #32
    1386:	f3ef 8711 	mrs	r7, BASEPRI
    138a:	f383 8812 	msr	BASEPRI_MAX, r3
    138e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1392:	4630      	mov	r0, r6
    1394:	f004 fc90 	bl	5cb8 <z_spin_lock_valid>
    1398:	b968      	cbnz	r0, 13b6 <transition_complete+0x3e>
    139a:	4a0c      	ldr	r2, [pc, #48]	; (13cc <transition_complete+0x54>)
    139c:	490c      	ldr	r1, [pc, #48]	; (13d0 <transition_complete+0x58>)
    139e:	480d      	ldr	r0, [pc, #52]	; (13d4 <transition_complete+0x5c>)
    13a0:	2381      	movs	r3, #129	; 0x81
    13a2:	f005 fab4 	bl	690e <printk>
    13a6:	480c      	ldr	r0, [pc, #48]	; (13d8 <transition_complete+0x60>)
    13a8:	4631      	mov	r1, r6
    13aa:	f005 fab0 	bl	690e <printk>
    13ae:	4807      	ldr	r0, [pc, #28]	; (13cc <transition_complete+0x54>)
    13b0:	2181      	movs	r1, #129	; 0x81
    13b2:	f005 f9d3 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    13b6:	4630      	mov	r0, r6
    13b8:	f004 fc9c 	bl	5cf4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    13bc:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    13be:	463a      	mov	r2, r7
    13c0:	4620      	mov	r0, r4
    13c2:	2101      	movs	r1, #1
}
    13c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    13c8:	f7ff bddc 	b.w	f84 <process_event>
    13cc:	000077fd 	.word	0x000077fd
    13d0:	0000784f 	.word	0x0000784f
    13d4:	00007610 	.word	0x00007610
    13d8:	00007864 	.word	0x00007864

000013dc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    13dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    13e0:	4604      	mov	r4, r0
    13e2:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    13e4:	f005 fa6a 	bl	68bc <validate_args>

	if (rv < 0) {
    13e8:	1e05      	subs	r5, r0, #0
    13ea:	db5e      	blt.n	14aa <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    13ec:	f104 0914 	add.w	r9, r4, #20
    13f0:	f04f 0320 	mov.w	r3, #32
    13f4:	f3ef 8a11 	mrs	sl, BASEPRI
    13f8:	f383 8812 	msr	BASEPRI_MAX, r3
    13fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1400:	4648      	mov	r0, r9
    1402:	f004 fc59 	bl	5cb8 <z_spin_lock_valid>
    1406:	b968      	cbnz	r0, 1424 <onoff_request+0x48>
    1408:	4a38      	ldr	r2, [pc, #224]	; (14ec <onoff_request+0x110>)
    140a:	4939      	ldr	r1, [pc, #228]	; (14f0 <onoff_request+0x114>)
    140c:	4839      	ldr	r0, [pc, #228]	; (14f4 <onoff_request+0x118>)
    140e:	2381      	movs	r3, #129	; 0x81
    1410:	f005 fa7d 	bl	690e <printk>
    1414:	4838      	ldr	r0, [pc, #224]	; (14f8 <onoff_request+0x11c>)
    1416:	4649      	mov	r1, r9
    1418:	f005 fa79 	bl	690e <printk>
    141c:	4833      	ldr	r0, [pc, #204]	; (14ec <onoff_request+0x110>)
    141e:	2181      	movs	r1, #129	; 0x81
    1420:	f005 f99c 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    1424:	4648      	mov	r0, r9
    1426:	f004 fc65 	bl	5cf4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    142a:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    142c:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    142e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1432:	428b      	cmp	r3, r1
    1434:	f002 0607 	and.w	r6, r2, #7
    1438:	d050      	beq.n	14dc <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    143a:	2e02      	cmp	r6, #2
    143c:	d124      	bne.n	1488 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    143e:	3301      	adds	r3, #1
    1440:	83e3      	strh	r3, [r4, #30]
	rv = state;
    1442:	4635      	mov	r5, r6
		notify = true;
    1444:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1448:	4648      	mov	r0, r9
    144a:	f004 fc43 	bl	5cd4 <z_spin_unlock_valid>
    144e:	b968      	cbnz	r0, 146c <onoff_request+0x90>
    1450:	4a26      	ldr	r2, [pc, #152]	; (14ec <onoff_request+0x110>)
    1452:	492a      	ldr	r1, [pc, #168]	; (14fc <onoff_request+0x120>)
    1454:	4827      	ldr	r0, [pc, #156]	; (14f4 <onoff_request+0x118>)
    1456:	23ac      	movs	r3, #172	; 0xac
    1458:	f005 fa59 	bl	690e <printk>
    145c:	4828      	ldr	r0, [pc, #160]	; (1500 <onoff_request+0x124>)
    145e:	4649      	mov	r1, r9
    1460:	f005 fa55 	bl	690e <printk>
    1464:	4821      	ldr	r0, [pc, #132]	; (14ec <onoff_request+0x110>)
    1466:	21ac      	movs	r1, #172	; 0xac
    1468:	f005 f978 	bl	675c <assert_post_action>
	__asm__ volatile(
    146c:	f38a 8811 	msr	BASEPRI, sl
    1470:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1474:	f1b8 0f00 	cmp.w	r8, #0
    1478:	d017      	beq.n	14aa <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    147a:	2300      	movs	r3, #0
    147c:	4632      	mov	r2, r6
    147e:	4639      	mov	r1, r7
    1480:	4620      	mov	r0, r4
    1482:	f005 fa05 	bl	6890 <notify_one>
    1486:	e010      	b.n	14aa <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    1488:	0793      	lsls	r3, r2, #30
    148a:	d001      	beq.n	1490 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    148c:	2e06      	cmp	r6, #6
    148e:	d10f      	bne.n	14b0 <onoff_request+0xd4>
	parent->next = child;
    1490:	2300      	movs	r3, #0
    1492:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    1494:	6863      	ldr	r3, [r4, #4]
    1496:	b9f3      	cbnz	r3, 14d6 <onoff_request+0xfa>
	list->head = node;
    1498:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    149c:	4635      	mov	r5, r6
    149e:	b9fe      	cbnz	r6, 14e0 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    14a0:	4652      	mov	r2, sl
    14a2:	2102      	movs	r1, #2
    14a4:	4620      	mov	r0, r4
    14a6:	f7ff fd6d 	bl	f84 <process_event>
		}
	}

	return rv;
}
    14aa:	4628      	mov	r0, r5
    14ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    14b0:	2e05      	cmp	r6, #5
    14b2:	d018      	beq.n	14e6 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    14b4:	2e01      	cmp	r6, #1
    14b6:	d00b      	beq.n	14d0 <onoff_request+0xf4>
    14b8:	4912      	ldr	r1, [pc, #72]	; (1504 <onoff_request+0x128>)
    14ba:	480e      	ldr	r0, [pc, #56]	; (14f4 <onoff_request+0x118>)
    14bc:	4a12      	ldr	r2, [pc, #72]	; (1508 <onoff_request+0x12c>)
    14be:	f240 13c9 	movw	r3, #457	; 0x1c9
    14c2:	f005 fa24 	bl	690e <printk>
    14c6:	4810      	ldr	r0, [pc, #64]	; (1508 <onoff_request+0x12c>)
    14c8:	f240 11c9 	movw	r1, #457	; 0x1c9
    14cc:	f005 f946 	bl	675c <assert_post_action>
		rv = -EIO;
    14d0:	f06f 0504 	mvn.w	r5, #4
    14d4:	e004      	b.n	14e0 <onoff_request+0x104>
	parent->next = child;
    14d6:	601f      	str	r7, [r3, #0]
	list->tail = node;
    14d8:	6067      	str	r7, [r4, #4]
}
    14da:	e7df      	b.n	149c <onoff_request+0xc0>
		rv = -EAGAIN;
    14dc:	f06f 050a 	mvn.w	r5, #10
    14e0:	f04f 0800 	mov.w	r8, #0
    14e4:	e7b0      	b.n	1448 <onoff_request+0x6c>
		rv = -ENOTSUP;
    14e6:	f06f 0585 	mvn.w	r5, #133	; 0x85
    14ea:	e7f9      	b.n	14e0 <onoff_request+0x104>
    14ec:	000077fd 	.word	0x000077fd
    14f0:	0000784f 	.word	0x0000784f
    14f4:	00007610 	.word	0x00007610
    14f8:	00007864 	.word	0x00007864
    14fc:	00007823 	.word	0x00007823
    1500:	0000783a 	.word	0x0000783a
    1504:	000077e7 	.word	0x000077e7
    1508:	0000775a 	.word	0x0000775a

0000150c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    150e:	4605      	mov	r5, r0
	__asm__ volatile(
    1510:	f04f 0320 	mov.w	r3, #32
    1514:	f3ef 8611 	mrs	r6, BASEPRI
    1518:	f383 8812 	msr	BASEPRI_MAX, r3
    151c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1520:	481e      	ldr	r0, [pc, #120]	; (159c <pm_state_notify+0x90>)
    1522:	f004 fbc9 	bl	5cb8 <z_spin_lock_valid>
    1526:	b968      	cbnz	r0, 1544 <pm_state_notify+0x38>
    1528:	4a1d      	ldr	r2, [pc, #116]	; (15a0 <pm_state_notify+0x94>)
    152a:	491e      	ldr	r1, [pc, #120]	; (15a4 <pm_state_notify+0x98>)
    152c:	481e      	ldr	r0, [pc, #120]	; (15a8 <pm_state_notify+0x9c>)
    152e:	2381      	movs	r3, #129	; 0x81
    1530:	f005 f9ed 	bl	690e <printk>
    1534:	4919      	ldr	r1, [pc, #100]	; (159c <pm_state_notify+0x90>)
    1536:	481d      	ldr	r0, [pc, #116]	; (15ac <pm_state_notify+0xa0>)
    1538:	f005 f9e9 	bl	690e <printk>
    153c:	4818      	ldr	r0, [pc, #96]	; (15a0 <pm_state_notify+0x94>)
    153e:	2181      	movs	r1, #129	; 0x81
    1540:	f005 f90c 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    1544:	4815      	ldr	r0, [pc, #84]	; (159c <pm_state_notify+0x90>)
    1546:	f004 fbd5 	bl	5cf4 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    154a:	4b19      	ldr	r3, [pc, #100]	; (15b0 <pm_state_notify+0xa4>)
    154c:	681c      	ldr	r4, [r3, #0]
    154e:	2c00      	cmp	r4, #0
    1550:	bf38      	it	cc
    1552:	2400      	movcc	r4, #0
    1554:	b15c      	cbz	r4, 156e <pm_state_notify+0x62>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    1556:	4f17      	ldr	r7, [pc, #92]	; (15b4 <pm_state_notify+0xa8>)
			callback = notifier->state_exit;
    1558:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    155c:	2d00      	cmp	r5, #0
    155e:	bf08      	it	eq
    1560:	4613      	moveq	r3, r2
		if (callback) {
    1562:	b10b      	cbz	r3, 1568 <pm_state_notify+0x5c>
			callback(z_power_state.state);
    1564:	7838      	ldrb	r0, [r7, #0]
    1566:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1568:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    156a:	2c00      	cmp	r4, #0
    156c:	d1f4      	bne.n	1558 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    156e:	480b      	ldr	r0, [pc, #44]	; (159c <pm_state_notify+0x90>)
    1570:	f004 fbb0 	bl	5cd4 <z_spin_unlock_valid>
    1574:	b968      	cbnz	r0, 1592 <pm_state_notify+0x86>
    1576:	4a0a      	ldr	r2, [pc, #40]	; (15a0 <pm_state_notify+0x94>)
    1578:	490f      	ldr	r1, [pc, #60]	; (15b8 <pm_state_notify+0xac>)
    157a:	480b      	ldr	r0, [pc, #44]	; (15a8 <pm_state_notify+0x9c>)
    157c:	23ac      	movs	r3, #172	; 0xac
    157e:	f005 f9c6 	bl	690e <printk>
    1582:	4906      	ldr	r1, [pc, #24]	; (159c <pm_state_notify+0x90>)
    1584:	480d      	ldr	r0, [pc, #52]	; (15bc <pm_state_notify+0xb0>)
    1586:	f005 f9c2 	bl	690e <printk>
    158a:	4805      	ldr	r0, [pc, #20]	; (15a0 <pm_state_notify+0x94>)
    158c:	21ac      	movs	r1, #172	; 0xac
    158e:	f005 f8e5 	bl	675c <assert_post_action>
	__asm__ volatile(
    1592:	f386 8811 	msr	BASEPRI, r6
    1596:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    159a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    159c:	20000788 	.word	0x20000788
    15a0:	000077fd 	.word	0x000077fd
    15a4:	0000784f 	.word	0x0000784f
    15a8:	00007610 	.word	0x00007610
    15ac:	00007864 	.word	0x00007864
    15b0:	2000078c 	.word	0x2000078c
    15b4:	20000794 	.word	0x20000794
    15b8:	00007823 	.word	0x00007823
    15bc:	0000783a 	.word	0x0000783a

000015c0 <pm_system_resume>:

void pm_system_resume(void)
{
    15c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    15c2:	4b0f      	ldr	r3, [pc, #60]	; (1600 <pm_system_resume+0x40>)
    15c4:	681a      	ldr	r2, [r3, #0]
    15c6:	b9ba      	cbnz	r2, 15f8 <pm_system_resume+0x38>
		post_ops_done = 1;
    15c8:	2201      	movs	r2, #1
    15ca:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    15cc:	4a0d      	ldr	r2, [pc, #52]	; (1604 <pm_system_resume+0x44>)
    15ce:	ca07      	ldmia	r2, {r0, r1, r2}
    15d0:	ab01      	add	r3, sp, #4
    15d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    15d6:	4a0c      	ldr	r2, [pc, #48]	; (1608 <pm_system_resume+0x48>)
    15d8:	b14a      	cbz	r2, 15ee <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    15da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    15de:	f005 fa0e 	bl	69fe <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    15e2:	2000      	movs	r0, #0
	}
}
    15e4:	b005      	add	sp, #20
    15e6:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    15ea:	f7ff bf8f 	b.w	150c <pm_state_notify>
    15ee:	f382 8811 	msr	BASEPRI, r2
    15f2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    15f6:	e7f4      	b.n	15e2 <pm_system_resume+0x22>
}
    15f8:	b005      	add	sp, #20
    15fa:	f85d fb04 	ldr.w	pc, [sp], #4
    15fe:	bf00      	nop
    1600:	20000020 	.word	0x20000020
    1604:	20000794 	.word	0x20000794
    1608:	000069ff 	.word	0x000069ff

0000160c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    160c:	b5f0      	push	{r4, r5, r6, r7, lr}
    160e:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    1610:	466e      	mov	r6, sp
    1612:	4601      	mov	r1, r0
{
    1614:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    1616:	4630      	mov	r0, r6
    1618:	f005 f972 	bl	6900 <pm_policy_next_state>
    161c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1620:	4c1f      	ldr	r4, [pc, #124]	; (16a0 <pm_system_suspend+0x94>)
    1622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    1626:	7820      	ldrb	r0, [r4, #0]
    1628:	2800      	cmp	r0, #0
    162a:	d037      	beq.n	169c <pm_system_suspend+0x90>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    162c:	4b1d      	ldr	r3, [pc, #116]	; (16a4 <pm_system_suspend+0x98>)
    162e:	2000      	movs	r0, #0
    1630:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    1632:	1c6b      	adds	r3, r5, #1
    1634:	d01d      	beq.n	1672 <pm_system_suspend+0x66>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
    1636:	4291      	cmp	r1, r2
    1638:	d20c      	bcs.n	1654 <pm_system_suspend+0x48>
    163a:	491b      	ldr	r1, [pc, #108]	; (16a8 <pm_system_suspend+0x9c>)
    163c:	4a1b      	ldr	r2, [pc, #108]	; (16ac <pm_system_suspend+0xa0>)
    163e:	481c      	ldr	r0, [pc, #112]	; (16b0 <pm_system_suspend+0xa4>)
    1640:	23ca      	movs	r3, #202	; 0xca
    1642:	f005 f964 	bl	690e <printk>
    1646:	481b      	ldr	r0, [pc, #108]	; (16b4 <pm_system_suspend+0xa8>)
    1648:	f005 f961 	bl	690e <printk>
    164c:	4817      	ldr	r0, [pc, #92]	; (16ac <pm_system_suspend+0xa0>)
    164e:	21ca      	movs	r1, #202	; 0xca
    1650:	f005 f884 	bl	675c <assert_post_action>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1654:	68a7      	ldr	r7, [r4, #8]
    1656:	4818      	ldr	r0, [pc, #96]	; (16b8 <pm_system_suspend+0xac>)
    1658:	4a18      	ldr	r2, [pc, #96]	; (16bc <pm_system_suspend+0xb0>)
    165a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    165e:	2100      	movs	r1, #0
    1660:	2300      	movs	r3, #0
    1662:	fbe6 0107 	umlal	r0, r1, r6, r7
    1666:	f7fe fd4b 	bl	100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    166a:	2101      	movs	r1, #1
    166c:	1a28      	subs	r0, r5, r0
    166e:	f004 fd03 	bl	6078 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1672:	f003 f951 	bl	4918 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    1676:	2001      	movs	r0, #1
    1678:	f7ff ff48 	bl	150c <pm_state_notify>
	pm_state_set(z_power_state);
    167c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1680:	ab05      	add	r3, sp, #20
    1682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1686:	4a0e      	ldr	r2, [pc, #56]	; (16c0 <pm_system_suspend+0xb4>)
    1688:	b11a      	cbz	r2, 1692 <pm_system_suspend+0x86>
		pm_power_state_set(info);
    168a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    168e:	f005 f9a3 	bl	69d8 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    1692:	f7ff ff95 	bl	15c0 <pm_system_resume>
	k_sched_unlock();
    1696:	f003 fe37 	bl	5308 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    169a:	7820      	ldrb	r0, [r4, #0]
}
    169c:	b009      	add	sp, #36	; 0x24
    169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16a0:	20000794 	.word	0x20000794
    16a4:	20000020 	.word	0x20000020
    16a8:	000078f2 	.word	0x000078f2
    16ac:	0000787c 	.word	0x0000787c
    16b0:	00007610 	.word	0x00007610
    16b4:	00007932 	.word	0x00007932
    16b8:	000f423f 	.word	0x000f423f
    16bc:	000f4240 	.word	0x000f4240
    16c0:	000069d9 	.word	0x000069d9

000016c4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    16c4:	680b      	ldr	r3, [r1, #0]
    16c6:	3301      	adds	r3, #1
    16c8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    16ca:	4b01      	ldr	r3, [pc, #4]	; (16d0 <char_out+0xc>)
    16cc:	681b      	ldr	r3, [r3, #0]
    16ce:	4718      	bx	r3
    16d0:	20000024 	.word	0x20000024

000016d4 <__printk_hook_install>:
	_char_out = fn;
    16d4:	4b01      	ldr	r3, [pc, #4]	; (16dc <__printk_hook_install+0x8>)
    16d6:	6018      	str	r0, [r3, #0]
}
    16d8:	4770      	bx	lr
    16da:	bf00      	nop
    16dc:	20000024 	.word	0x20000024

000016e0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    16e0:	b507      	push	{r0, r1, r2, lr}
    16e2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    16e4:	2100      	movs	r1, #0
{
    16e6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    16e8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    16ea:	4803      	ldr	r0, [pc, #12]	; (16f8 <vprintk+0x18>)
    16ec:	a901      	add	r1, sp, #4
    16ee:	f7fe ff9f 	bl	630 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    16f2:	b003      	add	sp, #12
    16f4:	f85d fb04 	ldr.w	pc, [sp], #4
    16f8:	000016c5 	.word	0x000016c5

000016fc <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    16fc:	b508      	push	{r3, lr}
    16fe:	4604      	mov	r4, r0
	__asm__ volatile(
    1700:	f04f 0220 	mov.w	r2, #32
    1704:	f3ef 8311 	mrs	r3, BASEPRI
    1708:	f382 8812 	msr	BASEPRI_MAX, r2
    170c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    1710:	f005 fbde 	bl	6ed0 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1714:	4620      	mov	r0, r4
    1716:	f000 fc87 	bl	2028 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    171a:	4803      	ldr	r0, [pc, #12]	; (1728 <sys_reboot+0x2c>)
    171c:	f005 f8f7 	bl	690e <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1720:	f000 f80a 	bl	1738 <arch_cpu_idle>
    1724:	e7fc      	b.n	1720 <sys_reboot+0x24>
    1726:	bf00      	nop
    1728:	00007957 	.word	0x00007957

0000172c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    172c:	4901      	ldr	r1, [pc, #4]	; (1734 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    172e:	2210      	movs	r2, #16
	str	r2, [r1]
    1730:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1732:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1734:	e000ed10 	.word	0xe000ed10

00001738 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1738:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    173a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    173c:	f380 8811 	msr	BASEPRI, r0
	isb
    1740:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1744:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1748:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    174a:	b662      	cpsie	i
	isb
    174c:	f3bf 8f6f 	isb	sy

	bx	lr
    1750:	4770      	bx	lr
    1752:	bf00      	nop

00001754 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1754:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1756:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1758:	f381 8811 	msr	BASEPRI, r1

	wfe
    175c:	bf20      	wfe

	msr	BASEPRI, r0
    175e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1762:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1764:	4770      	bx	lr
    1766:	bf00      	nop

00001768 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1768:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    176a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    176c:	4a0b      	ldr	r2, [pc, #44]	; (179c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    176e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1770:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1772:	bf1e      	ittt	ne
	movne	r1, #0
    1774:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1776:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1778:	f005 fbf2 	blne	6f60 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    177c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    177e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1782:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1786:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    178a:	4905      	ldr	r1, [pc, #20]	; (17a0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    178c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    178e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1790:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1792:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1796:	4903      	ldr	r1, [pc, #12]	; (17a4 <_isr_wrapper+0x3c>)
	bx r1
    1798:	4708      	bx	r1
    179a:	0000      	.short	0x0000
	ldr r2, =_kernel
    179c:	20000994 	.word	0x20000994
	ldr r1, =_sw_isr_table
    17a0:	00007130 	.word	0x00007130
	ldr r1, =z_arm_int_exit
    17a4:	000019cd 	.word	0x000019cd

000017a8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    17a8:	bf30      	wfi
    b z_SysNmiOnReset
    17aa:	f7ff bffd 	b.w	17a8 <z_SysNmiOnReset>
    17ae:	bf00      	nop

000017b0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    17b0:	4912      	ldr	r1, [pc, #72]	; (17fc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    17b2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    17b4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    17b8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    17ba:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    17be:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    17c2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    17c4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    17c8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    17cc:	4f0c      	ldr	r7, [pc, #48]	; (1800 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    17ce:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    17d2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    17d4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    17d6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    17d8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    17da:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    17dc:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    17de:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    17e2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    17e4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    17e6:	f000 fae7 	bl	1db8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    17ea:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    17ee:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    17f2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    17f6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    17fa:	4770      	bx	lr
    ldr r1, =_kernel
    17fc:	20000994 	.word	0x20000994
    ldr v4, =_SCS_ICSR
    1800:	e000ed04 	.word	0xe000ed04

00001804 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1804:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1808:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    180a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    180e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1812:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1814:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1818:	2902      	cmp	r1, #2
    beq _oops
    181a:	d0ff      	beq.n	181c <_oops>

0000181c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    181c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    181e:	f005 f88f 	bl	6940 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1822:	bd01      	pop	{r0, pc}

00001824 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1824:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1826:	2b00      	cmp	r3, #0
    1828:	db08      	blt.n	183c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    182a:	2201      	movs	r2, #1
    182c:	f000 001f 	and.w	r0, r0, #31
    1830:	fa02 f000 	lsl.w	r0, r2, r0
    1834:	095b      	lsrs	r3, r3, #5
    1836:	4a02      	ldr	r2, [pc, #8]	; (1840 <arch_irq_enable+0x1c>)
    1838:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    183c:	4770      	bx	lr
    183e:	bf00      	nop
    1840:	e000e100 	.word	0xe000e100

00001844 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1844:	4b05      	ldr	r3, [pc, #20]	; (185c <arch_irq_is_enabled+0x18>)
    1846:	0942      	lsrs	r2, r0, #5
    1848:	f000 001f 	and.w	r0, r0, #31
    184c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1850:	2301      	movs	r3, #1
    1852:	fa03 f000 	lsl.w	r0, r3, r0
}
    1856:	4010      	ands	r0, r2
    1858:	4770      	bx	lr
    185a:	bf00      	nop
    185c:	e000e100 	.word	0xe000e100

00001860 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1860:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1862:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1864:	2c07      	cmp	r4, #7
{
    1866:	4605      	mov	r5, r0
    1868:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    186a:	d90f      	bls.n	188c <z_arm_irq_priority_set+0x2c>
    186c:	4a11      	ldr	r2, [pc, #68]	; (18b4 <z_arm_irq_priority_set+0x54>)
    186e:	4912      	ldr	r1, [pc, #72]	; (18b8 <z_arm_irq_priority_set+0x58>)
    1870:	4812      	ldr	r0, [pc, #72]	; (18bc <z_arm_irq_priority_set+0x5c>)
    1872:	2358      	movs	r3, #88	; 0x58
    1874:	f005 f84b 	bl	690e <printk>
    1878:	4811      	ldr	r0, [pc, #68]	; (18c0 <z_arm_irq_priority_set+0x60>)
    187a:	4631      	mov	r1, r6
    187c:	2307      	movs	r3, #7
    187e:	462a      	mov	r2, r5
    1880:	f005 f845 	bl	690e <printk>
    1884:	480b      	ldr	r0, [pc, #44]	; (18b4 <z_arm_irq_priority_set+0x54>)
    1886:	2158      	movs	r1, #88	; 0x58
    1888:	f004 ff68 	bl	675c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    188c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    188e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1890:	bfac      	ite	ge
    1892:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1896:	4b0b      	ldrlt	r3, [pc, #44]	; (18c4 <z_arm_irq_priority_set+0x64>)
    1898:	ea4f 1444 	mov.w	r4, r4, lsl #5
    189c:	bfb8      	it	lt
    189e:	f005 050f 	andlt.w	r5, r5, #15
    18a2:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18a4:	bfaa      	itet	ge
    18a6:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18aa:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18ac:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    18b0:	bd70      	pop	{r4, r5, r6, pc}
    18b2:	bf00      	nop
    18b4:	00007980 	.word	0x00007980
    18b8:	000079b6 	.word	0x000079b6
    18bc:	00007610 	.word	0x00007610
    18c0:	000079d1 	.word	0x000079d1
    18c4:	e000ed14 	.word	0xe000ed14

000018c8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    18c8:	4a0b      	ldr	r2, [pc, #44]	; (18f8 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    18ca:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    18cc:	4b0b      	ldr	r3, [pc, #44]	; (18fc <z_arm_prep_c+0x34>)
    18ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    18d2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    18d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18d8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    18dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    18e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    18e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    18e8:	f002 fc06 	bl	40f8 <z_bss_zero>
	z_data_copy();
    18ec:	f004 fd30 	bl	6350 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    18f0:	f000 f9f6 	bl	1ce0 <z_arm_interrupt_init>
	z_cstart();
    18f4:	f002 fc0a 	bl	410c <z_cstart>
    18f8:	00000000 	.word	0x00000000
    18fc:	e000ed00 	.word	0xe000ed00

00001900 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1900:	4a09      	ldr	r2, [pc, #36]	; (1928 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1902:	490a      	ldr	r1, [pc, #40]	; (192c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1904:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1906:	6809      	ldr	r1, [r1, #0]
    1908:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    190a:	4909      	ldr	r1, [pc, #36]	; (1930 <arch_swap+0x30>)
	_current->arch.basepri = key;
    190c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    190e:	684b      	ldr	r3, [r1, #4]
    1910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1914:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1916:	2300      	movs	r3, #0
    1918:	f383 8811 	msr	BASEPRI, r3
    191c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1920:	6893      	ldr	r3, [r2, #8]
}
    1922:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1924:	4770      	bx	lr
    1926:	bf00      	nop
    1928:	20000994 	.word	0x20000994
    192c:	0000744c 	.word	0x0000744c
    1930:	e000ed00 	.word	0xe000ed00

00001934 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1934:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1938:	9b00      	ldr	r3, [sp, #0]
    193a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    193e:	490a      	ldr	r1, [pc, #40]	; (1968 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1940:	9b01      	ldr	r3, [sp, #4]
    1942:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1946:	9b02      	ldr	r3, [sp, #8]
    1948:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    194c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1950:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1954:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1958:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    195c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    195e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1960:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1962:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1964:	4770      	bx	lr
    1966:	bf00      	nop
    1968:	00006929 	.word	0x00006929

0000196c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    196c:	4a0b      	ldr	r2, [pc, #44]	; (199c <z_check_thread_stack_fail+0x30>)
{
    196e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1970:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1972:	b190      	cbz	r0, 199a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1974:	f113 0f16 	cmn.w	r3, #22
    1978:	6e40      	ldr	r0, [r0, #100]	; 0x64
    197a:	d005      	beq.n	1988 <z_check_thread_stack_fail+0x1c>
    197c:	f1a0 0220 	sub.w	r2, r0, #32
    1980:	429a      	cmp	r2, r3
    1982:	d806      	bhi.n	1992 <z_check_thread_stack_fail+0x26>
    1984:	4283      	cmp	r3, r0
    1986:	d204      	bcs.n	1992 <z_check_thread_stack_fail+0x26>
    1988:	4281      	cmp	r1, r0
    198a:	bf2c      	ite	cs
    198c:	2100      	movcs	r1, #0
    198e:	2101      	movcc	r1, #1
    1990:	e000      	b.n	1994 <z_check_thread_stack_fail+0x28>
    1992:	2100      	movs	r1, #0
    1994:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1996:	bf08      	it	eq
    1998:	2000      	moveq	r0, #0
}
    199a:	4770      	bx	lr
    199c:	20000994 	.word	0x20000994

000019a0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    19a0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    19a2:	4b09      	ldr	r3, [pc, #36]	; (19c8 <arch_switch_to_main_thread+0x28>)
    19a4:	6098      	str	r0, [r3, #8]
{
    19a6:	460d      	mov	r5, r1
    19a8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    19aa:	f000 fa05 	bl	1db8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    19ae:	4620      	mov	r0, r4
    19b0:	f385 8809 	msr	PSP, r5
    19b4:	2100      	movs	r1, #0
    19b6:	b663      	cpsie	if
    19b8:	f381 8811 	msr	BASEPRI, r1
    19bc:	f3bf 8f6f 	isb	sy
    19c0:	2200      	movs	r2, #0
    19c2:	2300      	movs	r3, #0
    19c4:	f004 ffb0 	bl	6928 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    19c8:	20000994 	.word	0x20000994

000019cc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    19cc:	4b04      	ldr	r3, [pc, #16]	; (19e0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    19ce:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    19d0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    19d2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    19d4:	d003      	beq.n	19de <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    19d6:	4903      	ldr	r1, [pc, #12]	; (19e4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    19d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    19dc:	600a      	str	r2, [r1, #0]

000019de <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    19de:	4770      	bx	lr
	ldr r3, =_kernel
    19e0:	20000994 	.word	0x20000994
	ldr r1, =_SCS_ICSR
    19e4:	e000ed04 	.word	0xe000ed04

000019e8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    19e8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    19ec:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    19f0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    19f2:	4672      	mov	r2, lr
	bl z_arm_fault
    19f4:	f000 f8ae 	bl	1b54 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    19f8:	bd01      	pop	{r0, pc}
    19fa:	bf00      	nop

000019fc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    19fc:	2000      	movs	r0, #0
    msr CONTROL, r0
    19fe:	f380 8814 	msr	CONTROL, r0
    isb
    1a02:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1a06:	f005 fb05 	bl	7014 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1a0a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1a0c:	490d      	ldr	r1, [pc, #52]	; (1a44 <__start+0x48>)
    str r0, [r1]
    1a0e:	6008      	str	r0, [r1, #0]
    dsb
    1a10:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a14:	480c      	ldr	r0, [pc, #48]	; (1a48 <__start+0x4c>)
    msr msp, r0
    1a16:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1a1a:	f000 f97d 	bl	1d18 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a1e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1a20:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1a24:	4809      	ldr	r0, [pc, #36]	; (1a4c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1a26:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1a2a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1a2c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1a30:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1a34:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1a36:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1a38:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1a3c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1a40:	f7ff ff42 	bl	18c8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1a44:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a48:	200013e0 	.word	0x200013e0
    ldr r0, =z_interrupt_stacks
    1a4c:	20001560 	.word	0x20001560

00001a50 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1a50:	4b23      	ldr	r3, [pc, #140]	; (1ae0 <mem_manage_fault+0x90>)
{
    1a52:	b570      	push	{r4, r5, r6, lr}
    1a54:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1a5c:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1a5e:	0790      	lsls	r0, r2, #30
    1a60:	d51a      	bpl.n	1a98 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1a62:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a66:	0612      	lsls	r2, r2, #24
    1a68:	d516      	bpl.n	1a98 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1a6a:	b119      	cbz	r1, 1a74 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1a72:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1a76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a7a:	06d6      	lsls	r6, r2, #27
    1a7c:	d40f      	bmi.n	1a9e <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1a80:	0799      	lsls	r1, r3, #30
    1a82:	d40c      	bmi.n	1a9e <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1a84:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1a86:	4a16      	ldr	r2, [pc, #88]	; (1ae0 <mem_manage_fault+0x90>)
    1a88:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a8a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1a8e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1a90:	2300      	movs	r3, #0
    1a92:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1a94:	4620      	mov	r0, r4
    1a96:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1a98:	f06f 0015 	mvn.w	r0, #21
    1a9c:	e7ea      	b.n	1a74 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1a9e:	4e10      	ldr	r6, [pc, #64]	; (1ae0 <mem_manage_fault+0x90>)
    1aa0:	6873      	ldr	r3, [r6, #4]
    1aa2:	051a      	lsls	r2, r3, #20
    1aa4:	d5ee      	bpl.n	1a84 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1aa6:	4621      	mov	r1, r4
    1aa8:	f7ff ff60 	bl	196c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1aac:	4604      	mov	r4, r0
    1aae:	b118      	cbz	r0, 1ab8 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1ab0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1ab4:	2402      	movs	r4, #2
    1ab6:	e7e6      	b.n	1a86 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1ab8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1aba:	06db      	lsls	r3, r3, #27
    1abc:	d5e2      	bpl.n	1a84 <mem_manage_fault+0x34>
    1abe:	4a09      	ldr	r2, [pc, #36]	; (1ae4 <mem_manage_fault+0x94>)
    1ac0:	4909      	ldr	r1, [pc, #36]	; (1ae8 <mem_manage_fault+0x98>)
    1ac2:	480a      	ldr	r0, [pc, #40]	; (1aec <mem_manage_fault+0x9c>)
    1ac4:	f240 1349 	movw	r3, #329	; 0x149
    1ac8:	f004 ff21 	bl	690e <printk>
    1acc:	4808      	ldr	r0, [pc, #32]	; (1af0 <mem_manage_fault+0xa0>)
    1ace:	f004 ff1e 	bl	690e <printk>
    1ad2:	4804      	ldr	r0, [pc, #16]	; (1ae4 <mem_manage_fault+0x94>)
    1ad4:	f240 1149 	movw	r1, #329	; 0x149
    1ad8:	f004 fe40 	bl	675c <assert_post_action>
    1adc:	e7d3      	b.n	1a86 <mem_manage_fault+0x36>
    1ade:	bf00      	nop
    1ae0:	e000ed00 	.word	0xe000ed00
    1ae4:	00007a11 	.word	0x00007a11
    1ae8:	00007a4b 	.word	0x00007a4b
    1aec:	00007610 	.word	0x00007610
    1af0:	00007a95 	.word	0x00007a95

00001af4 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1af4:	4b0d      	ldr	r3, [pc, #52]	; (1b2c <bus_fault.isra.0+0x38>)
    1af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1afc:	0592      	lsls	r2, r2, #22
    1afe:	d508      	bpl.n	1b12 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b04:	0412      	lsls	r2, r2, #16
    1b06:	d504      	bpl.n	1b12 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1b08:	b118      	cbz	r0, 1b12 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1b10:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1b12:	4b06      	ldr	r3, [pc, #24]	; (1b2c <bus_fault.isra.0+0x38>)
    1b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b18:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1b1a:	bf58      	it	pl
    1b1c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1b20:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1b22:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1b26:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1b28:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1b2a:	4770      	bx	lr
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1b30:	4b07      	ldr	r3, [pc, #28]	; (1b50 <usage_fault.isra.0+0x20>)
    1b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b40:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1b44:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1b48:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1b4a:	2000      	movs	r0, #0
    1b4c:	4770      	bx	lr
    1b4e:	bf00      	nop
    1b50:	e000ed00 	.word	0xe000ed00

00001b54 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1b54:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1b56:	4b54      	ldr	r3, [pc, #336]	; (1ca8 <z_arm_fault+0x154>)
    1b58:	685c      	ldr	r4, [r3, #4]
{
    1b5a:	b08a      	sub	sp, #40	; 0x28
    1b5c:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1b5e:	f3c4 0408 	ubfx	r4, r4, #0, #9
    1b62:	2600      	movs	r6, #0
    1b64:	f386 8811 	msr	BASEPRI, r6
    1b68:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1b6c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1b70:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1b74:	d108      	bne.n	1b88 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1b76:	f002 030c 	and.w	r3, r2, #12
    1b7a:	2b08      	cmp	r3, #8
    1b7c:	d004      	beq.n	1b88 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1b7e:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    1b80:	bf5c      	itt	pl
    1b82:	4605      	movpl	r5, r0
			*nested_exc = true;
    1b84:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1b86:	b97d      	cbnz	r5, 1ba8 <z_arm_fault+0x54>
    1b88:	4a48      	ldr	r2, [pc, #288]	; (1cac <z_arm_fault+0x158>)
    1b8a:	4949      	ldr	r1, [pc, #292]	; (1cb0 <z_arm_fault+0x15c>)
    1b8c:	4849      	ldr	r0, [pc, #292]	; (1cb4 <z_arm_fault+0x160>)
    1b8e:	f240 33f2 	movw	r3, #1010	; 0x3f2
    1b92:	f004 febc 	bl	690e <printk>
    1b96:	4848      	ldr	r0, [pc, #288]	; (1cb8 <z_arm_fault+0x164>)
    1b98:	f004 feb9 	bl	690e <printk>
    1b9c:	4843      	ldr	r0, [pc, #268]	; (1cac <z_arm_fault+0x158>)
    1b9e:	f240 31f2 	movw	r1, #1010	; 0x3f2
    1ba2:	f004 fddb 	bl	675c <assert_post_action>
    1ba6:	2500      	movs	r5, #0
	*recoverable = false;
    1ba8:	2300      	movs	r3, #0
    1baa:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1bae:	1ee3      	subs	r3, r4, #3
    1bb0:	2b03      	cmp	r3, #3
    1bb2:	d872      	bhi.n	1c9a <z_arm_fault+0x146>
    1bb4:	e8df f003 	tbb	[pc, r3]
    1bb8:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1bbc:	4b3a      	ldr	r3, [pc, #232]	; (1ca8 <z_arm_fault+0x154>)
    1bbe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1bc0:	f014 0402 	ands.w	r4, r4, #2
    1bc4:	d169      	bne.n	1c9a <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1bc8:	2a00      	cmp	r2, #0
    1bca:	db18      	blt.n	1bfe <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bce:	005b      	lsls	r3, r3, #1
    1bd0:	d54e      	bpl.n	1c70 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    1bd2:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1bd4:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1bd8:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1bdc:	429a      	cmp	r2, r3
    1bde:	d00d      	beq.n	1bfc <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    1be0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1be4:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1be8:	781b      	ldrb	r3, [r3, #0]
    1bea:	b30b      	cbz	r3, 1c30 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    1bec:	f10d 0207 	add.w	r2, sp, #7
    1bf0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1bf2:	4628      	mov	r0, r5
    1bf4:	f7ff ff2c 	bl	1a50 <mem_manage_fault>
		reason = usage_fault(esf);
    1bf8:	4604      	mov	r4, r0
		break;
    1bfa:	e000      	b.n	1bfe <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    1bfc:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1bfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1c02:	b99b      	cbnz	r3, 1c2c <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1c04:	2220      	movs	r2, #32
    1c06:	4629      	mov	r1, r5
    1c08:	a802      	add	r0, sp, #8
    1c0a:	f004 fed1 	bl	69b0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c10:	2e00      	cmp	r6, #0
    1c12:	d044      	beq.n	1c9e <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1c18:	b922      	cbnz	r2, 1c24 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1c1a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1c1e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c22:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1c24:	a902      	add	r1, sp, #8
    1c26:	4620      	mov	r0, r4
    1c28:	f004 fe88 	bl	693c <z_arm_fatal_error>
}
    1c2c:	b00a      	add	sp, #40	; 0x28
    1c2e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1c30:	4b22      	ldr	r3, [pc, #136]	; (1cbc <z_arm_fault+0x168>)
    1c32:	781b      	ldrb	r3, [r3, #0]
    1c34:	b12b      	cbz	r3, 1c42 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    1c36:	f10d 0107 	add.w	r1, sp, #7
    1c3a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1c3c:	f7ff ff5a 	bl	1af4 <bus_fault.isra.0>
    1c40:	e7da      	b.n	1bf8 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    1c42:	4b1f      	ldr	r3, [pc, #124]	; (1cc0 <z_arm_fault+0x16c>)
    1c44:	881b      	ldrh	r3, [r3, #0]
    1c46:	b29b      	uxth	r3, r3
    1c48:	b113      	cbz	r3, 1c50 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    1c4a:	f7ff ff71 	bl	1b30 <usage_fault.isra.0>
    1c4e:	e7d3      	b.n	1bf8 <z_arm_fault+0xa4>
			__ASSERT(0,
    1c50:	491c      	ldr	r1, [pc, #112]	; (1cc4 <z_arm_fault+0x170>)
    1c52:	4a16      	ldr	r2, [pc, #88]	; (1cac <z_arm_fault+0x158>)
    1c54:	4817      	ldr	r0, [pc, #92]	; (1cb4 <z_arm_fault+0x160>)
    1c56:	f240 23c3 	movw	r3, #707	; 0x2c3
    1c5a:	f004 fe58 	bl	690e <printk>
    1c5e:	481a      	ldr	r0, [pc, #104]	; (1cc8 <z_arm_fault+0x174>)
    1c60:	f004 fe55 	bl	690e <printk>
    1c64:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    1c68:	4810      	ldr	r0, [pc, #64]	; (1cac <z_arm_fault+0x158>)
    1c6a:	f004 fd77 	bl	675c <assert_post_action>
    1c6e:	e7c6      	b.n	1bfe <z_arm_fault+0xaa>
    1c70:	4914      	ldr	r1, [pc, #80]	; (1cc4 <z_arm_fault+0x170>)
    1c72:	4a0e      	ldr	r2, [pc, #56]	; (1cac <z_arm_fault+0x158>)
    1c74:	480f      	ldr	r0, [pc, #60]	; (1cb4 <z_arm_fault+0x160>)
    1c76:	f240 23c7 	movw	r3, #711	; 0x2c7
    1c7a:	f004 fe48 	bl	690e <printk>
    1c7e:	4813      	ldr	r0, [pc, #76]	; (1ccc <z_arm_fault+0x178>)
    1c80:	f004 fe45 	bl	690e <printk>
    1c84:	f240 21c7 	movw	r1, #711	; 0x2c7
    1c88:	e7ee      	b.n	1c68 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    1c8a:	f10d 0207 	add.w	r2, sp, #7
    1c8e:	2100      	movs	r1, #0
    1c90:	e7af      	b.n	1bf2 <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    1c92:	f10d 0107 	add.w	r1, sp, #7
    1c96:	2000      	movs	r0, #0
    1c98:	e7d0      	b.n	1c3c <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1c9a:	2400      	movs	r4, #0
    1c9c:	e7af      	b.n	1bfe <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c9e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1ca2:	f023 0301 	bic.w	r3, r3, #1
    1ca6:	e7bc      	b.n	1c22 <z_arm_fault+0xce>
    1ca8:	e000ed00 	.word	0xe000ed00
    1cac:	00007a11 	.word	0x00007a11
    1cb0:	00007ab8 	.word	0x00007ab8
    1cb4:	00007610 	.word	0x00007610
    1cb8:	00007acb 	.word	0x00007acb
    1cbc:	e000ed29 	.word	0xe000ed29
    1cc0:	e000ed2a 	.word	0xe000ed2a
    1cc4:	00007f38 	.word	0x00007f38
    1cc8:	00007b09 	.word	0x00007b09
    1ccc:	00007b2d 	.word	0x00007b2d

00001cd0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1cd0:	4a02      	ldr	r2, [pc, #8]	; (1cdc <z_arm_fault_init+0xc>)
    1cd2:	6953      	ldr	r3, [r2, #20]
    1cd4:	f043 0310 	orr.w	r3, r3, #16
    1cd8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1cda:	4770      	bx	lr
    1cdc:	e000ed00 	.word	0xe000ed00

00001ce0 <z_arm_interrupt_init>:
    1ce0:	4804      	ldr	r0, [pc, #16]	; (1cf4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1ce2:	2300      	movs	r3, #0
    1ce4:	2120      	movs	r1, #32
    1ce6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1ce8:	3301      	adds	r3, #1
    1cea:	2b30      	cmp	r3, #48	; 0x30
    1cec:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1cf0:	d1f9      	bne.n	1ce6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1cf2:	4770      	bx	lr
    1cf4:	e000e100 	.word	0xe000e100

00001cf8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1cf8:	4a06      	ldr	r2, [pc, #24]	; (1d14 <z_arm_clear_arm_mpu_config+0x1c>)
    1cfa:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    1cfc:	2300      	movs	r3, #0
	int num_regions =
    1cfe:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1d02:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1d04:	428b      	cmp	r3, r1
    1d06:	d100      	bne.n	1d0a <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    1d08:	4770      	bx	lr
  MPU->RNR = rnr;
    1d0a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    1d0c:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    1d0e:	3301      	adds	r3, #1
    1d10:	e7f8      	b.n	1d04 <z_arm_clear_arm_mpu_config+0xc>
    1d12:	bf00      	nop
    1d14:	e000ed90 	.word	0xe000ed90

00001d18 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1d18:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1d1a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1d1c:	2300      	movs	r3, #0
    1d1e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1d22:	f7ff ffe9 	bl	1cf8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1d26:	4b14      	ldr	r3, [pc, #80]	; (1d78 <z_arm_init_arch_hw_at_boot+0x60>)
    1d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1d38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1d3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1d40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1d44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1d48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1d4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1d50:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1d54:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1d58:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1d5c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1d60:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1d64:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1d68:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1d6c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1d6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d72:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1d76:	bd08      	pop	{r3, pc}
    1d78:	e000e100 	.word	0xe000e100

00001d7c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1d7c:	4b06      	ldr	r3, [pc, #24]	; (1d98 <z_impl_k_thread_abort+0x1c>)
    1d7e:	689b      	ldr	r3, [r3, #8]
    1d80:	4283      	cmp	r3, r0
    1d82:	d107      	bne.n	1d94 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1d84:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1d88:	b123      	cbz	r3, 1d94 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1d8a:	4a04      	ldr	r2, [pc, #16]	; (1d9c <z_impl_k_thread_abort+0x20>)
    1d8c:	6853      	ldr	r3, [r2, #4]
    1d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1d92:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1d94:	f003 bd20 	b.w	57d8 <z_thread_abort>
    1d98:	20000994 	.word	0x20000994
    1d9c:	e000ed00 	.word	0xe000ed00

00001da0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1da0:	4b02      	ldr	r3, [pc, #8]	; (1dac <z_arm_configure_static_mpu_regions+0xc>)
    1da2:	4a03      	ldr	r2, [pc, #12]	; (1db0 <z_arm_configure_static_mpu_regions+0x10>)
    1da4:	4803      	ldr	r0, [pc, #12]	; (1db4 <z_arm_configure_static_mpu_regions+0x14>)
    1da6:	2101      	movs	r1, #1
    1da8:	f000 b868 	b.w	1e7c <arm_core_mpu_configure_static_mpu_regions>
    1dac:	20040000 	.word	0x20040000
    1db0:	20000000 	.word	0x20000000
    1db4:	00007324 	.word	0x00007324

00001db8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1db8:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1dba:	4b05      	ldr	r3, [pc, #20]	; (1dd0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1dbc:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1dbe:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1dc0:	4a04      	ldr	r2, [pc, #16]	; (1dd4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1dc2:	2120      	movs	r1, #32
    1dc4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1dc8:	4618      	mov	r0, r3
    1dca:	2101      	movs	r1, #1
    1dcc:	f000 b87e 	b.w	1ecc <arm_core_mpu_configure_dynamic_mpu_regions>
    1dd0:	200007a0 	.word	0x200007a0
    1dd4:	150b0000 	.word	0x150b0000

00001dd8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1dda:	4f1e      	ldr	r7, [pc, #120]	; (1e54 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1ddc:	2600      	movs	r6, #0
    1dde:	428e      	cmp	r6, r1
    1de0:	db01      	blt.n	1de6 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1de2:	4610      	mov	r0, r2
    1de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1de6:	6844      	ldr	r4, [r0, #4]
    1de8:	b384      	cbz	r4, 1e4c <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    1dea:	b153      	cbz	r3, 1e02 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1dec:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1df0:	ea14 0f0c 	tst.w	r4, ip
    1df4:	d118      	bne.n	1e28 <mpu_configure_regions+0x50>
		&&
    1df6:	2c1f      	cmp	r4, #31
    1df8:	d916      	bls.n	1e28 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1dfa:	6805      	ldr	r5, [r0, #0]
		&&
    1dfc:	ea1c 0f05 	tst.w	ip, r5
    1e00:	d112      	bne.n	1e28 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1e02:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1e04:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    1e06:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1e0a:	b2d2      	uxtb	r2, r2
    1e0c:	d90f      	bls.n	1e2e <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    1e0e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1e12:	d80e      	bhi.n	1e32 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1e14:	3c01      	subs	r4, #1
    1e16:	fab4 f484 	clz	r4, r4
    1e1a:	f1c4 041f 	rsb	r4, r4, #31
    1e1e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1e20:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1e22:	ea4c 0404 	orr.w	r4, ip, r4
    1e26:	d906      	bls.n	1e36 <mpu_configure_regions+0x5e>
			return -EINVAL;
    1e28:	f06f 0215 	mvn.w	r2, #21
    1e2c:	e7d9      	b.n	1de2 <mpu_configure_regions+0xa>
		return REGION_32B;
    1e2e:	2408      	movs	r4, #8
    1e30:	e7f6      	b.n	1e20 <mpu_configure_regions+0x48>
		return REGION_4G;
    1e32:	243e      	movs	r4, #62	; 0x3e
    1e34:	e7f4      	b.n	1e20 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e36:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1e3a:	4315      	orrs	r5, r2
    1e3c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e40:	f044 0401 	orr.w	r4, r4, #1
    1e44:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e46:	60fd      	str	r5, [r7, #12]
		reg_index++;
    1e48:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e4a:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    1e4c:	3601      	adds	r6, #1
    1e4e:	300c      	adds	r0, #12
    1e50:	e7c5      	b.n	1dde <mpu_configure_regions+0x6>
    1e52:	bf00      	nop
    1e54:	e000ed90 	.word	0xe000ed90

00001e58 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1e58:	4b03      	ldr	r3, [pc, #12]	; (1e68 <arm_core_mpu_enable+0x10>)
    1e5a:	2205      	movs	r2, #5
    1e5c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1e5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e62:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1e66:	4770      	bx	lr
    1e68:	e000ed90 	.word	0xe000ed90

00001e6c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1e6c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1e70:	4b01      	ldr	r3, [pc, #4]	; (1e78 <arm_core_mpu_disable+0xc>)
    1e72:	2200      	movs	r2, #0
    1e74:	605a      	str	r2, [r3, #4]
}
    1e76:	4770      	bx	lr
    1e78:	e000ed90 	.word	0xe000ed90

00001e7c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1e7c:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1e7e:	4d0e      	ldr	r5, [pc, #56]	; (1eb8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1e80:	2301      	movs	r3, #1
    1e82:	782a      	ldrb	r2, [r5, #0]
    1e84:	460c      	mov	r4, r1
    1e86:	f7ff ffa7 	bl	1dd8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1e8a:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    1e8c:	3016      	adds	r0, #22
    1e8e:	d111      	bne.n	1eb4 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    1e90:	f240 1311 	movw	r3, #273	; 0x111
    1e94:	4a09      	ldr	r2, [pc, #36]	; (1ebc <arm_core_mpu_configure_static_mpu_regions+0x40>)
    1e96:	490a      	ldr	r1, [pc, #40]	; (1ec0 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    1e98:	480a      	ldr	r0, [pc, #40]	; (1ec4 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    1e9a:	f004 fd38 	bl	690e <printk>
    1e9e:	4621      	mov	r1, r4
    1ea0:	4809      	ldr	r0, [pc, #36]	; (1ec8 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    1ea2:	f004 fd34 	bl	690e <printk>
			regions_num);
	}
}
    1ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    1eaa:	4804      	ldr	r0, [pc, #16]	; (1ebc <arm_core_mpu_configure_static_mpu_regions+0x40>)
    1eac:	f240 1111 	movw	r1, #273	; 0x111
    1eb0:	f004 bc54 	b.w	675c <assert_post_action>
}
    1eb4:	bd38      	pop	{r3, r4, r5, pc}
    1eb6:	bf00      	nop
    1eb8:	200009f4 	.word	0x200009f4
    1ebc:	00007b5d 	.word	0x00007b5d
    1ec0:	00007f38 	.word	0x00007f38
    1ec4:	00007610 	.word	0x00007610
    1ec8:	00007b94 	.word	0x00007b94

00001ecc <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1ecc:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1ece:	4a12      	ldr	r2, [pc, #72]	; (1f18 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    1ed0:	2300      	movs	r3, #0
    1ed2:	7812      	ldrb	r2, [r2, #0]
    1ed4:	460c      	mov	r4, r1
    1ed6:	f7ff ff7f 	bl	1dd8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1eda:	f110 0f16 	cmn.w	r0, #22
    1ede:	d008      	beq.n	1ef2 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    1ee0:	4b0e      	ldr	r3, [pc, #56]	; (1f1c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    1ee2:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1ee4:	2807      	cmp	r0, #7
    1ee6:	dd00      	ble.n	1eea <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1ee8:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    1eea:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    1eec:	611a      	str	r2, [r3, #16]
    1eee:	3001      	adds	r0, #1
    1ef0:	e7f8      	b.n	1ee4 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    1ef2:	4a0b      	ldr	r2, [pc, #44]	; (1f20 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    1ef4:	490b      	ldr	r1, [pc, #44]	; (1f24 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    1ef6:	480c      	ldr	r0, [pc, #48]	; (1f28 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    1ef8:	f44f 7398 	mov.w	r3, #304	; 0x130
    1efc:	f004 fd07 	bl	690e <printk>
    1f00:	4621      	mov	r1, r4
    1f02:	480a      	ldr	r0, [pc, #40]	; (1f2c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    1f04:	f004 fd03 	bl	690e <printk>
}
    1f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    1f0c:	4804      	ldr	r0, [pc, #16]	; (1f20 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    1f0e:	f44f 7198 	mov.w	r1, #304	; 0x130
    1f12:	f004 bc23 	b.w	675c <assert_post_action>
    1f16:	bf00      	nop
    1f18:	200009f4 	.word	0x200009f4
    1f1c:	e000ed90 	.word	0xe000ed90
    1f20:	00007b5d 	.word	0x00007b5d
    1f24:	00007f38 	.word	0x00007f38
    1f28:	00007610 	.word	0x00007610
    1f2c:	00007bc0 	.word	0x00007bc0

00001f30 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1f30:	4925      	ldr	r1, [pc, #148]	; (1fc8 <z_arm_mpu_init+0x98>)
{
    1f32:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1f34:	680c      	ldr	r4, [r1, #0]
    1f36:	2c08      	cmp	r4, #8
    1f38:	d913      	bls.n	1f62 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    1f3a:	f44f 73a4 	mov.w	r3, #328	; 0x148
    1f3e:	4a23      	ldr	r2, [pc, #140]	; (1fcc <z_arm_mpu_init+0x9c>)
    1f40:	4923      	ldr	r1, [pc, #140]	; (1fd0 <z_arm_mpu_init+0xa0>)
    1f42:	4824      	ldr	r0, [pc, #144]	; (1fd4 <z_arm_mpu_init+0xa4>)
    1f44:	f004 fce3 	bl	690e <printk>
    1f48:	4823      	ldr	r0, [pc, #140]	; (1fd8 <z_arm_mpu_init+0xa8>)
    1f4a:	2208      	movs	r2, #8
    1f4c:	4621      	mov	r1, r4
    1f4e:	f004 fcde 	bl	690e <printk>
    1f52:	481e      	ldr	r0, [pc, #120]	; (1fcc <z_arm_mpu_init+0x9c>)
    1f54:	f44f 71a4 	mov.w	r1, #328	; 0x148
    1f58:	f004 fc00 	bl	675c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    1f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    1f60:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    1f62:	f7ff ff83 	bl	1e6c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1f66:	6848      	ldr	r0, [r1, #4]
    1f68:	491c      	ldr	r1, [pc, #112]	; (1fdc <z_arm_mpu_init+0xac>)
    1f6a:	2200      	movs	r2, #0
    1f6c:	4294      	cmp	r4, r2
    1f6e:	f100 000c 	add.w	r0, r0, #12
    1f72:	d119      	bne.n	1fa8 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    1f74:	4b1a      	ldr	r3, [pc, #104]	; (1fe0 <z_arm_mpu_init+0xb0>)
    1f76:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    1f78:	f7ff ff6e 	bl	1e58 <arm_core_mpu_enable>
	__ASSERT(
    1f7c:	680b      	ldr	r3, [r1, #0]
    1f7e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1f82:	2b08      	cmp	r3, #8
    1f84:	d00e      	beq.n	1fa4 <z_arm_mpu_init+0x74>
    1f86:	4917      	ldr	r1, [pc, #92]	; (1fe4 <z_arm_mpu_init+0xb4>)
    1f88:	4a10      	ldr	r2, [pc, #64]	; (1fcc <z_arm_mpu_init+0x9c>)
    1f8a:	4812      	ldr	r0, [pc, #72]	; (1fd4 <z_arm_mpu_init+0xa4>)
    1f8c:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    1f90:	f004 fcbd 	bl	690e <printk>
    1f94:	4814      	ldr	r0, [pc, #80]	; (1fe8 <z_arm_mpu_init+0xb8>)
    1f96:	f004 fcba 	bl	690e <printk>
    1f9a:	480c      	ldr	r0, [pc, #48]	; (1fcc <z_arm_mpu_init+0x9c>)
    1f9c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    1fa0:	f004 fbdc 	bl	675c <assert_post_action>
	return 0;
    1fa4:	2000      	movs	r0, #0
    1fa6:	e7db      	b.n	1f60 <z_arm_mpu_init+0x30>
    1fa8:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1faa:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    1fae:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1fb2:	4313      	orrs	r3, r2
    1fb4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1fb8:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1fba:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1fbe:	f043 0301 	orr.w	r3, r3, #1
    1fc2:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1fc4:	3201      	adds	r2, #1
    1fc6:	e7d1      	b.n	1f6c <z_arm_mpu_init+0x3c>
    1fc8:	00007330 	.word	0x00007330
    1fcc:	00007b5d 	.word	0x00007b5d
    1fd0:	00007f38 	.word	0x00007f38
    1fd4:	00007610 	.word	0x00007610
    1fd8:	00007bed 	.word	0x00007bed
    1fdc:	e000ed90 	.word	0xe000ed90
    1fe0:	200009f4 	.word	0x200009f4
    1fe4:	00007c21 	.word	0x00007c21
    1fe8:	00007c71 	.word	0x00007c71

00001fec <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1fec:	4b01      	ldr	r3, [pc, #4]	; (1ff4 <__stdout_hook_install+0x8>)
    1fee:	6018      	str	r0, [r3, #0]
}
    1ff0:	4770      	bx	lr
    1ff2:	bf00      	nop
    1ff4:	20000028 	.word	0x20000028

00001ff8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1ff8:	f04f 0320 	mov.w	r3, #32
    1ffc:	f3ef 8211 	mrs	r2, BASEPRI
    2000:	f383 8812 	msr	BASEPRI_MAX, r3
    2004:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2008:	4906      	ldr	r1, [pc, #24]	; (2024 <nordicsemi_nrf52_init+0x2c>)
    200a:	2301      	movs	r3, #1
    200c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2010:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2014:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2018:	f382 8811 	msr	BASEPRI, r2
    201c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2020:	2000      	movs	r0, #0
    2022:	4770      	bx	lr
    2024:	4001e000 	.word	0x4001e000

00002028 <sys_arch_reboot>:
    *p_gpregret = val;
    2028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    202c:	b2c0      	uxtb	r0, r0
    202e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2032:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2036:	4905      	ldr	r1, [pc, #20]	; (204c <sys_arch_reboot+0x24>)
    2038:	4b05      	ldr	r3, [pc, #20]	; (2050 <sys_arch_reboot+0x28>)
    203a:	68ca      	ldr	r2, [r1, #12]
    203c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2040:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2042:	60cb      	str	r3, [r1, #12]
    2044:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2048:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    204a:	e7fd      	b.n	2048 <sys_arch_reboot+0x20>
    204c:	e000ed00 	.word	0xe000ed00
    2050:	05fa0004 	.word	0x05fa0004

00002054 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2054:	b120      	cbz	r0, 2060 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2056:	4b03      	ldr	r3, [pc, #12]	; (2064 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2058:	0180      	lsls	r0, r0, #6
    205a:	f043 0301 	orr.w	r3, r3, #1
    205e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2060:	4770      	bx	lr
    2062:	bf00      	nop
    2064:	000072f0 	.word	0x000072f0

00002068 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    206c:	4c10      	ldr	r4, [pc, #64]	; (20b0 <onoff_start+0x48>)
    206e:	1b07      	subs	r7, r0, r4
    2070:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    2074:	f04f 080c 	mov.w	r8, #12
    2078:	fb08 f807 	mul.w	r8, r8, r7
{
    207c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    207e:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    2082:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    2084:	4420      	add	r0, r4
    2086:	2140      	movs	r1, #64	; 0x40
    2088:	f004 fcc4 	bl	6a14 <set_starting_state>
	if (err < 0) {
    208c:	1e01      	subs	r1, r0, #0
    208e:	db09      	blt.n	20a4 <onoff_start+0x3c>
	subdata->cb = cb;
    2090:	4b08      	ldr	r3, [pc, #32]	; (20b4 <onoff_start+0x4c>)
    2092:	4444      	add	r4, r8
	subdata->user_data = user_data;
    2094:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    2098:	4b07      	ldr	r3, [pc, #28]	; (20b8 <onoff_start+0x50>)
    209a:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    209e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    20a2:	4718      	bx	r3
		notify(mgr, err);
    20a4:	4630      	mov	r0, r6
    20a6:	462b      	mov	r3, r5
}
    20a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    20ac:	4718      	bx	r3
    20ae:	bf00      	nop
    20b0:	200007bc 	.word	0x200007bc
    20b4:	00006a77 	.word	0x00006a77
    20b8:	00007364 	.word	0x00007364

000020bc <get_status>:
{
    20bc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    20be:	b2cc      	uxtb	r4, r1
    20c0:	2c01      	cmp	r4, #1
{
    20c2:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    20c4:	d909      	bls.n	20da <get_status+0x1e>
    20c6:	4909      	ldr	r1, [pc, #36]	; (20ec <get_status+0x30>)
    20c8:	4809      	ldr	r0, [pc, #36]	; (20f0 <get_status+0x34>)
    20ca:	4a0a      	ldr	r2, [pc, #40]	; (20f4 <get_status+0x38>)
    20cc:	237e      	movs	r3, #126	; 0x7e
    20ce:	f004 fc1e 	bl	690e <printk>
    20d2:	4808      	ldr	r0, [pc, #32]	; (20f4 <get_status+0x38>)
    20d4:	217e      	movs	r1, #126	; 0x7e
    20d6:	f004 fb41 	bl	675c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    20da:	692b      	ldr	r3, [r5, #16]
    20dc:	210c      	movs	r1, #12
    20de:	fb04 3401 	mla	r4, r4, r1, r3
    20e2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    20e4:	f000 0007 	and.w	r0, r0, #7
    20e8:	bd38      	pop	{r3, r4, r5, pc}
    20ea:	bf00      	nop
    20ec:	00007cde 	.word	0x00007cde
    20f0:	00007610 	.word	0x00007610
    20f4:	00007ca1 	.word	0x00007ca1

000020f8 <stop>:
{
    20f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20fa:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    20fc:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    20fe:	6907      	ldr	r7, [r0, #16]
{
    2100:	4605      	mov	r5, r0
    2102:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2104:	d90b      	bls.n	211e <stop+0x26>
    2106:	4918      	ldr	r1, [pc, #96]	; (2168 <stop+0x70>)
    2108:	4818      	ldr	r0, [pc, #96]	; (216c <stop+0x74>)
    210a:	4a19      	ldr	r2, [pc, #100]	; (2170 <stop+0x78>)
    210c:	f240 1353 	movw	r3, #339	; 0x153
    2110:	f004 fbfd 	bl	690e <printk>
    2114:	4816      	ldr	r0, [pc, #88]	; (2170 <stop+0x78>)
    2116:	f240 1153 	movw	r1, #339	; 0x153
    211a:	f004 fb1f 	bl	675c <assert_post_action>
	__asm__ volatile(
    211e:	f04f 0320 	mov.w	r3, #32
    2122:	f3ef 8211 	mrs	r2, BASEPRI
    2126:	f383 8812 	msr	BASEPRI_MAX, r3
    212a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    212e:	230c      	movs	r3, #12
    2130:	fb03 7104 	mla	r1, r3, r4, r7
    2134:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    2136:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    213a:	d001      	beq.n	2140 <stop+0x48>
    213c:	428e      	cmp	r6, r1
    213e:	d110      	bne.n	2162 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2140:	fb03 7304 	mla	r3, r3, r4, r7
    2144:	2101      	movs	r1, #1
    2146:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    2148:	2000      	movs	r0, #0
	__asm__ volatile(
    214a:	f382 8811 	msr	BASEPRI, r2
    214e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2152:	b928      	cbnz	r0, 2160 <stop+0x68>
	get_sub_config(dev, type)->stop();
    2154:	6869      	ldr	r1, [r5, #4]
    2156:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    215a:	6863      	ldr	r3, [r4, #4]
    215c:	4798      	blx	r3
	return 0;
    215e:	2000      	movs	r0, #0
}
    2160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    2162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2166:	e7f0      	b.n	214a <stop+0x52>
    2168:	00007cde 	.word	0x00007cde
    216c:	00007610 	.word	0x00007610
    2170:	00007ca1 	.word	0x00007ca1

00002174 <onoff_stop>:
{
    2174:	b570      	push	{r4, r5, r6, lr}
    2176:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2178:	4906      	ldr	r1, [pc, #24]	; (2194 <onoff_stop+0x20>)
    217a:	1a41      	subs	r1, r0, r1
{
    217c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    217e:	1149      	asrs	r1, r1, #5
    2180:	4805      	ldr	r0, [pc, #20]	; (2198 <onoff_stop+0x24>)
    2182:	2240      	movs	r2, #64	; 0x40
    2184:	f7ff ffb8 	bl	20f8 <stop>
	notify(mgr, res);
    2188:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    218a:	4601      	mov	r1, r0
	notify(mgr, res);
    218c:	4620      	mov	r0, r4
}
    218e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2192:	4718      	bx	r3
    2194:	200007bc 	.word	0x200007bc
    2198:	00007088 	.word	0x00007088

0000219c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    219c:	2200      	movs	r2, #0
{
    219e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    21a0:	2101      	movs	r1, #1
{
    21a2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    21a4:	4610      	mov	r0, r2
    21a6:	f7ff fb5b 	bl	1860 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    21aa:	2000      	movs	r0, #0
    21ac:	f7ff fb3a 	bl	1824 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    21b0:	480f      	ldr	r0, [pc, #60]	; (21f0 <clk_init+0x54>)
    21b2:	f001 f953 	bl	345c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    21b6:	4b0f      	ldr	r3, [pc, #60]	; (21f4 <clk_init+0x58>)
    21b8:	4298      	cmp	r0, r3
    21ba:	d115      	bne.n	21e8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    21bc:	f001 f972 	bl	34a4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    21c0:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    21c2:	490d      	ldr	r1, [pc, #52]	; (21f8 <clk_init+0x5c>)
    21c4:	4630      	mov	r0, r6
    21c6:	f004 fb88 	bl	68da <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    21ca:	2800      	cmp	r0, #0
    21cc:	db0b      	blt.n	21e6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    21ce:	2501      	movs	r5, #1
    21d0:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    21d2:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    21d4:	4908      	ldr	r1, [pc, #32]	; (21f8 <clk_init+0x5c>)
    21d6:	f104 0020 	add.w	r0, r4, #32
    21da:	f004 fb7e 	bl	68da <onoff_manager_init>
		if (err < 0) {
    21de:	2800      	cmp	r0, #0
    21e0:	db01      	blt.n	21e6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    21e2:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    21e4:	2000      	movs	r0, #0
}
    21e6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    21e8:	f06f 0004 	mvn.w	r0, #4
    21ec:	e7fb      	b.n	21e6 <clk_init+0x4a>
    21ee:	bf00      	nop
    21f0:	00002231 	.word	0x00002231
    21f4:	0bad0000 	.word	0x0bad0000
    21f8:	00007374 	.word	0x00007374

000021fc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    21fc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    21fe:	230c      	movs	r3, #12
    2200:	4809      	ldr	r0, [pc, #36]	; (2228 <clkstarted_handle.constprop.0+0x2c>)
    2202:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2204:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2206:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2208:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    220c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    220e:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    2210:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    2212:	4418      	add	r0, r3
    2214:	f004 fc1c 	bl	6a50 <set_on_state>
	if (callback) {
    2218:	b12d      	cbz	r5, 2226 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    221a:	4632      	mov	r2, r6
    221c:	462b      	mov	r3, r5
    221e:	4803      	ldr	r0, [pc, #12]	; (222c <clkstarted_handle.constprop.0+0x30>)
}
    2220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2224:	4718      	bx	r3
}
    2226:	bd70      	pop	{r4, r5, r6, pc}
    2228:	200007bc 	.word	0x200007bc
    222c:	00007088 	.word	0x00007088

00002230 <clock_event_handler>:
	switch (event) {
    2230:	2801      	cmp	r0, #1
{
    2232:	b508      	push	{r3, lr}
	switch (event) {
    2234:	d006      	beq.n	2244 <clock_event_handler+0x14>
    2236:	2803      	cmp	r0, #3
    2238:	d008      	beq.n	224c <clock_event_handler+0x1c>
    223a:	b9a8      	cbnz	r0, 2268 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    223c:	4b10      	ldr	r3, [pc, #64]	; (2280 <clock_event_handler+0x50>)
    223e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2240:	075b      	lsls	r3, r3, #29
    2242:	d11b      	bne.n	227c <clock_event_handler+0x4c>
}
    2244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2248:	f7ff bfd8 	b.w	21fc <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    224c:	490d      	ldr	r1, [pc, #52]	; (2284 <clock_event_handler+0x54>)
    224e:	4a0e      	ldr	r2, [pc, #56]	; (2288 <clock_event_handler+0x58>)
    2250:	480e      	ldr	r0, [pc, #56]	; (228c <clock_event_handler+0x5c>)
    2252:	f240 2366 	movw	r3, #614	; 0x266
    2256:	f004 fb5a 	bl	690e <printk>
    225a:	f240 2166 	movw	r1, #614	; 0x266
}
    225e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    2262:	4809      	ldr	r0, [pc, #36]	; (2288 <clock_event_handler+0x58>)
    2264:	f004 ba7a 	b.w	675c <assert_post_action>
    2268:	4906      	ldr	r1, [pc, #24]	; (2284 <clock_event_handler+0x54>)
    226a:	4a07      	ldr	r2, [pc, #28]	; (2288 <clock_event_handler+0x58>)
    226c:	4807      	ldr	r0, [pc, #28]	; (228c <clock_event_handler+0x5c>)
    226e:	f240 236a 	movw	r3, #618	; 0x26a
    2272:	f004 fb4c 	bl	690e <printk>
    2276:	f240 216a 	movw	r1, #618	; 0x26a
    227a:	e7f0      	b.n	225e <clock_event_handler+0x2e>
}
    227c:	bd08      	pop	{r3, pc}
    227e:	bf00      	nop
    2280:	200007bc 	.word	0x200007bc
    2284:	00007f38 	.word	0x00007f38
    2288:	00007ca1 	.word	0x00007ca1
    228c:	00007610 	.word	0x00007610

00002290 <generic_hfclk_start>:
{
    2290:	b508      	push	{r3, lr}
	__asm__ volatile(
    2292:	f04f 0320 	mov.w	r3, #32
    2296:	f3ef 8111 	mrs	r1, BASEPRI
    229a:	f383 8812 	msr	BASEPRI_MAX, r3
    229e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    22a2:	4a12      	ldr	r2, [pc, #72]	; (22ec <generic_hfclk_start+0x5c>)
    22a4:	6813      	ldr	r3, [r2, #0]
    22a6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    22aa:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    22ae:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    22b0:	d00c      	beq.n	22cc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    22b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    22b6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    22ba:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    22be:	f013 0301 	ands.w	r3, r3, #1
    22c2:	d003      	beq.n	22cc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    22c4:	480a      	ldr	r0, [pc, #40]	; (22f0 <generic_hfclk_start+0x60>)
    22c6:	f004 fbc3 	bl	6a50 <set_on_state>
			already_started = true;
    22ca:	2301      	movs	r3, #1
	__asm__ volatile(
    22cc:	f381 8811 	msr	BASEPRI, r1
    22d0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    22d4:	b123      	cbz	r3, 22e0 <generic_hfclk_start+0x50>
}
    22d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    22da:	2000      	movs	r0, #0
    22dc:	f7ff bf8e 	b.w	21fc <clkstarted_handle.constprop.0>
}
    22e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    22e4:	2001      	movs	r0, #1
    22e6:	f001 b8fd 	b.w	34e4 <nrfx_clock_start>
    22ea:	bf00      	nop
    22ec:	20000814 	.word	0x20000814
    22f0:	20000804 	.word	0x20000804

000022f4 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    22f4:	4b09      	ldr	r3, [pc, #36]	; (231c <generic_hfclk_stop+0x28>)
    22f6:	f3bf 8f5b 	dmb	ish
    22fa:	e853 2f00 	ldrex	r2, [r3]
    22fe:	f022 0102 	bic.w	r1, r2, #2
    2302:	e843 1000 	strex	r0, r1, [r3]
    2306:	2800      	cmp	r0, #0
    2308:	d1f7      	bne.n	22fa <generic_hfclk_stop+0x6>
    230a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    230e:	07d3      	lsls	r3, r2, #31
    2310:	d402      	bmi.n	2318 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2312:	2001      	movs	r0, #1
    2314:	f001 b93a 	b.w	358c <nrfx_clock_stop>
}
    2318:	4770      	bx	lr
    231a:	bf00      	nop
    231c:	20000814 	.word	0x20000814

00002320 <api_blocking_start>:
{
    2320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2322:	2200      	movs	r2, #0
    2324:	2301      	movs	r3, #1
    2326:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    232a:	4a09      	ldr	r2, [pc, #36]	; (2350 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    232c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2330:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2332:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2336:	f004 fbb0 	bl	6a9a <api_start>
	if (err < 0) {
    233a:	2800      	cmp	r0, #0
    233c:	db05      	blt.n	234a <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    233e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2342:	2300      	movs	r3, #0
    2344:	4668      	mov	r0, sp
    2346:	f003 fb39 	bl	59bc <z_impl_k_sem_take>
}
    234a:	b005      	add	sp, #20
    234c:	f85d fb04 	ldr.w	pc, [sp], #4
    2350:	00006a95 	.word	0x00006a95

00002354 <z_nrf_clock_control_lf_on>:
{
    2354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2358:	4949      	ldr	r1, [pc, #292]	; (2480 <z_nrf_clock_control_lf_on+0x12c>)
    235a:	f3bf 8f5b 	dmb	ish
    235e:	4605      	mov	r5, r0
    2360:	2201      	movs	r2, #1
    2362:	e851 3f00 	ldrex	r3, [r1]
    2366:	e841 2000 	strex	r0, r2, [r1]
    236a:	2800      	cmp	r0, #0
    236c:	d1f9      	bne.n	2362 <z_nrf_clock_control_lf_on+0xe>
    236e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2372:	b9a3      	cbnz	r3, 239e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2374:	4943      	ldr	r1, [pc, #268]	; (2484 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    2376:	4844      	ldr	r0, [pc, #272]	; (2488 <z_nrf_clock_control_lf_on+0x134>)
    2378:	604b      	str	r3, [r1, #4]
    237a:	60cb      	str	r3, [r1, #12]
    237c:	608a      	str	r2, [r1, #8]
    237e:	f7ff f82d 	bl	13dc <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    2382:	2800      	cmp	r0, #0
    2384:	da0b      	bge.n	239e <z_nrf_clock_control_lf_on+0x4a>
    2386:	4941      	ldr	r1, [pc, #260]	; (248c <z_nrf_clock_control_lf_on+0x138>)
    2388:	4841      	ldr	r0, [pc, #260]	; (2490 <z_nrf_clock_control_lf_on+0x13c>)
    238a:	4a42      	ldr	r2, [pc, #264]	; (2494 <z_nrf_clock_control_lf_on+0x140>)
    238c:	f240 2326 	movw	r3, #550	; 0x226
    2390:	f004 fabd 	bl	690e <printk>
    2394:	483f      	ldr	r0, [pc, #252]	; (2494 <z_nrf_clock_control_lf_on+0x140>)
    2396:	f240 2126 	movw	r1, #550	; 0x226
    239a:	f004 f9df 	bl	675c <assert_post_action>
	switch (start_mode) {
    239e:	b3ad      	cbz	r5, 240c <z_nrf_clock_control_lf_on+0xb8>
    23a0:	1e6b      	subs	r3, r5, #1
    23a2:	2b01      	cmp	r3, #1
    23a4:	d856      	bhi.n	2454 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    23a6:	2d01      	cmp	r5, #1
    23a8:	d107      	bne.n	23ba <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    23aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23ae:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    23b2:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    23b6:	2b01      	cmp	r3, #1
    23b8:	d028      	beq.n	240c <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    23ba:	f004 fe1b 	bl	6ff4 <k_is_in_isr>
    23be:	4604      	mov	r4, r0
    23c0:	b918      	cbnz	r0, 23ca <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    23c2:	4b35      	ldr	r3, [pc, #212]	; (2498 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    23c4:	781b      	ldrb	r3, [r3, #0]
    23c6:	2b00      	cmp	r3, #0
    23c8:	d152      	bne.n	2470 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    23ca:	f04f 0320 	mov.w	r3, #32
    23ce:	f3ef 8611 	mrs	r6, BASEPRI
    23d2:	f383 8812 	msr	BASEPRI_MAX, r3
    23d6:	f3bf 8f6f 	isb	sy
    23da:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    23dc:	4f2f      	ldr	r7, [pc, #188]	; (249c <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23de:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 24a4 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23e2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 24a8 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    23e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    23ea:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    23ee:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    23f2:	03d2      	lsls	r2, r2, #15
    23f4:	d50c      	bpl.n	2410 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    23f6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    23fa:	2b01      	cmp	r3, #1
    23fc:	d001      	beq.n	2402 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    23fe:	2d01      	cmp	r5, #1
    2400:	d106      	bne.n	2410 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    2402:	b30c      	cbz	r4, 2448 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    2404:	f386 8811 	msr	BASEPRI, r6
    2408:	f3bf 8f6f 	isb	sy
}
    240c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2410:	b1ac      	cbz	r4, 243e <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2412:	4630      	mov	r0, r6
    2414:	f7ff f99e 	bl	1754 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    241c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2420:	2b00      	cmp	r3, #0
    2422:	d1e0      	bne.n	23e6 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2424:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2426:	2900      	cmp	r1, #0
    2428:	d0dd      	beq.n	23e6 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    242a:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    242c:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    242e:	2301      	movs	r3, #1
    2430:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2434:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2438:	f8c9 3000 	str.w	r3, [r9]
}
    243c:	e7d3      	b.n	23e6 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    243e:	2100      	movs	r1, #0
    2440:	2021      	movs	r0, #33	; 0x21
    2442:	f003 f98b 	bl	575c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2446:	e7e7      	b.n	2418 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    2448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    244c:	2202      	movs	r2, #2
    244e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2452:	e7db      	b.n	240c <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    2454:	4912      	ldr	r1, [pc, #72]	; (24a0 <z_nrf_clock_control_lf_on+0x14c>)
    2456:	480e      	ldr	r0, [pc, #56]	; (2490 <z_nrf_clock_control_lf_on+0x13c>)
    2458:	4a0e      	ldr	r2, [pc, #56]	; (2494 <z_nrf_clock_control_lf_on+0x140>)
    245a:	f44f 730e 	mov.w	r3, #568	; 0x238
    245e:	f004 fa56 	bl	690e <printk>
}
    2462:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    2466:	480b      	ldr	r0, [pc, #44]	; (2494 <z_nrf_clock_control_lf_on+0x140>)
    2468:	f44f 710e 	mov.w	r1, #568	; 0x238
    246c:	f004 b976 	b.w	675c <assert_post_action>
    p_reg->INTENCLR = mask;
    2470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2474:	2202      	movs	r2, #2
    2476:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    247a:	4606      	mov	r6, r0
}
    247c:	e7ae      	b.n	23dc <z_nrf_clock_control_lf_on+0x88>
    247e:	bf00      	nop
    2480:	20000818 	.word	0x20000818
    2484:	200007ac 	.word	0x200007ac
    2488:	200007dc 	.word	0x200007dc
    248c:	00007d02 	.word	0x00007d02
    2490:	00007610 	.word	0x00007610
    2494:	00007ca1 	.word	0x00007ca1
    2498:	20000e06 	.word	0x20000e06
    249c:	40000104 	.word	0x40000104
    24a0:	00007f38 	.word	0x00007f38
    24a4:	e000e100 	.word	0xe000e100
    24a8:	40000008 	.word	0x40000008

000024ac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    24ac:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    24ae:	4b08      	ldr	r3, [pc, #32]	; (24d0 <uart_console_init+0x24>)
    24b0:	4808      	ldr	r0, [pc, #32]	; (24d4 <uart_console_init+0x28>)
    24b2:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    24b4:	f004 fd4a 	bl	6f4c <z_device_ready>
    24b8:	b138      	cbz	r0, 24ca <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    24ba:	4807      	ldr	r0, [pc, #28]	; (24d8 <uart_console_init+0x2c>)
    24bc:	f7ff fd96 	bl	1fec <__stdout_hook_install>
	__printk_hook_install(console_out);
    24c0:	4805      	ldr	r0, [pc, #20]	; (24d8 <uart_console_init+0x2c>)
    24c2:	f7ff f907 	bl	16d4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    24c6:	2000      	movs	r0, #0
}
    24c8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    24ca:	f06f 0012 	mvn.w	r0, #18
    24ce:	e7fb      	b.n	24c8 <uart_console_init+0x1c>
    24d0:	2000081c 	.word	0x2000081c
    24d4:	000070b8 	.word	0x000070b8
    24d8:	000024dd 	.word	0x000024dd

000024dc <console_out>:
	if ('\n' == c) {
    24dc:	280a      	cmp	r0, #10
{
    24de:	b538      	push	{r3, r4, r5, lr}
    24e0:	4d07      	ldr	r5, [pc, #28]	; (2500 <console_out+0x24>)
    24e2:	4604      	mov	r4, r0
	if ('\n' == c) {
    24e4:	d104      	bne.n	24f0 <console_out+0x14>
    24e6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    24e8:	6883      	ldr	r3, [r0, #8]
    24ea:	210d      	movs	r1, #13
    24ec:	685b      	ldr	r3, [r3, #4]
    24ee:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    24f0:	6828      	ldr	r0, [r5, #0]
    24f2:	6883      	ldr	r3, [r0, #8]
    24f4:	b2e1      	uxtb	r1, r4
    24f6:	685b      	ldr	r3, [r3, #4]
    24f8:	4798      	blx	r3
}
    24fa:	4620      	mov	r0, r4
    24fc:	bd38      	pop	{r3, r4, r5, pc}
    24fe:	bf00      	nop
    2500:	2000081c 	.word	0x2000081c

00002504 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2504:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2506:	6905      	ldr	r5, [r0, #16]
{
    2508:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    250a:	460c      	mov	r4, r1
    250c:	b961      	cbnz	r1, 2528 <gpio_nrfx_manage_callback+0x24>
    250e:	4922      	ldr	r1, [pc, #136]	; (2598 <gpio_nrfx_manage_callback+0x94>)
    2510:	4a22      	ldr	r2, [pc, #136]	; (259c <gpio_nrfx_manage_callback+0x98>)
    2512:	4823      	ldr	r0, [pc, #140]	; (25a0 <gpio_nrfx_manage_callback+0x9c>)
    2514:	2324      	movs	r3, #36	; 0x24
    2516:	f004 f9fa 	bl	690e <printk>
    251a:	4822      	ldr	r0, [pc, #136]	; (25a4 <gpio_nrfx_manage_callback+0xa0>)
    251c:	f004 f9f7 	bl	690e <printk>
    2520:	481e      	ldr	r0, [pc, #120]	; (259c <gpio_nrfx_manage_callback+0x98>)
    2522:	2124      	movs	r1, #36	; 0x24
    2524:	f004 f91a 	bl	675c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2528:	6863      	ldr	r3, [r4, #4]
    252a:	b963      	cbnz	r3, 2546 <gpio_nrfx_manage_callback+0x42>
    252c:	491e      	ldr	r1, [pc, #120]	; (25a8 <gpio_nrfx_manage_callback+0xa4>)
    252e:	4a1b      	ldr	r2, [pc, #108]	; (259c <gpio_nrfx_manage_callback+0x98>)
    2530:	481b      	ldr	r0, [pc, #108]	; (25a0 <gpio_nrfx_manage_callback+0x9c>)
    2532:	2325      	movs	r3, #37	; 0x25
    2534:	f004 f9eb 	bl	690e <printk>
    2538:	481c      	ldr	r0, [pc, #112]	; (25ac <gpio_nrfx_manage_callback+0xa8>)
    253a:	f004 f9e8 	bl	690e <printk>
    253e:	4817      	ldr	r0, [pc, #92]	; (259c <gpio_nrfx_manage_callback+0x98>)
    2540:	2125      	movs	r1, #37	; 0x25
    2542:	f004 f90b 	bl	675c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2546:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2548:	b15b      	cbz	r3, 2562 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    254a:	2200      	movs	r2, #0
    254c:	429c      	cmp	r4, r3
    254e:	d113      	bne.n	2578 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    2550:	6823      	ldr	r3, [r4, #0]
    2552:	b95a      	cbnz	r2, 256c <gpio_nrfx_manage_callback+0x68>
    2554:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    2556:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    2558:	4294      	cmp	r4, r2
    255a:	d100      	bne.n	255e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    255c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    255e:	2300      	movs	r3, #0
    2560:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2562:	b976      	cbnz	r6, 2582 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2564:	2000      	movs	r0, #0
				     callback, set);
}
    2566:	bd70      	pop	{r4, r5, r6, pc}
    2568:	460b      	mov	r3, r1
    256a:	e7ef      	b.n	254c <gpio_nrfx_manage_callback+0x48>
    256c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    256e:	68ab      	ldr	r3, [r5, #8]
    2570:	429c      	cmp	r4, r3
	list->tail = node;
    2572:	bf08      	it	eq
    2574:	60aa      	streq	r2, [r5, #8]
}
    2576:	e7f2      	b.n	255e <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2578:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    257a:	461a      	mov	r2, r3
    257c:	2900      	cmp	r1, #0
    257e:	d1f3      	bne.n	2568 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    2580:	b13e      	cbz	r6, 2592 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    2582:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2584:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    2586:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    2588:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    258a:	2800      	cmp	r0, #0
    258c:	d1ea      	bne.n	2564 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    258e:	60ac      	str	r4, [r5, #8]
}
    2590:	e7e9      	b.n	2566 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    2592:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2596:	e7e6      	b.n	2566 <gpio_nrfx_manage_callback+0x62>
    2598:	00007d3e 	.word	0x00007d3e
    259c:	00007d11 	.word	0x00007d11
    25a0:	00007610 	.word	0x00007610
    25a4:	00007d47 	.word	0x00007d47
    25a8:	00007d56 	.word	0x00007d56
    25ac:	00007d68 	.word	0x00007d68

000025b0 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    25b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    25b4:	6804      	ldr	r4, [r0, #0]
{
    25b6:	460f      	mov	r7, r1
    25b8:	4616      	mov	r6, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    25ba:	b34c      	cbz	r4, 2610 <gpio_fire_callbacks+0x60>
	return node->next;
    25bc:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    25be:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2618 <gpio_fire_callbacks+0x68>
    25c2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 261c <gpio_fire_callbacks+0x6c>
    25c6:	f8df a058 	ldr.w	sl, [pc, #88]	; 2620 <gpio_fire_callbacks+0x70>
    25ca:	2d00      	cmp	r5, #0
    25cc:	bf38      	it	cc
    25ce:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    25d0:	68a3      	ldr	r3, [r4, #8]
    25d2:	421e      	tst	r6, r3
    25d4:	d014      	beq.n	2600 <gpio_fire_callbacks+0x50>
			__ASSERT(cb->handler, "No callback handler!");
    25d6:	6863      	ldr	r3, [r4, #4]
    25d8:	b963      	cbnz	r3, 25f4 <gpio_fire_callbacks+0x44>
    25da:	4649      	mov	r1, r9
    25dc:	2345      	movs	r3, #69	; 0x45
    25de:	4642      	mov	r2, r8
    25e0:	4650      	mov	r0, sl
    25e2:	f004 f994 	bl	690e <printk>
    25e6:	480b      	ldr	r0, [pc, #44]	; (2614 <gpio_fire_callbacks+0x64>)
    25e8:	f004 f991 	bl	690e <printk>
    25ec:	2145      	movs	r1, #69	; 0x45
    25ee:	4640      	mov	r0, r8
    25f0:	f004 f8b4 	bl	675c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    25f4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    25f8:	4621      	mov	r1, r4
    25fa:	4032      	ands	r2, r6
    25fc:	4638      	mov	r0, r7
    25fe:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2600:	b135      	cbz	r5, 2610 <gpio_fire_callbacks+0x60>
    2602:	682b      	ldr	r3, [r5, #0]
    2604:	2b00      	cmp	r3, #0
    2606:	bf38      	it	cc
    2608:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    260a:	462c      	mov	r4, r5
    260c:	461d      	mov	r5, r3
    260e:	e7df      	b.n	25d0 <gpio_fire_callbacks+0x20>
		}
	}
}
    2610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2614:	00007d68 	.word	0x00007d68
    2618:	00007d11 	.word	0x00007d11
    261c:	00007d7f 	.word	0x00007d7f
    2620:	00007610 	.word	0x00007610

00002624 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2624:	6802      	ldr	r2, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    2626:	0953      	lsrs	r3, r2, #5
{
    2628:	b510      	push	{r4, lr}
    262a:	4604      	mov	r4, r0
    switch (port)
    262c:	d02c      	beq.n	2688 <nrf_gpio_pin_port_decode+0x64>
    262e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    2630:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2634:	bf18      	it	ne
    2636:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    2638:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
    263c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    263e:	07db      	lsls	r3, r3, #31
    2640:	d40b      	bmi.n	265a <nrf_gpio_pin_port_decode+0x36>
    2642:	4914      	ldr	r1, [pc, #80]	; (2694 <nrf_gpio_pin_port_decode+0x70>)
    2644:	4814      	ldr	r0, [pc, #80]	; (2698 <nrf_gpio_pin_port_decode+0x74>)
    2646:	4a15      	ldr	r2, [pc, #84]	; (269c <nrf_gpio_pin_port_decode+0x78>)
    2648:	f44f 7305 	mov.w	r3, #532	; 0x214
    264c:	f004 f95f 	bl	690e <printk>
    2650:	4812      	ldr	r0, [pc, #72]	; (269c <nrf_gpio_pin_port_decode+0x78>)
    2652:	f44f 7105 	mov.w	r1, #532	; 0x214
    2656:	f004 f881 	bl	675c <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    265a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    265c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2660:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    2662:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2664:	d00d      	beq.n	2682 <nrf_gpio_pin_port_decode+0x5e>
    2666:	2b01      	cmp	r3, #1
    2668:	d011      	beq.n	268e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    266a:	490d      	ldr	r1, [pc, #52]	; (26a0 <nrf_gpio_pin_port_decode+0x7c>)
    266c:	480a      	ldr	r0, [pc, #40]	; (2698 <nrf_gpio_pin_port_decode+0x74>)
    266e:	4a0b      	ldr	r2, [pc, #44]	; (269c <nrf_gpio_pin_port_decode+0x78>)
    2670:	f240 2319 	movw	r3, #537	; 0x219
    2674:	f004 f94b 	bl	690e <printk>
    2678:	4808      	ldr	r0, [pc, #32]	; (269c <nrf_gpio_pin_port_decode+0x78>)
    267a:	f240 2119 	movw	r1, #537	; 0x219
    267e:	f004 f86d 	bl	675c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2682:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    2686:	bd10      	pop	{r4, pc}
    switch (port)
    2688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    268c:	e7d4      	b.n	2638 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    268e:	4805      	ldr	r0, [pc, #20]	; (26a4 <nrf_gpio_pin_port_decode+0x80>)
    2690:	e7f9      	b.n	2686 <nrf_gpio_pin_port_decode+0x62>
    2692:	bf00      	nop
    2694:	00007dbe 	.word	0x00007dbe
    2698:	00007610 	.word	0x00007610
    269c:	00007d8b 	.word	0x00007d8b
    26a0:	00007f38 	.word	0x00007f38
    26a4:	50000300 	.word	0x50000300

000026a8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    26a8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    26aa:	4b09      	ldr	r3, [pc, #36]	; (26d0 <gpio_nrfx_init+0x28>)
    26ac:	781a      	ldrb	r2, [r3, #0]
    26ae:	b96a      	cbnz	r2, 26cc <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    26b0:	2101      	movs	r1, #1
    26b2:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    26b4:	2006      	movs	r0, #6
    26b6:	2105      	movs	r1, #5
    26b8:	f7ff f8d2 	bl	1860 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    26bc:	2006      	movs	r0, #6
    26be:	f7ff f8b1 	bl	1824 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    26c2:	4b04      	ldr	r3, [pc, #16]	; (26d4 <gpio_nrfx_init+0x2c>)
    26c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    26c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    26cc:	2000      	movs	r0, #0
    26ce:	bd08      	pop	{r3, pc}
    26d0:	200009f5 	.word	0x200009f5
    26d4:	40006000 	.word	0x40006000

000026d8 <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    26d8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    26dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    26e0:	6904      	ldr	r4, [r0, #16]
{
    26e2:	4607      	mov	r7, r0
    26e4:	460e      	mov	r6, r1
    26e6:	4690      	mov	r8, r2
    26e8:	4699      	mov	r9, r3
    26ea:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    26ee:	f040 80ab 	bne.w	2848 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    26f2:	6843      	ldr	r3, [r0, #4]
    26f4:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    26f6:	a801      	add	r0, sp, #4
    26f8:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
    26fc:	9301      	str	r3, [sp, #4]
    26fe:	f7ff ff91 	bl	2624 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2702:	9b01      	ldr	r3, [sp, #4]
    2704:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2708:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    270c:	07d8      	lsls	r0, r3, #31
    270e:	f100 80bb 	bmi.w	2888 <gpio_nrfx_pin_interrupt_configure+0x1b0>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2712:	68e3      	ldr	r3, [r4, #12]
    2714:	2101      	movs	r1, #1
    2716:	40b1      	lsls	r1, r6
    2718:	4319      	orrs	r1, r3
    271a:	6963      	ldr	r3, [r4, #20]
    271c:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    271e:	2101      	movs	r1, #1
    2720:	40b1      	lsls	r1, r6
    2722:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
    2726:	bf0c      	ite	eq
    2728:	430b      	orreq	r3, r1
    272a:	438b      	bicne	r3, r1
    272c:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    272e:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2730:	4a57      	ldr	r2, [pc, #348]	; (2890 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	struct gpio_nrfx_data *data = get_port_data(port);
    2732:	f8d7 8010 	ldr.w	r8, [r7, #16]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    2736:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
    273a:	bf0c      	ite	eq
    273c:	430b      	orreq	r3, r1
    273e:	438b      	bicne	r3, r1
    2740:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2742:	6923      	ldr	r3, [r4, #16]
    2744:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
    2748:	bf0c      	ite	eq
    274a:	4319      	orreq	r1, r3
    274c:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2750:	687b      	ldr	r3, [r7, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2752:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2754:	7a1b      	ldrb	r3, [r3, #8]
    2756:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
    275a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    275e:	2000      	movs	r0, #0
    2760:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2762:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    2766:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    276a:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    276e:	428d      	cmp	r5, r1
    2770:	d175      	bne.n	285e <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
    2772:	fa23 f100 	lsr.w	r1, r3, r0
    2776:	07c9      	lsls	r1, r1, #31
    2778:	d571      	bpl.n	285e <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    277a:	0083      	lsls	r3, r0, #2
    277c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2780:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2784:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    2788:	f021 0101 	bic.w	r1, r1, #1
    278c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    2790:	2301      	movs	r3, #1
    2792:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    2794:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    2798:	b2c0      	uxtb	r0, r0
    279a:	f000 ff99 	bl	36d0 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    279e:	4628      	mov	r0, r5
    27a0:	2100      	movs	r1, #0
    27a2:	f004 f9bc 	bl	6b1e <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    27a6:	f8d8 000c 	ldr.w	r0, [r8, #12]
    27aa:	40f0      	lsrs	r0, r6
    27ac:	f010 0001 	ands.w	r0, r0, #1
    27b0:	d047      	beq.n	2842 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
    27b2:	f8d8 0014 	ldr.w	r0, [r8, #20]
    27b6:	40f0      	lsrs	r0, r6
    27b8:	f010 0401 	ands.w	r4, r0, #1
    27bc:	d057      	beq.n	286e <gpio_nrfx_pin_interrupt_configure+0x196>
				if (data->double_edge & BIT(pin)) {
    27be:	f8d8 3018 	ldr.w	r3, [r8, #24]
    27c2:	40f3      	lsrs	r3, r6
    27c4:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    27c6:	bf5f      	itttt	pl
    27c8:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
    27cc:	fa21 f606 	lsrpl.w	r6, r1, r6
    27d0:	f006 0601 	andpl.w	r6, r6, #1
    27d4:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    27d8:	a801      	add	r0, sp, #4
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    27da:	bf54      	ite	pl
    27dc:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    27de:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    27e0:	f000 ff98 	bl	3714 <nrfx_gpiote_channel_alloc>
    27e4:	4b2b      	ldr	r3, [pc, #172]	; (2894 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
    27e6:	4298      	cmp	r0, r3
    27e8:	d13e      	bne.n	2868 <gpio_nrfx_pin_interrupt_configure+0x190>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    27ea:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    27ee:	008b      	lsls	r3, r1, #2
    27f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    27f4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    27f8:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    27fa:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    27fe:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    2802:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    2806:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    280a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    280e:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    2812:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    2814:	008a      	lsls	r2, r1, #2
    2816:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    281a:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    281e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2822:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2824:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2828:	6010      	str	r0, [r2, #0]
    282a:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    282c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2830:	f042 0201 	orr.w	r2, r2, #1
    2834:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    2838:	4a15      	ldr	r2, [pc, #84]	; (2890 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    283a:	2301      	movs	r3, #1
    283c:	408b      	lsls	r3, r1
    283e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2842:	b003      	add	sp, #12
    2844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2848:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    284c:	f47f af61 	bne.w	2712 <gpio_nrfx_pin_interrupt_configure+0x3a>
    2850:	2101      	movs	r1, #1
    2852:	fa01 f306 	lsl.w	r3, r1, r6
    2856:	68e1      	ldr	r1, [r4, #12]
    2858:	ea21 0103 	bic.w	r1, r1, r3
    285c:	e75d      	b.n	271a <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    285e:	3001      	adds	r0, #1
    2860:	2808      	cmp	r0, #8
    2862:	f47f af7e 	bne.w	2762 <gpio_nrfx_pin_interrupt_configure+0x8a>
    2866:	e79a      	b.n	279e <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
    2868:	f06f 0012 	mvn.w	r0, #18
    286c:	e7e9      	b.n	2842 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    286e:	f8d8 1010 	ldr.w	r1, [r8, #16]
    2872:	40f1      	lsrs	r1, r6
    2874:	f001 0101 	and.w	r1, r1, #1
    2878:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    287c:	4628      	mov	r0, r5
    287e:	b2c9      	uxtb	r1, r1
    2880:	f004 f94d 	bl	6b1e <nrf_gpio_cfg_sense_set>
	int res = 0;
    2884:	4620      	mov	r0, r4
    2886:	e7dc      	b.n	2842 <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
    2888:	f06f 0085 	mvn.w	r0, #133	; 0x85
    288c:	e7d9      	b.n	2842 <gpio_nrfx_pin_interrupt_configure+0x16a>
    288e:	bf00      	nop
    2890:	40006000 	.word	0x40006000
    2894:	0bad0000 	.word	0x0bad0000

00002898 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2898:	4b2e      	ldr	r3, [pc, #184]	; (2954 <gpio_nrfx_config+0xbc>)
{
    289a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    289c:	4c2e      	ldr	r4, [pc, #184]	; (2958 <gpio_nrfx_config+0xc0>)
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    289e:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    28a0:	4013      	ands	r3, r2
    28a2:	42a3      	cmp	r3, r4
    28a4:	d045      	beq.n	2932 <gpio_nrfx_config+0x9a>
    28a6:	d80e      	bhi.n	28c6 <gpio_nrfx_config+0x2e>
    28a8:	2b06      	cmp	r3, #6
    28aa:	d044      	beq.n	2936 <gpio_nrfx_config+0x9e>
    28ac:	d806      	bhi.n	28bc <gpio_nrfx_config+0x24>
    28ae:	2b00      	cmp	r3, #0
    28b0:	d041      	beq.n	2936 <gpio_nrfx_config+0x9e>
    28b2:	2b02      	cmp	r3, #2
    28b4:	d041      	beq.n	293a <gpio_nrfx_config+0xa2>
    28b6:	f06f 0015 	mvn.w	r0, #21
    28ba:	e038      	b.n	292e <gpio_nrfx_config+0x96>
    28bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    28c0:	d1f9      	bne.n	28b6 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
    28c2:	2401      	movs	r4, #1
    28c4:	e009      	b.n	28da <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    28c6:	4c25      	ldr	r4, [pc, #148]	; (295c <gpio_nrfx_config+0xc4>)
    28c8:	42a3      	cmp	r3, r4
    28ca:	d038      	beq.n	293e <gpio_nrfx_config+0xa6>
    28cc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    28d0:	d037      	beq.n	2942 <gpio_nrfx_config+0xaa>
    28d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    28d6:	d1ee      	bne.n	28b6 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
    28d8:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    28da:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    28dc:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
    28e0:	bf54      	ite	pl
    28e2:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    28e6:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    28e8:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    28ec:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    28ee:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    28f2:	d507      	bpl.n	2904 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    28f4:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    28f6:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    28fa:	d524      	bpl.n	2946 <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
    28fc:	2301      	movs	r3, #1
    28fe:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2900:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    2904:	7a03      	ldrb	r3, [r0, #8]
    2906:	f001 011f 	and.w	r1, r1, #31
    290a:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    290e:	a801      	add	r0, sp, #4
    2910:	9101      	str	r1, [sp, #4]
    2912:	f7ff fe87 	bl	2624 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2916:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2918:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
    291c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    2920:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2924:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    2928:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
    292c:	2000      	movs	r0, #0
}
    292e:	b003      	add	sp, #12
    2930:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    2932:	2407      	movs	r4, #7
    2934:	e7d1      	b.n	28da <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2936:	461c      	mov	r4, r3
    2938:	e7cf      	b.n	28da <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
    293a:	2404      	movs	r4, #4
    293c:	e7cd      	b.n	28da <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
    293e:	2405      	movs	r4, #5
    2940:	e7cb      	b.n	28da <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
    2942:	2403      	movs	r4, #3
    2944:	e7c9      	b.n	28da <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2946:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2948:	bf42      	ittt	mi
    294a:	2301      	movmi	r3, #1
    294c:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
    294e:	f8cc 350c 	strmi.w	r3, [ip, #1292]	; 0x50c
}
    2952:	e7d7      	b.n	2904 <gpio_nrfx_config+0x6c>
    2954:	00f00006 	.word	0x00f00006
    2958:	00100006 	.word	0x00100006
    295c:	00400002 	.word	0x00400002

00002960 <gpiote_event_handler>:
{
    2960:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2962:	2400      	movs	r4, #0
{
    2964:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2966:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    296a:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    296e:	4e26      	ldr	r6, [pc, #152]	; (2a08 <gpiote_event_handler+0xa8>)
    2970:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    2972:	b15d      	cbz	r5, 298c <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    2974:	a902      	add	r1, sp, #8
    2976:	4825      	ldr	r0, [pc, #148]	; (2a0c <gpiote_event_handler+0xac>)
    2978:	f004 f8e4 	bl	6b44 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    297c:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    297e:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    2980:	4823      	ldr	r0, [pc, #140]	; (2a10 <gpiote_event_handler+0xb0>)
    2982:	f004 f8df 	bl	6b44 <check_level_trigger_pins>
		fired_triggers[1] =
    2986:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2988:	6034      	str	r4, [r6, #0]
    298a:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
    298c:	4c21      	ldr	r4, [pc, #132]	; (2a14 <gpiote_event_handler+0xb4>)
{
    298e:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2990:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2992:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    2994:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    2998:	fa06 f102 	lsl.w	r1, r6, r2
    299c:	4219      	tst	r1, r3
    299e:	d01b      	beq.n	29d8 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29a0:	0091      	lsls	r1, r2, #2
    29a2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    29a6:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    29aa:	680b      	ldr	r3, [r1, #0]
    29ac:	b1a3      	cbz	r3, 29d8 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    29ae:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    29b2:	af04      	add	r7, sp, #16
    29b4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    29b8:	f8c1 c000 	str.w	ip, [r1]
    29bc:	f3c3 3040 	ubfx	r0, r3, #13, #1
    29c0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    29c4:	f3c3 2304 	ubfx	r3, r3, #8, #5
    29c8:	f850 7c10 	ldr.w	r7, [r0, #-16]
    29cc:	fa06 f303 	lsl.w	r3, r6, r3
    29d0:	433b      	orrs	r3, r7
    29d2:	f840 3c10 	str.w	r3, [r0, #-16]
    29d6:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    29d8:	3201      	adds	r2, #1
    29da:	2a08      	cmp	r2, #8
    29dc:	d1da      	bne.n	2994 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
    29de:	9a00      	ldr	r2, [sp, #0]
    29e0:	b11a      	cbz	r2, 29ea <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
    29e2:	490a      	ldr	r1, [pc, #40]	; (2a0c <gpiote_event_handler+0xac>)
    29e4:	480c      	ldr	r0, [pc, #48]	; (2a18 <gpiote_event_handler+0xb8>)
    29e6:	f7ff fde3 	bl	25b0 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    29ea:	9a01      	ldr	r2, [sp, #4]
    29ec:	b11a      	cbz	r2, 29f6 <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
    29ee:	4908      	ldr	r1, [pc, #32]	; (2a10 <gpiote_event_handler+0xb0>)
    29f0:	480a      	ldr	r0, [pc, #40]	; (2a1c <gpiote_event_handler+0xbc>)
    29f2:	f7ff fddd 	bl	25b0 <gpio_fire_callbacks>
	if (port_event) {
    29f6:	b12d      	cbz	r5, 2a04 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    29f8:	4804      	ldr	r0, [pc, #16]	; (2a0c <gpiote_event_handler+0xac>)
    29fa:	f004 f8e7 	bl	6bcc <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    29fe:	4804      	ldr	r0, [pc, #16]	; (2a10 <gpiote_event_handler+0xb0>)
    2a00:	f004 f8e4 	bl	6bcc <cfg_level_pins>
}
    2a04:	b005      	add	sp, #20
    2a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a08:	4000617c 	.word	0x4000617c
    2a0c:	000070e8 	.word	0x000070e8
    2a10:	00007100 	.word	0x00007100
    2a14:	40006000 	.word	0x40006000
    2a18:	20000824 	.word	0x20000824
    2a1c:	20000840 	.word	0x20000840

00002a20 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    2a20:	4802      	ldr	r0, [pc, #8]	; (2a2c <pwm_nrfx_get_cycles_per_sec+0xc>)
    2a22:	2100      	movs	r1, #0
    2a24:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    2a28:	2000      	movs	r0, #0
    2a2a:	4770      	bx	lr
    2a2c:	00f42400 	.word	0x00f42400

00002a30 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    2a30:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    2a32:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    2a34:	6912      	ldr	r2, [r2, #16]
{
    2a36:	b538      	push	{r3, r4, r5, lr}
    2a38:	f100 0308 	add.w	r3, r0, #8
    2a3c:	3204      	adds	r2, #4
    2a3e:	f100 040c 	add.w	r4, r0, #12
    2a42:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    2a44:	f913 5b01 	ldrsb.w	r5, [r3], #1
    2a48:	2d00      	cmp	r5, #0
    2a4a:	bfb4      	ite	lt
    2a4c:	2500      	movlt	r5, #0
    2a4e:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    2a52:	42a3      	cmp	r3, r4

		data->current[i] = value;
    2a54:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    2a58:	d1f4      	bne.n	2a44 <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    2a5a:	2300      	movs	r3, #0
    2a5c:	461a      	mov	r2, r3
    2a5e:	f000 ff83 	bl	3968 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    2a62:	4b03      	ldr	r3, [pc, #12]	; (2a70 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    2a64:	4298      	cmp	r0, r3
	}

	return 0;
}
    2a66:	bf14      	ite	ne
    2a68:	f06f 000f 	mvnne.w	r0, #15
    2a6c:	2000      	moveq	r0, #0
    2a6e:	bd38      	pop	{r3, r4, r5, pc}
    2a70:	0bad0000 	.word	0x0bad0000

00002a74 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2a74:	6802      	ldr	r2, [r0, #0]
    switch (port)
    2a76:	0953      	lsrs	r3, r2, #5
{
    2a78:	b510      	push	{r4, lr}
    2a7a:	4604      	mov	r4, r0
    switch (port)
    2a7c:	d02c      	beq.n	2ad8 <nrf_gpio_pin_port_decode+0x64>
    2a7e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    2a80:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2a84:	bf18      	it	ne
    2a86:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    2a88:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2a8c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2a8e:	07db      	lsls	r3, r3, #31
    2a90:	d40b      	bmi.n	2aaa <nrf_gpio_pin_port_decode+0x36>
    2a92:	4914      	ldr	r1, [pc, #80]	; (2ae4 <nrf_gpio_pin_port_decode+0x70>)
    2a94:	4814      	ldr	r0, [pc, #80]	; (2ae8 <nrf_gpio_pin_port_decode+0x74>)
    2a96:	4a15      	ldr	r2, [pc, #84]	; (2aec <nrf_gpio_pin_port_decode+0x78>)
    2a98:	f44f 7305 	mov.w	r3, #532	; 0x214
    2a9c:	f003 ff37 	bl	690e <printk>
    2aa0:	4812      	ldr	r0, [pc, #72]	; (2aec <nrf_gpio_pin_port_decode+0x78>)
    2aa2:	f44f 7105 	mov.w	r1, #532	; 0x214
    2aa6:	f003 fe59 	bl	675c <assert_post_action>
    uint32_t pin_number = *p_pin;
    2aaa:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2aac:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ab0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    2ab2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ab4:	d00d      	beq.n	2ad2 <nrf_gpio_pin_port_decode+0x5e>
    2ab6:	2b01      	cmp	r3, #1
    2ab8:	d011      	beq.n	2ade <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    2aba:	490d      	ldr	r1, [pc, #52]	; (2af0 <nrf_gpio_pin_port_decode+0x7c>)
    2abc:	480a      	ldr	r0, [pc, #40]	; (2ae8 <nrf_gpio_pin_port_decode+0x74>)
    2abe:	4a0b      	ldr	r2, [pc, #44]	; (2aec <nrf_gpio_pin_port_decode+0x78>)
    2ac0:	f240 2319 	movw	r3, #537	; 0x219
    2ac4:	f003 ff23 	bl	690e <printk>
    2ac8:	4808      	ldr	r0, [pc, #32]	; (2aec <nrf_gpio_pin_port_decode+0x78>)
    2aca:	f240 2119 	movw	r1, #537	; 0x219
    2ace:	f003 fe45 	bl	675c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ad2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    2ad6:	bd10      	pop	{r4, pc}
    switch (port)
    2ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2adc:	e7d4      	b.n	2a88 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    2ade:	4805      	ldr	r0, [pc, #20]	; (2af4 <nrf_gpio_pin_port_decode+0x80>)
    2ae0:	e7f9      	b.n	2ad6 <nrf_gpio_pin_port_decode+0x62>
    2ae2:	bf00      	nop
    2ae4:	00007dbe 	.word	0x00007dbe
    2ae8:	00007610 	.word	0x00007610
    2aec:	00007d8b 	.word	0x00007d8b
    2af0:	00007f38 	.word	0x00007f38
    2af4:	50000300 	.word	0x50000300

00002af8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2af8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2afa:	794b      	ldrb	r3, [r1, #5]
    2afc:	2b01      	cmp	r3, #1
    2afe:	d02a      	beq.n	2b56 <uarte_nrfx_configure+0x5e>
    2b00:	2b03      	cmp	r3, #3
    2b02:	d125      	bne.n	2b50 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2b04:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2b06:	798b      	ldrb	r3, [r1, #6]
    2b08:	2b03      	cmp	r3, #3
    2b0a:	d121      	bne.n	2b50 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2b0c:	79cc      	ldrb	r4, [r1, #7]
    2b0e:	b12c      	cbz	r4, 2b1c <uarte_nrfx_configure+0x24>
    2b10:	2c01      	cmp	r4, #1
    2b12:	d11d      	bne.n	2b50 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    2b14:	6843      	ldr	r3, [r0, #4]
    2b16:	685b      	ldr	r3, [r3, #4]
    2b18:	079b      	lsls	r3, r3, #30
    2b1a:	d019      	beq.n	2b50 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2b1c:	790a      	ldrb	r2, [r1, #4]
    2b1e:	b112      	cbz	r2, 2b26 <uarte_nrfx_configure+0x2e>
    2b20:	2a02      	cmp	r2, #2
    2b22:	d115      	bne.n	2b50 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2b24:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2b26:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2b28:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2b2a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2b2e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2b30:	d065      	beq.n	2bfe <uarte_nrfx_configure+0x106>
    2b32:	d82d      	bhi.n	2b90 <uarte_nrfx_configure+0x98>
    2b34:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2b38:	d064      	beq.n	2c04 <uarte_nrfx_configure+0x10c>
    2b3a:	d816      	bhi.n	2b6a <uarte_nrfx_configure+0x72>
    2b3c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2b40:	d062      	beq.n	2c08 <uarte_nrfx_configure+0x110>
    2b42:	d80a      	bhi.n	2b5a <uarte_nrfx_configure+0x62>
    2b44:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2b48:	d061      	beq.n	2c0e <uarte_nrfx_configure+0x116>
    2b4a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2b4e:	d061      	beq.n	2c14 <uarte_nrfx_configure+0x11c>
    2b50:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2b54:	e052      	b.n	2bfc <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    2b56:	2600      	movs	r6, #0
    2b58:	e7d5      	b.n	2b06 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2b5a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2b5e:	d05c      	beq.n	2c1a <uarte_nrfx_configure+0x122>
    2b60:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2b64:	d1f4      	bne.n	2b50 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2b66:	4b37      	ldr	r3, [pc, #220]	; (2c44 <uarte_nrfx_configure+0x14c>)
    2b68:	e03c      	b.n	2be4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2b6a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2b6e:	d057      	beq.n	2c20 <uarte_nrfx_configure+0x128>
    2b70:	d807      	bhi.n	2b82 <uarte_nrfx_configure+0x8a>
    2b72:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2b76:	d055      	beq.n	2c24 <uarte_nrfx_configure+0x12c>
    2b78:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2b7c:	d1e8      	bne.n	2b50 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2b7e:	4b32      	ldr	r3, [pc, #200]	; (2c48 <uarte_nrfx_configure+0x150>)
    2b80:	e030      	b.n	2be4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2b82:	f647 2712 	movw	r7, #31250	; 0x7a12
    2b86:	42bb      	cmp	r3, r7
    2b88:	d1e2      	bne.n	2b50 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2b8a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2b8e:	e029      	b.n	2be4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2b90:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2b94:	d048      	beq.n	2c28 <uarte_nrfx_configure+0x130>
    2b96:	d813      	bhi.n	2bc0 <uarte_nrfx_configure+0xc8>
    2b98:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2b9c:	d047      	beq.n	2c2e <uarte_nrfx_configure+0x136>
    2b9e:	d809      	bhi.n	2bb4 <uarte_nrfx_configure+0xbc>
    2ba0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2ba4:	42bb      	cmp	r3, r7
    2ba6:	d044      	beq.n	2c32 <uarte_nrfx_configure+0x13a>
    2ba8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2bac:	d1d0      	bne.n	2b50 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2bae:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2bb2:	e017      	b.n	2be4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2bb4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2bb8:	d1ca      	bne.n	2b50 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2bba:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2bbe:	e011      	b.n	2be4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2bc0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2bc4:	d038      	beq.n	2c38 <uarte_nrfx_configure+0x140>
    2bc6:	d808      	bhi.n	2bda <uarte_nrfx_configure+0xe2>
    2bc8:	4f20      	ldr	r7, [pc, #128]	; (2c4c <uarte_nrfx_configure+0x154>)
    2bca:	42bb      	cmp	r3, r7
    2bcc:	d037      	beq.n	2c3e <uarte_nrfx_configure+0x146>
    2bce:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2bd2:	d1bd      	bne.n	2b50 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2bd4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2bd8:	e004      	b.n	2be4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2bda:	4f1d      	ldr	r7, [pc, #116]	; (2c50 <uarte_nrfx_configure+0x158>)
    2bdc:	42bb      	cmp	r3, r7
    2bde:	d1b7      	bne.n	2b50 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2be4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2be8:	6903      	ldr	r3, [r0, #16]
    2bea:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2bec:	4334      	orrs	r4, r6
    2bee:	4322      	orrs	r2, r4
    2bf0:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2bf2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2bf6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2bfa:	2000      	movs	r0, #0
}
    2bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2bfe:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2c02:	e7ef      	b.n	2be4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2c04:	4b13      	ldr	r3, [pc, #76]	; (2c54 <uarte_nrfx_configure+0x15c>)
    2c06:	e7ed      	b.n	2be4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2c08:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2c0c:	e7ea      	b.n	2be4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    2c0e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2c12:	e7e7      	b.n	2be4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2c14:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2c18:	e7e4      	b.n	2be4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2c1a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2c1e:	e7e1      	b.n	2be4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2c20:	4b0d      	ldr	r3, [pc, #52]	; (2c58 <uarte_nrfx_configure+0x160>)
    2c22:	e7df      	b.n	2be4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2c24:	4b0d      	ldr	r3, [pc, #52]	; (2c5c <uarte_nrfx_configure+0x164>)
    2c26:	e7dd      	b.n	2be4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2c28:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2c2c:	e7da      	b.n	2be4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2c2e:	4b0c      	ldr	r3, [pc, #48]	; (2c60 <uarte_nrfx_configure+0x168>)
    2c30:	e7d8      	b.n	2be4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2c32:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2c36:	e7d5      	b.n	2be4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2c38:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2c3c:	e7d2      	b.n	2be4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2c3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2c42:	e7cf      	b.n	2be4 <uarte_nrfx_configure+0xec>
    2c44:	0013b000 	.word	0x0013b000
    2c48:	004ea000 	.word	0x004ea000
    2c4c:	0003d090 	.word	0x0003d090
    2c50:	000f4240 	.word	0x000f4240
    2c54:	00275000 	.word	0x00275000
    2c58:	0075c000 	.word	0x0075c000
    2c5c:	003af000 	.word	0x003af000
    2c60:	013a9000 	.word	0x013a9000

00002c64 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2c64:	6802      	ldr	r2, [r0, #0]
    switch (port)
    2c66:	0953      	lsrs	r3, r2, #5
{
    2c68:	b510      	push	{r4, lr}
    2c6a:	4604      	mov	r4, r0
    switch (port)
    2c6c:	d02c      	beq.n	2cc8 <nrf_gpio_pin_port_decode+0x64>
    2c6e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    2c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c74:	bf18      	it	ne
    2c76:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    2c78:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2c7c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2c7e:	07db      	lsls	r3, r3, #31
    2c80:	d40b      	bmi.n	2c9a <nrf_gpio_pin_port_decode+0x36>
    2c82:	4914      	ldr	r1, [pc, #80]	; (2cd4 <nrf_gpio_pin_port_decode+0x70>)
    2c84:	4814      	ldr	r0, [pc, #80]	; (2cd8 <nrf_gpio_pin_port_decode+0x74>)
    2c86:	4a15      	ldr	r2, [pc, #84]	; (2cdc <nrf_gpio_pin_port_decode+0x78>)
    2c88:	f44f 7305 	mov.w	r3, #532	; 0x214
    2c8c:	f003 fe3f 	bl	690e <printk>
    2c90:	4812      	ldr	r0, [pc, #72]	; (2cdc <nrf_gpio_pin_port_decode+0x78>)
    2c92:	f44f 7105 	mov.w	r1, #532	; 0x214
    2c96:	f003 fd61 	bl	675c <assert_post_action>
    uint32_t pin_number = *p_pin;
    2c9a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2c9c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ca0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    2ca2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ca4:	d00d      	beq.n	2cc2 <nrf_gpio_pin_port_decode+0x5e>
    2ca6:	2b01      	cmp	r3, #1
    2ca8:	d011      	beq.n	2cce <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    2caa:	490d      	ldr	r1, [pc, #52]	; (2ce0 <nrf_gpio_pin_port_decode+0x7c>)
    2cac:	480a      	ldr	r0, [pc, #40]	; (2cd8 <nrf_gpio_pin_port_decode+0x74>)
    2cae:	4a0b      	ldr	r2, [pc, #44]	; (2cdc <nrf_gpio_pin_port_decode+0x78>)
    2cb0:	f240 2319 	movw	r3, #537	; 0x219
    2cb4:	f003 fe2b 	bl	690e <printk>
    2cb8:	4808      	ldr	r0, [pc, #32]	; (2cdc <nrf_gpio_pin_port_decode+0x78>)
    2cba:	f240 2119 	movw	r1, #537	; 0x219
    2cbe:	f003 fd4d 	bl	675c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2cc2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    2cc6:	bd10      	pop	{r4, pc}
    switch (port)
    2cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2ccc:	e7d4      	b.n	2c78 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    2cce:	4805      	ldr	r0, [pc, #20]	; (2ce4 <nrf_gpio_pin_port_decode+0x80>)
    2cd0:	e7f9      	b.n	2cc6 <nrf_gpio_pin_port_decode+0x62>
    2cd2:	bf00      	nop
    2cd4:	00007dbe 	.word	0x00007dbe
    2cd8:	00007610 	.word	0x00007610
    2cdc:	00007d8b 	.word	0x00007d8b
    2ce0:	00007f38 	.word	0x00007f38
    2ce4:	50000300 	.word	0x50000300

00002ce8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2cea:	6906      	ldr	r6, [r0, #16]
{
    2cec:	4605      	mov	r5, r0
    2cee:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2cf0:	f004 f980 	bl	6ff4 <k_is_in_isr>
    2cf4:	b910      	cbnz	r0, 2cfc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2cf6:	4b2c      	ldr	r3, [pc, #176]	; (2da8 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    2cf8:	781b      	ldrb	r3, [r3, #0]
    2cfa:	b983      	cbnz	r3, 2d1e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2cfc:	f04f 0320 	mov.w	r3, #32
    2d00:	f3ef 8411 	mrs	r4, BASEPRI
    2d04:	f383 8812 	msr	BASEPRI_MAX, r3
    2d08:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2d0c:	4628      	mov	r0, r5
    2d0e:	f004 f899 	bl	6e44 <is_tx_ready>
    2d12:	bb28      	cbnz	r0, 2d60 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2d14:	f384 8811 	msr	BASEPRI, r4
    2d18:	f3bf 8f6f 	isb	sy
}
    2d1c:	e7ee      	b.n	2cfc <uarte_nrfx_poll_out+0x14>
{
    2d1e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2d20:	4628      	mov	r0, r5
    2d22:	f004 f88f 	bl	6e44 <is_tx_ready>
    2d26:	b970      	cbnz	r0, 2d46 <uarte_nrfx_poll_out+0x5e>
    2d28:	2001      	movs	r0, #1
    2d2a:	f004 f8e2 	bl	6ef2 <nrfx_busy_wait>
    2d2e:	3c01      	subs	r4, #1
    2d30:	d1f6      	bne.n	2d20 <uarte_nrfx_poll_out+0x38>
    2d32:	2100      	movs	r1, #0
    2d34:	2021      	movs	r0, #33	; 0x21
    2d36:	f002 fd11 	bl	575c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2d3a:	e7f0      	b.n	2d1e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2d3c:	f384 8811 	msr	BASEPRI, r4
    2d40:	f3bf 8f6f 	isb	sy
}
    2d44:	e7f5      	b.n	2d32 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    2d46:	f04f 0320 	mov.w	r3, #32
    2d4a:	f3ef 8411 	mrs	r4, BASEPRI
    2d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    2d52:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2d56:	4628      	mov	r0, r5
    2d58:	f004 f874 	bl	6e44 <is_tx_ready>
    2d5c:	2800      	cmp	r0, #0
    2d5e:	d0ed      	beq.n	2d3c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2d60:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2d64:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    2d66:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2d68:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2d6a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2d6e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d72:	2200      	movs	r2, #0
    2d74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2d78:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2d7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2d80:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2d84:	684a      	ldr	r2, [r1, #4]
    2d86:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2d88:	bf41      	itttt	mi
    2d8a:	2208      	movmi	r2, #8
    2d8c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2d90:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2d94:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d98:	2201      	movs	r2, #1
    2d9a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2d9c:	f384 8811 	msr	BASEPRI, r4
    2da0:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    2da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2da6:	bf00      	nop
    2da8:	20000e06 	.word	0x20000e06

00002dac <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2dac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2db0:	6845      	ldr	r5, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2db2:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2db4:	682c      	ldr	r4, [r5, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2db6:	2300      	movs	r3, #0
    2db8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    2dbc:	4607      	mov	r7, r0
    2dbe:	68ab      	ldr	r3, [r5, #8]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    2dc0:	6030      	str	r0, [r6, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2dc2:	a801      	add	r0, sp, #4
    2dc4:	9301      	str	r3, [sp, #4]
    2dc6:	f7ff ff4d 	bl	2c64 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2dca:	9a01      	ldr	r2, [sp, #4]
    2dcc:	2301      	movs	r3, #1
    2dce:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    2dd0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    2dd4:	68ab      	ldr	r3, [r5, #8]
    2dd6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2dd8:	a801      	add	r0, sp, #4
    2dda:	f7ff ff43 	bl	2c64 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2dde:	9b01      	ldr	r3, [sp, #4]
    2de0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2de4:	2203      	movs	r2, #3
    2de6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
	nrf_gpio_cfg_output(cfg->pseltxd);

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    2dea:	68eb      	ldr	r3, [r5, #12]
    2dec:	1c59      	adds	r1, r3, #1
    2dee:	d00c      	beq.n	2e0a <uarte_instance_init.isra.0+0x5e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2df0:	a801      	add	r0, sp, #4
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    2df2:	f895 8018 	ldrb.w	r8, [r5, #24]
    nrf_gpio_cfg(
    2df6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2df8:	f7ff ff34 	bl	2c64 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2dfc:	9b01      	ldr	r3, [sp, #4]
    2dfe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2e02:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    2e06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    2e0a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
    2e0e:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2e12:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    2e16:	692b      	ldr	r3, [r5, #16]
    2e18:	1c5a      	adds	r2, r3, #1
    2e1a:	d00c      	beq.n	2e36 <uarte_instance_init.isra.0+0x8a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2e1c:	a801      	add	r0, sp, #4
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    2e1e:	f895 8019 	ldrb.w	r8, [r5, #25]
    nrf_gpio_cfg(
    2e22:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2e24:	f7ff ff1e 	bl	2c64 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2e28:	9b01      	ldr	r3, [sp, #4]
    2e2a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2e2e:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    2e32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    2e36:	696b      	ldr	r3, [r5, #20]
    2e38:	1c58      	adds	r0, r3, #1
    2e3a:	d013      	beq.n	2e64 <uarte_instance_init.isra.0+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2e3c:	a801      	add	r0, sp, #4
    2e3e:	9301      	str	r3, [sp, #4]
    2e40:	f7ff ff10 	bl	2c64 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2e44:	9a01      	ldr	r2, [sp, #4]
    2e46:	2301      	movs	r3, #1
    2e48:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    2e4a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    2e4e:	696b      	ldr	r3, [r5, #20]
    2e50:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2e52:	a801      	add	r0, sp, #4
    2e54:	f7ff ff06 	bl	2c64 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2e58:	9b01      	ldr	r3, [sp, #4]
    2e5a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2e5e:	2203      	movs	r2, #3
    2e60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    2e64:	e9d5 3204 	ldrd	r3, r2, [r5, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2e68:	6939      	ldr	r1, [r7, #16]
    p_reg->PSEL.RTS = pselrts;
    2e6a:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    2e6e:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
    2e70:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    2e74:	3104      	adds	r1, #4
    2e76:	f7ff fe3f 	bl	2af8 <uarte_nrfx_configure>
	if (err) {
    2e7a:	4607      	mov	r7, r0
    2e7c:	2800      	cmp	r0, #0
    2e7e:	d145      	bne.n	2f0c <uarte_instance_init.isra.0+0x160>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2e80:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2e82:	0719      	lsls	r1, r3, #28
    2e84:	d519      	bpl.n	2eba <uarte_instance_init.isra.0+0x10e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2e86:	f106 0012 	add.w	r0, r6, #18
    2e8a:	f000 fc7b 	bl	3784 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2e8e:	4b23      	ldr	r3, [pc, #140]	; (2f1c <uarte_instance_init.isra.0+0x170>)
    2e90:	4298      	cmp	r0, r3
    2e92:	d13f      	bne.n	2f14 <uarte_instance_init.isra.0+0x168>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2e94:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2e96:	00c3      	lsls	r3, r0, #3
    2e98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2e9c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2ea0:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2ea4:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2ea8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2eac:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2eb0:	4a1b      	ldr	r2, [pc, #108]	; (2f20 <uarte_instance_init.isra.0+0x174>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2eb2:	2301      	movs	r3, #1
    2eb4:	4083      	lsls	r3, r0
    2eb6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2eba:	2308      	movs	r3, #8
    2ebc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    2ec0:	68eb      	ldr	r3, [r5, #12]
    2ec2:	3301      	adds	r3, #1
    2ec4:	d00c      	beq.n	2ee0 <uarte_instance_init.isra.0+0x134>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ec6:	2300      	movs	r3, #0
    2ec8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2ecc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2ed0:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2ed4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2ed8:	2301      	movs	r3, #1
    2eda:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ede:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2ee0:	686b      	ldr	r3, [r5, #4]
    2ee2:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    2ee4:	bf5c      	itt	pl
    2ee6:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2eea:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2eee:	06db      	lsls	r3, r3, #27
    2ef0:	bf44      	itt	mi
    2ef2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2ef6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2efa:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    2efc:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2efe:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2f02:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f06:	2301      	movs	r3, #1
    2f08:	60a3      	str	r3, [r4, #8]
    2f0a:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2f0c:	4638      	mov	r0, r7
    2f0e:	b002      	add	sp, #8
    2f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    2f14:	f06f 0704 	mvn.w	r7, #4
    2f18:	e7f8      	b.n	2f0c <uarte_instance_init.isra.0+0x160>
    2f1a:	bf00      	nop
    2f1c:	0bad0000 	.word	0x0bad0000
    2f20:	4001f000 	.word	0x4001f000

00002f24 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f24:	4919      	ldr	r1, [pc, #100]	; (2f8c <sys_clock_timeout_handler+0x68>)
{
    2f26:	b570      	push	{r4, r5, r6, lr}
    2f28:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2f2a:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f2e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2f30:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2f34:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f38:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2f3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2f3e:	f04f 0500 	mov.w	r5, #0
    2f42:	d20a      	bcs.n	2f5a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2f44:	4b12      	ldr	r3, [pc, #72]	; (2f90 <sys_clock_timeout_handler+0x6c>)
    2f46:	6819      	ldr	r1, [r3, #0]
    2f48:	060a      	lsls	r2, r1, #24
    2f4a:	0a0b      	lsrs	r3, r1, #8
    2f4c:	1992      	adds	r2, r2, r6
    2f4e:	4911      	ldr	r1, [pc, #68]	; (2f94 <sys_clock_timeout_handler+0x70>)
    2f50:	f143 0300 	adc.w	r3, r3, #0
    2f54:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    2f58:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2f5a:	f003 f8dd 	bl	6118 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    2f5e:	00a3      	lsls	r3, r4, #2
    2f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2f64:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2f68:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2f6c:	42b2      	cmp	r2, r6
    2f6e:	d10b      	bne.n	2f88 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2f70:	b91d      	cbnz	r5, 2f7a <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    2f72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2f76:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2f7a:	4b07      	ldr	r3, [pc, #28]	; (2f98 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2f7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2f80:	fa00 f404 	lsl.w	r4, r0, r4
    2f84:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2f88:	bd70      	pop	{r4, r5, r6, pc}
    2f8a:	bf00      	nop
    2f8c:	20000148 	.word	0x20000148
    2f90:	20000870 	.word	0x20000870
    2f94:	20000130 	.word	0x20000130
    2f98:	40011000 	.word	0x40011000

00002f9c <compare_int_lock>:
{
    2f9c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2f9e:	2301      	movs	r3, #1
    2fa0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2fa2:	4a11      	ldr	r2, [pc, #68]	; (2fe8 <compare_int_lock+0x4c>)
    2fa4:	f3bf 8f5b 	dmb	ish
    2fa8:	43dc      	mvns	r4, r3
    2faa:	e852 1f00 	ldrex	r1, [r2]
    2fae:	ea01 0c04 	and.w	ip, r1, r4
    2fb2:	e842 ce00 	strex	lr, ip, [r2]
    2fb6:	f1be 0f00 	cmp.w	lr, #0
    2fba:	d1f6      	bne.n	2faa <compare_int_lock+0xe>
    2fbc:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2fc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2fc4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    2fc8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2fcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2fd0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2fd4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fd8:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    2fdc:	420b      	tst	r3, r1
}
    2fde:	bf14      	ite	ne
    2fe0:	2001      	movne	r0, #1
    2fe2:	2000      	moveq	r0, #0
    2fe4:	bd10      	pop	{r4, pc}
    2fe6:	bf00      	nop
    2fe8:	2000086c 	.word	0x2000086c

00002fec <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    2fec:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2fee:	4a12      	ldr	r2, [pc, #72]	; (3038 <compare_int_unlock.part.0+0x4c>)
    2ff0:	f3bf 8f5b 	dmb	ish
    2ff4:	4083      	lsls	r3, r0
    2ff6:	e852 1f00 	ldrex	r1, [r2]
    2ffa:	4319      	orrs	r1, r3
    2ffc:	e842 1c00 	strex	ip, r1, [r2]
    3000:	f1bc 0f00 	cmp.w	ip, #0
    3004:	d1f7      	bne.n	2ff6 <compare_int_unlock.part.0+0xa>
    3006:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    300a:	4a0c      	ldr	r2, [pc, #48]	; (303c <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    300c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3010:	4083      	lsls	r3, r0
    3012:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3016:	4b0a      	ldr	r3, [pc, #40]	; (3040 <compare_int_unlock.part.0+0x54>)
    3018:	f3bf 8f5b 	dmb	ish
    301c:	681b      	ldr	r3, [r3, #0]
    301e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3022:	fa23 f000 	lsr.w	r0, r3, r0
    3026:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3028:	bf42      	ittt	mi
    302a:	4b06      	ldrmi	r3, [pc, #24]	; (3044 <compare_int_unlock.part.0+0x58>)
    302c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3030:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3034:	4770      	bx	lr
    3036:	bf00      	nop
    3038:	2000086c 	.word	0x2000086c
    303c:	40011000 	.word	0x40011000
    3040:	20000868 	.word	0x20000868
    3044:	e000e100 	.word	0xe000e100

00003048 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3048:	4b0d      	ldr	r3, [pc, #52]	; (3080 <z_nrf_rtc_timer_read+0x38>)
    304a:	681b      	ldr	r3, [r3, #0]
    304c:	0a19      	lsrs	r1, r3, #8
    304e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3050:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3054:	4b0b      	ldr	r3, [pc, #44]	; (3084 <z_nrf_rtc_timer_read+0x3c>)
    3056:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    305a:	18c0      	adds	r0, r0, r3
    305c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3064:	d20a      	bcs.n	307c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3066:	4b08      	ldr	r3, [pc, #32]	; (3088 <z_nrf_rtc_timer_read+0x40>)
    3068:	e9d3 2300 	ldrd	r2, r3, [r3]
    306c:	4299      	cmp	r1, r3
    306e:	bf08      	it	eq
    3070:	4290      	cmpeq	r0, r2
    3072:	d203      	bcs.n	307c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3074:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3078:	f141 0100 	adc.w	r1, r1, #0
}
    307c:	4770      	bx	lr
    307e:	bf00      	nop
    3080:	20000870 	.word	0x20000870
    3084:	40011000 	.word	0x40011000
    3088:	20000130 	.word	0x20000130

0000308c <compare_set>:
{
    308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3090:	b085      	sub	sp, #20
    3092:	4616      	mov	r6, r2
    3094:	461f      	mov	r7, r3
    3096:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3098:	f7ff ff80 	bl	2f9c <compare_int_lock>
    309c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    309e:	f7ff ffd3 	bl	3048 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    30a2:	42b9      	cmp	r1, r7
    30a4:	bf08      	it	eq
    30a6:	42b0      	cmpeq	r0, r6
    30a8:	d27f      	bcs.n	31aa <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    30aa:	ebb6 0800 	subs.w	r8, r6, r0
    30ae:	eb67 0901 	sbc.w	r9, r7, r1
    30b2:	2300      	movs	r3, #0
    30b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    30b8:	454b      	cmp	r3, r9
    30ba:	bf08      	it	eq
    30bc:	4542      	cmpeq	r2, r8
    30be:	f0c0 8085 	bcc.w	31cc <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    30c2:	4b44      	ldr	r3, [pc, #272]	; (31d4 <compare_set+0x148>)
    30c4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    30c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    30cc:	429f      	cmp	r7, r3
    30ce:	bf08      	it	eq
    30d0:	4296      	cmpeq	r6, r2
    30d2:	d054      	beq.n	317e <compare_set+0xf2>
    30d4:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    30d8:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    30dc:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    30e0:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    30e4:	fa0b f205 	lsl.w	r2, fp, r5
    30e8:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    30ec:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    30f0:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    30f4:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    30f6:	4a38      	ldr	r2, [pc, #224]	; (31d8 <compare_set+0x14c>)
    return p_reg->CC[ch];
    30f8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    30fc:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3100:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    3104:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3108:	461c      	mov	r4, r3
    310a:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    310c:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3110:	eba0 000a 	sub.w	r0, r0, sl
    3114:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3118:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    311c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    311e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    3122:	d105      	bne.n	3130 <compare_set+0xa4>
    3124:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    3126:	2013      	movs	r0, #19
    3128:	f003 ff6e 	bl	7008 <z_impl_k_busy_wait>
    312c:	4a2a      	ldr	r2, [pc, #168]	; (31d8 <compare_set+0x14c>)
    312e:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    3130:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3132:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3136:	eba4 000c 	sub.w	r0, r4, ip
    313a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    313e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3142:	bf88      	it	hi
    3144:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3146:	2000      	movs	r0, #0
    3148:	f8c8 0000 	str.w	r0, [r8]
    314c:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    3150:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3154:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3158:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    315c:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3160:	4582      	cmp	sl, r0
    3162:	d006      	beq.n	3172 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    3164:	1a20      	subs	r0, r4, r0
    3166:	3802      	subs	r0, #2
    3168:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    316c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3170:	d819      	bhi.n	31a6 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    3172:	1ae4      	subs	r4, r4, r3
    3174:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3178:	1932      	adds	r2, r6, r4
    317a:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    317e:	4c15      	ldr	r4, [pc, #84]	; (31d4 <compare_set+0x148>)
    3180:	0129      	lsls	r1, r5, #4
    3182:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    3186:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    318a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    318c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    318e:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    3190:	6043      	str	r3, [r0, #4]
	return ret;
    3192:	2400      	movs	r4, #0
	if (key) {
    3194:	9b01      	ldr	r3, [sp, #4]
    3196:	b113      	cbz	r3, 319e <compare_set+0x112>
    3198:	4628      	mov	r0, r5
    319a:	f7ff ff27 	bl	2fec <compare_int_unlock.part.0>
}
    319e:	4620      	mov	r0, r4
    31a0:	b005      	add	sp, #20
    31a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31a6:	4620      	mov	r0, r4
    31a8:	e7b0      	b.n	310c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    31aa:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    31ac:	4a0b      	ldr	r2, [pc, #44]	; (31dc <compare_set+0x150>)
    31ae:	f3bf 8f5b 	dmb	ish
    31b2:	40ab      	lsls	r3, r5
    31b4:	e852 1f00 	ldrex	r1, [r2]
    31b8:	4319      	orrs	r1, r3
    31ba:	e842 1000 	strex	r0, r1, [r2]
    31be:	2800      	cmp	r0, #0
    31c0:	d1f8      	bne.n	31b4 <compare_set+0x128>
    31c2:	f3bf 8f5b 	dmb	ish
    31c6:	4632      	mov	r2, r6
    31c8:	463b      	mov	r3, r7
    31ca:	e7d8      	b.n	317e <compare_set+0xf2>
			return -EINVAL;
    31cc:	f06f 0415 	mvn.w	r4, #21
    31d0:	e7e0      	b.n	3194 <compare_set+0x108>
    31d2:	bf00      	nop
    31d4:	20000138 	.word	0x20000138
    31d8:	40011000 	.word	0x40011000
    31dc:	20000868 	.word	0x20000868

000031e0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    31e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    31e4:	4c34      	ldr	r4, [pc, #208]	; (32b8 <rtc_nrf_isr+0xd8>)
    31e6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    31ea:	079a      	lsls	r2, r3, #30
    31ec:	d509      	bpl.n	3202 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    31ee:	4b33      	ldr	r3, [pc, #204]	; (32bc <rtc_nrf_isr+0xdc>)
    31f0:	681a      	ldr	r2, [r3, #0]
    31f2:	b132      	cbz	r2, 3202 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    31f4:	2200      	movs	r2, #0
    31f6:	601a      	str	r2, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    31f8:	4a31      	ldr	r2, [pc, #196]	; (32c0 <rtc_nrf_isr+0xe0>)
    31fa:	681b      	ldr	r3, [r3, #0]
    31fc:	6813      	ldr	r3, [r2, #0]
    31fe:	3301      	adds	r3, #1
    3200:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3202:	f04f 0320 	mov.w	r3, #32
    3206:	f3ef 8211 	mrs	r2, BASEPRI
    320a:	f383 8812 	msr	BASEPRI_MAX, r3
    320e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3212:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3216:	03db      	lsls	r3, r3, #15
    3218:	d512      	bpl.n	3240 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    321a:	f3bf 8f5b 	dmb	ish
    321e:	4b29      	ldr	r3, [pc, #164]	; (32c4 <rtc_nrf_isr+0xe4>)
    3220:	e853 1f00 	ldrex	r1, [r3]
    3224:	f021 0001 	bic.w	r0, r1, #1
    3228:	e843 0600 	strex	r6, r0, [r3]
    322c:	2e00      	cmp	r6, #0
    322e:	d1f7      	bne.n	3220 <rtc_nrf_isr+0x40>
    3230:	f3bf 8f5b 	dmb	ish
    3234:	4b24      	ldr	r3, [pc, #144]	; (32c8 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3236:	2900      	cmp	r1, #0
    3238:	d136      	bne.n	32a8 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    323a:	6819      	ldr	r1, [r3, #0]
		if (result) {
    323c:	2900      	cmp	r1, #0
    323e:	d133      	bne.n	32a8 <rtc_nrf_isr+0xc8>
{
    3240:	2300      	movs	r3, #0
	__asm__ volatile(
    3242:	f382 8811 	msr	BASEPRI, r2
    3246:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    324a:	b353      	cbz	r3, 32a2 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    324c:	f7ff fefc 	bl	3048 <z_nrf_rtc_timer_read>
    3250:	4606      	mov	r6, r0
	__asm__ volatile(
    3252:	f04f 0320 	mov.w	r3, #32
    3256:	f3ef 8011 	mrs	r0, BASEPRI
    325a:	f383 8812 	msr	BASEPRI_MAX, r3
    325e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3262:	4b1a      	ldr	r3, [pc, #104]	; (32cc <rtc_nrf_isr+0xec>)
    3264:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    3268:	4549      	cmp	r1, r9
    326a:	bf08      	it	eq
    326c:	4546      	cmpeq	r6, r8
    326e:	f04f 0200 	mov.w	r2, #0
    3272:	d31e      	bcc.n	32b2 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3274:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    3278:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    327c:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3280:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    3284:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    328a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    328e:	f380 8811 	msr	BASEPRI, r0
    3292:	f3bf 8f6f 	isb	sy
		if (handler) {
    3296:	b121      	cbz	r1, 32a2 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    3298:	9500      	str	r5, [sp, #0]
    329a:	4642      	mov	r2, r8
    329c:	464b      	mov	r3, r9
    329e:	2000      	movs	r0, #0
    32a0:	4788      	blx	r1
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
    32a2:	b003      	add	sp, #12
    32a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    32a8:	2100      	movs	r1, #0
    32aa:	6019      	str	r1, [r3, #0]
    32ac:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    32ae:	2301      	movs	r3, #1
}
    32b0:	e7c7      	b.n	3242 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    32b2:	4611      	mov	r1, r2
    32b4:	e7eb      	b.n	328e <rtc_nrf_isr+0xae>
    32b6:	bf00      	nop
    32b8:	40011000 	.word	0x40011000
    32bc:	40011104 	.word	0x40011104
    32c0:	20000870 	.word	0x20000870
    32c4:	20000868 	.word	0x20000868
    32c8:	40011140 	.word	0x40011140
    32cc:	20000138 	.word	0x20000138

000032d0 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    32d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    32d2:	4b1a      	ldr	r3, [pc, #104]	; (333c <sys_clock_driver_init+0x6c>)
    p_reg->PRESCALER = val;
    32d4:	4d1a      	ldr	r5, [pc, #104]	; (3340 <sys_clock_driver_init+0x70>)
    32d6:	2400      	movs	r4, #0
    32d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    32e0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    32e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    32e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    32ec:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    32f0:	4b14      	ldr	r3, [pc, #80]	; (3344 <sys_clock_driver_init+0x74>)
    32f2:	2602      	movs	r6, #2
    32f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    32f8:	2101      	movs	r1, #1
    32fa:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    32fe:	2011      	movs	r0, #17
    3300:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3304:	4622      	mov	r2, r4
    3306:	f7fe faab 	bl	1860 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    330a:	2011      	movs	r0, #17
    330c:	f7fe fa8a 	bl	1824 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3310:	4a0d      	ldr	r2, [pc, #52]	; (3348 <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
    3312:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3316:	2301      	movs	r3, #1
    3318:	6013      	str	r3, [r2, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    331a:	4a0c      	ldr	r2, [pc, #48]	; (334c <sys_clock_driver_init+0x7c>)
    331c:	602b      	str	r3, [r5, #0]
    331e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3320:	4b0b      	ldr	r3, [pc, #44]	; (3350 <sys_clock_driver_init+0x80>)
    3322:	4a0c      	ldr	r2, [pc, #48]	; (3354 <sys_clock_driver_init+0x84>)
    3324:	9300      	str	r3, [sp, #0]
    3326:	9401      	str	r4, [sp, #4]
    3328:	2300      	movs	r3, #0
    332a:	4620      	mov	r0, r4
    332c:	f7ff feae 	bl	308c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3330:	4630      	mov	r0, r6
    3332:	f7ff f80f 	bl	2354 <z_nrf_clock_control_lf_on>

	return 0;
}
    3336:	4620      	mov	r0, r4
    3338:	b002      	add	sp, #8
    333a:	bd70      	pop	{r4, r5, r6, pc}
    333c:	20000138 	.word	0x20000138
    3340:	40011000 	.word	0x40011000
    3344:	e000e100 	.word	0xe000e100
    3348:	40011008 	.word	0x40011008
    334c:	2000086c 	.word	0x2000086c
    3350:	00002f25 	.word	0x00002f25
    3354:	007fffff 	.word	0x007fffff

00003358 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3358:	4b14      	ldr	r3, [pc, #80]	; (33ac <sys_clock_set_timeout+0x54>)
{
    335a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    335c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3360:	bf08      	it	eq
    3362:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3364:	1e44      	subs	r4, r0, #1
    3366:	2c00      	cmp	r4, #0
    3368:	dd1e      	ble.n	33a8 <sys_clock_set_timeout+0x50>
    336a:	429c      	cmp	r4, r3
    336c:	bfa8      	it	ge
    336e:	461c      	movge	r4, r3

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3370:	f7ff fe6a 	bl	3048 <z_nrf_rtc_timer_read>
    3374:	4b0e      	ldr	r3, [pc, #56]	; (33b0 <sys_clock_set_timeout+0x58>)
		cyc = MAX_CYCLES;
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3376:	490f      	ldr	r1, [pc, #60]	; (33b4 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3378:	e9d3 2300 	ldrd	r2, r3, [r3]
    337c:	1a80      	subs	r0, r0, r2
		ticks = 0;
    337e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3382:	bf28      	it	cs
    3384:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3386:	3001      	adds	r0, #1
    3388:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    338a:	4808      	ldr	r0, [pc, #32]	; (33ac <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    338c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    338e:	4284      	cmp	r4, r0
    3390:	bf28      	it	cs
    3392:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3394:	1912      	adds	r2, r2, r4
    3396:	f04f 0000 	mov.w	r0, #0
    339a:	9001      	str	r0, [sp, #4]
    339c:	f143 0300 	adc.w	r3, r3, #0
    33a0:	f7ff fe74 	bl	308c <compare_set>
}
    33a4:	b002      	add	sp, #8
    33a6:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    33a8:	2400      	movs	r4, #0
    33aa:	e7e1      	b.n	3370 <sys_clock_set_timeout+0x18>
    33ac:	007fffff 	.word	0x007fffff
    33b0:	20000148 	.word	0x20000148
    33b4:	00002f25 	.word	0x00002f25

000033b8 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    33b8:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    33ba:	f7ff fe45 	bl	3048 <z_nrf_rtc_timer_read>
    33be:	4b02      	ldr	r3, [pc, #8]	; (33c8 <sys_clock_elapsed+0x10>)
    33c0:	681b      	ldr	r3, [r3, #0]
}
    33c2:	1ac0      	subs	r0, r0, r3
    33c4:	bd08      	pop	{r3, pc}
    33c6:	bf00      	nop
    33c8:	20000148 	.word	0x20000148

000033cc <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
    33cc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    33ce:	4c06      	ldr	r4, [pc, #24]	; (33e8 <sys_clock_isr+0x1c>)
    33d0:	4906      	ldr	r1, [pc, #24]	; (33ec <sys_clock_isr+0x20>)
    33d2:	4807      	ldr	r0, [pc, #28]	; (33f0 <sys_clock_isr+0x24>)
    33d4:	4622      	mov	r2, r4
    33d6:	2317      	movs	r3, #23
    33d8:	f003 fa99 	bl	690e <printk>
    33dc:	4620      	mov	r0, r4
    33de:	2117      	movs	r1, #23
}
    33e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    33e4:	f003 b9ba 	b.w	675c <assert_post_action>
    33e8:	00007df6 	.word	0x00007df6
    33ec:	00007f38 	.word	0x00007f38
    33f0:	00007610 	.word	0x00007610

000033f4 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    33f4:	b508      	push	{r3, lr}
    switch (domain)
    33f6:	b178      	cbz	r0, 3418 <nrf_clock_is_running.constprop.0+0x24>
    33f8:	2801      	cmp	r0, #1
    33fa:	d01c      	beq.n	3436 <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    33fc:	4a14      	ldr	r2, [pc, #80]	; (3450 <nrf_clock_is_running.constprop.0+0x5c>)
    33fe:	4915      	ldr	r1, [pc, #84]	; (3454 <nrf_clock_is_running.constprop.0+0x60>)
    3400:	4815      	ldr	r0, [pc, #84]	; (3458 <nrf_clock_is_running.constprop.0+0x64>)
    3402:	f44f 734f 	mov.w	r3, #828	; 0x33c
    3406:	f003 fa82 	bl	690e <printk>
    340a:	4811      	ldr	r0, [pc, #68]	; (3450 <nrf_clock_is_running.constprop.0+0x5c>)
    340c:	f44f 714f 	mov.w	r1, #828	; 0x33c
    3410:	f003 f9a4 	bl	675c <assert_post_action>
            return false;
    3414:	2000      	movs	r0, #0
    3416:	e00d      	b.n	3434 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    3418:	b131      	cbz	r1, 3428 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    341a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    341e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3422:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3426:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    342c:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3430:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    3434:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    3436:	b131      	cbz	r1, 3446 <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    343c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3440:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3444:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    344a:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    344e:	e7ef      	b.n	3430 <nrf_clock_is_running.constprop.0+0x3c>
    3450:	00007e32 	.word	0x00007e32
    3454:	00007f38 	.word	0x00007f38
    3458:	00007610 	.word	0x00007610

0000345c <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    345c:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    345e:	4604      	mov	r4, r0
    3460:	b948      	cbnz	r0, 3476 <nrfx_clock_init+0x1a>
    3462:	490a      	ldr	r1, [pc, #40]	; (348c <nrfx_clock_init+0x30>)
    3464:	480a      	ldr	r0, [pc, #40]	; (3490 <nrfx_clock_init+0x34>)
    3466:	4a0b      	ldr	r2, [pc, #44]	; (3494 <nrfx_clock_init+0x38>)
    3468:	23b5      	movs	r3, #181	; 0xb5
    346a:	f003 fa50 	bl	690e <printk>
    346e:	4809      	ldr	r0, [pc, #36]	; (3494 <nrfx_clock_init+0x38>)
    3470:	21b5      	movs	r1, #181	; 0xb5
    3472:	f003 f973 	bl	675c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3476:	4b08      	ldr	r3, [pc, #32]	; (3498 <nrfx_clock_init+0x3c>)
    3478:	791a      	ldrb	r2, [r3, #4]
    347a:	b922      	cbnz	r2, 3486 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    347c:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    347e:	4807      	ldr	r0, [pc, #28]	; (349c <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    3480:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    3482:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3484:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3486:	4806      	ldr	r0, [pc, #24]	; (34a0 <nrfx_clock_init+0x44>)
    return err_code;
    3488:	e7fc      	b.n	3484 <nrfx_clock_init+0x28>
    348a:	bf00      	nop
    348c:	00007ea3 	.word	0x00007ea3
    3490:	00007610 	.word	0x00007610
    3494:	00007e66 	.word	0x00007e66
    3498:	20000874 	.word	0x20000874
    349c:	0bad0000 	.word	0x0bad0000
    34a0:	0bad000c 	.word	0x0bad000c

000034a4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    34a4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    34a6:	4b0b      	ldr	r3, [pc, #44]	; (34d4 <nrfx_clock_enable+0x30>)
    34a8:	791b      	ldrb	r3, [r3, #4]
    34aa:	b94b      	cbnz	r3, 34c0 <nrfx_clock_enable+0x1c>
    34ac:	490a      	ldr	r1, [pc, #40]	; (34d8 <nrfx_clock_enable+0x34>)
    34ae:	480b      	ldr	r0, [pc, #44]	; (34dc <nrfx_clock_enable+0x38>)
    34b0:	4a0b      	ldr	r2, [pc, #44]	; (34e0 <nrfx_clock_enable+0x3c>)
    34b2:	23ce      	movs	r3, #206	; 0xce
    34b4:	f003 fa2b 	bl	690e <printk>
    34b8:	4809      	ldr	r0, [pc, #36]	; (34e0 <nrfx_clock_enable+0x3c>)
    34ba:	21ce      	movs	r1, #206	; 0xce
    34bc:	f003 f94e 	bl	675c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    34c0:	2000      	movs	r0, #0
    34c2:	f7fe f9bf 	bl	1844 <arch_irq_is_enabled>
    34c6:	b918      	cbnz	r0, 34d0 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    34c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    34cc:	f7fe b9aa 	b.w	1824 <arch_irq_enable>
    34d0:	bd08      	pop	{r3, pc}
    34d2:	bf00      	nop
    34d4:	20000874 	.word	0x20000874
    34d8:	00007eb1 	.word	0x00007eb1
    34dc:	00007610 	.word	0x00007610
    34e0:	00007e66 	.word	0x00007e66

000034e4 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    34e4:	4b22      	ldr	r3, [pc, #136]	; (3570 <nrfx_clock_start+0x8c>)
    34e6:	791b      	ldrb	r3, [r3, #4]
{
    34e8:	b513      	push	{r0, r1, r4, lr}
    34ea:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    34ec:	b95b      	cbnz	r3, 3506 <nrfx_clock_start+0x22>
    34ee:	4921      	ldr	r1, [pc, #132]	; (3574 <nrfx_clock_start+0x90>)
    34f0:	4821      	ldr	r0, [pc, #132]	; (3578 <nrfx_clock_start+0x94>)
    34f2:	4a22      	ldr	r2, [pc, #136]	; (357c <nrfx_clock_start+0x98>)
    34f4:	f44f 7385 	mov.w	r3, #266	; 0x10a
    34f8:	f003 fa09 	bl	690e <printk>
    34fc:	481f      	ldr	r0, [pc, #124]	; (357c <nrfx_clock_start+0x98>)
    34fe:	f44f 7185 	mov.w	r1, #266	; 0x10a
    3502:	f003 f92b 	bl	675c <assert_post_action>
    switch (domain)
    3506:	b174      	cbz	r4, 3526 <nrfx_clock_start+0x42>
    3508:	2c01      	cmp	r4, #1
    350a:	d027      	beq.n	355c <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    350c:	4a1b      	ldr	r2, [pc, #108]	; (357c <nrfx_clock_start+0x98>)
    350e:	491c      	ldr	r1, [pc, #112]	; (3580 <nrfx_clock_start+0x9c>)
    3510:	4819      	ldr	r0, [pc, #100]	; (3578 <nrfx_clock_start+0x94>)
    3512:	f44f 739e 	mov.w	r3, #316	; 0x13c
    3516:	f003 f9fa 	bl	690e <printk>
    351a:	4818      	ldr	r0, [pc, #96]	; (357c <nrfx_clock_start+0x98>)
    351c:	f44f 719e 	mov.w	r1, #316	; 0x13c
    3520:	f003 f91c 	bl	675c <assert_post_action>
            break;
    }
}
    3524:	e016      	b.n	3554 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3526:	a901      	add	r1, sp, #4
    3528:	4620      	mov	r0, r4
    352a:	f7ff ff63 	bl	33f4 <nrf_clock_is_running.constprop.0>
    352e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3532:	b188      	cbz	r0, 3558 <nrfx_clock_start+0x74>
    3534:	9a01      	ldr	r2, [sp, #4]
    3536:	2a01      	cmp	r2, #1
    3538:	d10e      	bne.n	3558 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    353a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    353e:	4b11      	ldr	r3, [pc, #68]	; (3584 <nrfx_clock_start+0xa0>)
    3540:	2200      	movs	r2, #0
    3542:	601a      	str	r2, [r3, #0]
    3544:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    354a:	2202      	movs	r2, #2
    354c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3550:	2201      	movs	r2, #1
    3552:	609a      	str	r2, [r3, #8]
}
    3554:	b002      	add	sp, #8
    3556:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3558:	2200      	movs	r2, #0
    355a:	e7ee      	b.n	353a <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    355c:	4b0a      	ldr	r3, [pc, #40]	; (3588 <nrfx_clock_start+0xa4>)
    355e:	2200      	movs	r2, #0
    3560:	601a      	str	r2, [r3, #0]
    3562:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3568:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    356c:	601c      	str	r4, [r3, #0]
}
    356e:	e7f1      	b.n	3554 <nrfx_clock_start+0x70>
    3570:	20000874 	.word	0x20000874
    3574:	00007eb1 	.word	0x00007eb1
    3578:	00007610 	.word	0x00007610
    357c:	00007e66 	.word	0x00007e66
    3580:	00007f38 	.word	0x00007f38
    3584:	40000104 	.word	0x40000104
    3588:	40000100 	.word	0x40000100

0000358c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    358c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    358e:	4d2f      	ldr	r5, [pc, #188]	; (364c <nrfx_clock_stop+0xc0>)
    3590:	792a      	ldrb	r2, [r5, #4]
{
    3592:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3594:	b95a      	cbnz	r2, 35ae <nrfx_clock_stop+0x22>
    3596:	492e      	ldr	r1, [pc, #184]	; (3650 <nrfx_clock_stop+0xc4>)
    3598:	482e      	ldr	r0, [pc, #184]	; (3654 <nrfx_clock_stop+0xc8>)
    359a:	4a2f      	ldr	r2, [pc, #188]	; (3658 <nrfx_clock_stop+0xcc>)
    359c:	f240 1343 	movw	r3, #323	; 0x143
    35a0:	f003 f9b5 	bl	690e <printk>
    35a4:	482c      	ldr	r0, [pc, #176]	; (3658 <nrfx_clock_stop+0xcc>)
    35a6:	f240 1143 	movw	r1, #323	; 0x143
    35aa:	f003 f8d7 	bl	675c <assert_post_action>
    switch (domain)
    35ae:	b17c      	cbz	r4, 35d0 <nrfx_clock_stop+0x44>
    35b0:	2c01      	cmp	r4, #1
    35b2:	d028      	beq.n	3606 <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    35b4:	4929      	ldr	r1, [pc, #164]	; (365c <nrfx_clock_stop+0xd0>)
    35b6:	4827      	ldr	r0, [pc, #156]	; (3654 <nrfx_clock_stop+0xc8>)
    35b8:	4a27      	ldr	r2, [pc, #156]	; (3658 <nrfx_clock_stop+0xcc>)
    35ba:	f240 135f 	movw	r3, #351	; 0x15f
    35be:	f003 f9a6 	bl	690e <printk>
    35c2:	4825      	ldr	r0, [pc, #148]	; (3658 <nrfx_clock_stop+0xcc>)
    35c4:	f240 115f 	movw	r1, #351	; 0x15f
    35c8:	f003 f8c8 	bl	675c <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    35cc:	b003      	add	sp, #12
    35ce:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    35d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35d4:	2202      	movs	r2, #2
    35d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35da:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    35de:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35e2:	2201      	movs	r2, #1
    35e4:	681b      	ldr	r3, [r3, #0]
    35e6:	4b1e      	ldr	r3, [pc, #120]	; (3660 <nrfx_clock_stop+0xd4>)
    35e8:	f242 7410 	movw	r4, #10000	; 0x2710
    35ec:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    35ee:	2100      	movs	r1, #0
    35f0:	4608      	mov	r0, r1
    35f2:	f7ff feff 	bl	33f4 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    35f6:	2800      	cmp	r0, #0
    35f8:	d0e8      	beq.n	35cc <nrfx_clock_stop+0x40>
    35fa:	2001      	movs	r0, #1
    35fc:	f003 fc79 	bl	6ef2 <nrfx_busy_wait>
    3600:	3c01      	subs	r4, #1
    3602:	d1f4      	bne.n	35ee <nrfx_clock_stop+0x62>
    3604:	e7e2      	b.n	35cc <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    3606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    360a:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    360c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3610:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3614:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3618:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    361a:	4b12      	ldr	r3, [pc, #72]	; (3664 <nrfx_clock_stop+0xd8>)
    361c:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    361e:	f88d 4007 	strb.w	r4, [sp, #7]
    3622:	f242 7410 	movw	r4, #10000	; 0x2710
    3626:	f10d 0107 	add.w	r1, sp, #7
    362a:	2001      	movs	r0, #1
    362c:	f7ff fee2 	bl	33f4 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3630:	b910      	cbnz	r0, 3638 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    3632:	2300      	movs	r3, #0
    3634:	716b      	strb	r3, [r5, #5]
    3636:	e7c9      	b.n	35cc <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3638:	f89d 0007 	ldrb.w	r0, [sp, #7]
    363c:	2801      	cmp	r0, #1
    363e:	d1f8      	bne.n	3632 <nrfx_clock_stop+0xa6>
    3640:	f003 fc57 	bl	6ef2 <nrfx_busy_wait>
    3644:	3c01      	subs	r4, #1
    3646:	d1ee      	bne.n	3626 <nrfx_clock_stop+0x9a>
    3648:	e7f3      	b.n	3632 <nrfx_clock_stop+0xa6>
    364a:	bf00      	nop
    364c:	20000874 	.word	0x20000874
    3650:	00007eb1 	.word	0x00007eb1
    3654:	00007610 	.word	0x00007610
    3658:	00007e66 	.word	0x00007e66
    365c:	00007f38 	.word	0x00007f38
    3660:	4000000c 	.word	0x4000000c
    3664:	40000004 	.word	0x40000004

00003668 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3668:	4b16      	ldr	r3, [pc, #88]	; (36c4 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    366a:	b507      	push	{r0, r1, r2, lr}
    366c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    366e:	b16a      	cbz	r2, 368c <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3670:	2200      	movs	r2, #0
    3672:	601a      	str	r2, [r3, #0]
    3674:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    367a:	2201      	movs	r2, #1
    367c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3680:	4b11      	ldr	r3, [pc, #68]	; (36c8 <nrfx_power_clock_irq_handler+0x60>)
    3682:	7958      	ldrb	r0, [r3, #5]
    3684:	b910      	cbnz	r0, 368c <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    3686:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3688:	681b      	ldr	r3, [r3, #0]
    368a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    368c:	4b0f      	ldr	r3, [pc, #60]	; (36cc <nrfx_power_clock_irq_handler+0x64>)
    368e:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3690:	b16a      	cbz	r2, 36ae <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3692:	2000      	movs	r0, #0
    3694:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    3696:	a901      	add	r1, sp, #4
    3698:	681b      	ldr	r3, [r3, #0]
    369a:	f7ff feab 	bl	33f4 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    369e:	9a01      	ldr	r2, [sp, #4]
    36a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36a4:	b932      	cbnz	r2, 36b4 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    36a6:	2201      	movs	r2, #1
    36a8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36ac:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    36ae:	b003      	add	sp, #12
    36b0:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    36b4:	2202      	movs	r2, #2
    36b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    36ba:	4b03      	ldr	r3, [pc, #12]	; (36c8 <nrfx_power_clock_irq_handler+0x60>)
    36bc:	2001      	movs	r0, #1
    36be:	681b      	ldr	r3, [r3, #0]
    36c0:	4798      	blx	r3
}
    36c2:	e7f4      	b.n	36ae <nrfx_power_clock_irq_handler+0x46>
    36c4:	40000100 	.word	0x40000100
    36c8:	20000874 	.word	0x20000874
    36cc:	40000104 	.word	0x40000104

000036d0 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    36d0:	2301      	movs	r3, #1
    36d2:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    36d6:	f010 0fff 	tst.w	r0, #255	; 0xff
    36da:	d012      	beq.n	3702 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    36dc:	f04f 0320 	mov.w	r3, #32
    36e0:	f3ef 8111 	mrs	r1, BASEPRI
    36e4:	f383 8812 	msr	BASEPRI_MAX, r3
    36e8:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    36ec:	4a06      	ldr	r2, [pc, #24]	; (3708 <nrfx_gpiote_channel_free+0x38>)
    36ee:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    36f0:	ea23 0000 	bic.w	r0, r3, r0
    36f4:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    36f6:	f381 8811 	msr	BASEPRI, r1
    36fa:	f3bf 8f6f 	isb	sy
    36fe:	4803      	ldr	r0, [pc, #12]	; (370c <nrfx_gpiote_channel_free+0x3c>)
    3700:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    3702:	4803      	ldr	r0, [pc, #12]	; (3710 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3704:	4770      	bx	lr
    3706:	bf00      	nop
    3708:	2000087c 	.word	0x2000087c
    370c:	0bad0000 	.word	0x0bad0000
    3710:	0bad0004 	.word	0x0bad0004

00003714 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    3714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3718:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    371a:	f8df e060 	ldr.w	lr, [pc, #96]	; 377c <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    371e:	4816      	ldr	r0, [pc, #88]	; (3778 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    3720:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3780 <nrfx_gpiote_channel_alloc+0x6c>
{
    3724:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    3726:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    3728:	2601      	movs	r6, #1
    372a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    372c:	f04f 0120 	mov.w	r1, #32
    3730:	f3ef 8c11 	mrs	ip, BASEPRI
    3734:	f381 8812 	msr	BASEPRI_MAX, r1
    3738:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    373c:	fa22 f103 	lsr.w	r1, r2, r3
    3740:	07c9      	lsls	r1, r1, #31
    3742:	d50a      	bpl.n	375a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    3744:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    3748:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    374c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    374e:	bf01      	itttt	eq
    3750:	4339      	orreq	r1, r7
    3752:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    3756:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    3758:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    375a:	f38c 8811 	msr	BASEPRI, ip
    375e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    3762:	4540      	cmp	r0, r8
    3764:	d005      	beq.n	3772 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    3766:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    376a:	439a      	bics	r2, r3
    376c:	f104 0401 	add.w	r4, r4, #1
    3770:	d1db      	bne.n	372a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3776:	bf00      	nop
    3778:	0bad0002 	.word	0x0bad0002
    377c:	2000087c 	.word	0x2000087c
    3780:	0bad0000 	.word	0x0bad0000

00003784 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    3788:	4a14      	ldr	r2, [pc, #80]	; (37dc <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    378a:	4e15      	ldr	r6, [pc, #84]	; (37e0 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    378c:	4f15      	ldr	r7, [pc, #84]	; (37e4 <nrfx_ppi_channel_alloc+0x60>)
{
    378e:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    3790:	4815      	ldr	r0, [pc, #84]	; (37e8 <nrfx_ppi_channel_alloc+0x64>)
{
    3792:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    3794:	f04f 0e01 	mov.w	lr, #1
    3798:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    379c:	f04f 0320 	mov.w	r3, #32
    37a0:	f3ef 8811 	mrs	r8, BASEPRI
    37a4:	f383 8812 	msr	BASEPRI_MAX, r3
    37a8:	f3bf 8f6f 	isb	sy
    37ac:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    37b0:	4213      	tst	r3, r2
    37b2:	d007      	beq.n	37c4 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    37b4:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    37b6:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    37b8:	bf01      	itttt	eq
    37ba:	4319      	orreq	r1, r3
    37bc:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    37be:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    37c2:	4638      	moveq	r0, r7
	__asm__ volatile(
    37c4:	f388 8811 	msr	BASEPRI, r8
    37c8:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    37cc:	42b8      	cmp	r0, r7
    37ce:	d003      	beq.n	37d8 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    37d0:	439a      	bics	r2, r3
    37d2:	f104 0401 	add.w	r4, r4, #1
    37d6:	d1df      	bne.n	3798 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    37d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37dc:	000fffff 	.word	0x000fffff
    37e0:	200008dc 	.word	0x200008dc
    37e4:	0bad0000 	.word	0x0bad0000
    37e8:	0bad0002 	.word	0x0bad0002

000037ec <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    37ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37f0:	4604      	mov	r4, r0
    37f2:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
    37f4:	4615      	mov	r5, r2
    37f6:	b95a      	cbnz	r2, 3810 <nrf_pwm_sequence_set+0x24>
    37f8:	4932      	ldr	r1, [pc, #200]	; (38c4 <nrf_pwm_sequence_set+0xd8>)
    37fa:	4833      	ldr	r0, [pc, #204]	; (38c8 <nrf_pwm_sequence_set+0xdc>)
    37fc:	4a33      	ldr	r2, [pc, #204]	; (38cc <nrf_pwm_sequence_set+0xe0>)
    37fe:	f240 23a7 	movw	r3, #679	; 0x2a7
    3802:	f003 f884 	bl	690e <printk>
    3806:	4831      	ldr	r0, [pc, #196]	; (38cc <nrf_pwm_sequence_set+0xe0>)
    3808:	f240 21a7 	movw	r1, #679	; 0x2a7
    380c:	f002 ffa6 	bl	675c <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    3810:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    3812:	b95f      	cbnz	r7, 382c <nrf_pwm_sequence_set+0x40>
    3814:	492e      	ldr	r1, [pc, #184]	; (38d0 <nrf_pwm_sequence_set+0xe4>)
    3816:	482c      	ldr	r0, [pc, #176]	; (38c8 <nrf_pwm_sequence_set+0xdc>)
    3818:	4a2c      	ldr	r2, [pc, #176]	; (38cc <nrf_pwm_sequence_set+0xe0>)
    381a:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    381e:	f003 f876 	bl	690e <printk>
    3822:	482a      	ldr	r0, [pc, #168]	; (38cc <nrf_pwm_sequence_set+0xe0>)
    3824:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    3828:	f002 ff98 	bl	675c <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    382c:	eb04 1846 	add.w	r8, r4, r6, lsl #5
    3830:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    3834:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    3836:	2f00      	cmp	r7, #0
    3838:	d138      	bne.n	38ac <nrf_pwm_sequence_set+0xc0>
    383a:	4926      	ldr	r1, [pc, #152]	; (38d4 <nrf_pwm_sequence_set+0xe8>)
    383c:	4a23      	ldr	r2, [pc, #140]	; (38cc <nrf_pwm_sequence_set+0xe0>)
    383e:	4822      	ldr	r0, [pc, #136]	; (38c8 <nrf_pwm_sequence_set+0xdc>)
    3840:	f240 23bd 	movw	r3, #701	; 0x2bd
    3844:	f003 f863 	bl	690e <printk>
    3848:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    384c:	481f      	ldr	r0, [pc, #124]	; (38cc <nrf_pwm_sequence_set+0xe0>)
    384e:	f002 ff85 	bl	675c <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
    3852:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    3856:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    3858:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    385c:	d30b      	bcc.n	3876 <nrf_pwm_sequence_set+0x8a>
    385e:	491e      	ldr	r1, [pc, #120]	; (38d8 <nrf_pwm_sequence_set+0xec>)
    3860:	4819      	ldr	r0, [pc, #100]	; (38c8 <nrf_pwm_sequence_set+0xdc>)
    3862:	4a1a      	ldr	r2, [pc, #104]	; (38cc <nrf_pwm_sequence_set+0xe0>)
    3864:	f240 23c7 	movw	r3, #711	; 0x2c7
    3868:	f003 f851 	bl	690e <printk>
    386c:	4817      	ldr	r0, [pc, #92]	; (38cc <nrf_pwm_sequence_set+0xe0>)
    386e:	f240 21c7 	movw	r1, #711	; 0x2c7
    3872:	f002 ff73 	bl	675c <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    3876:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    3878:	ea4f 1846 	mov.w	r8, r6, lsl #5
    387c:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    3880:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    3884:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    3888:	d30b      	bcc.n	38a2 <nrf_pwm_sequence_set+0xb6>
    388a:	4914      	ldr	r1, [pc, #80]	; (38dc <nrf_pwm_sequence_set+0xf0>)
    388c:	480e      	ldr	r0, [pc, #56]	; (38c8 <nrf_pwm_sequence_set+0xdc>)
    388e:	4a0f      	ldr	r2, [pc, #60]	; (38cc <nrf_pwm_sequence_set+0xe0>)
    3890:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    3894:	f003 f83b 	bl	690e <printk>
    3898:	480c      	ldr	r0, [pc, #48]	; (38cc <nrf_pwm_sequence_set+0xe0>)
    389a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    389e:	f002 ff5d 	bl	675c <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    38a2:	4444      	add	r4, r8
    38a4:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
    38a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    38ac:	043b      	lsls	r3, r7, #16
    38ae:	d5d0      	bpl.n	3852 <nrf_pwm_sequence_set+0x66>
    38b0:	490b      	ldr	r1, [pc, #44]	; (38e0 <nrf_pwm_sequence_set+0xf4>)
    38b2:	4a06      	ldr	r2, [pc, #24]	; (38cc <nrf_pwm_sequence_set+0xe0>)
    38b4:	4804      	ldr	r0, [pc, #16]	; (38c8 <nrf_pwm_sequence_set+0xdc>)
    38b6:	f240 23be 	movw	r3, #702	; 0x2be
    38ba:	f003 f828 	bl	690e <printk>
    38be:	f240 21be 	movw	r1, #702	; 0x2be
    38c2:	e7c3      	b.n	384c <nrf_pwm_sequence_set+0x60>
    38c4:	00007f01 	.word	0x00007f01
    38c8:	00007610 	.word	0x00007610
    38cc:	00007ecf 	.word	0x00007ecf
    38d0:	00007f16 	.word	0x00007f16
    38d4:	00007f2e 	.word	0x00007f2e
    38d8:	00007f58 	.word	0x00007f58
    38dc:	00007f79 	.word	0x00007f79
    38e0:	00007f3a 	.word	0x00007f3a

000038e4 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    38e4:	6802      	ldr	r2, [r0, #0]
    switch (port)
    38e6:	0953      	lsrs	r3, r2, #5
{
    38e8:	b510      	push	{r4, lr}
    38ea:	4604      	mov	r4, r0
    switch (port)
    38ec:	d02c      	beq.n	3948 <nrf_gpio_pin_port_decode+0x64>
    38ee:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    38f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    38f4:	bf18      	it	ne
    38f6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    38f8:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    38fc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    38fe:	07db      	lsls	r3, r3, #31
    3900:	d40b      	bmi.n	391a <nrf_gpio_pin_port_decode+0x36>
    3902:	4914      	ldr	r1, [pc, #80]	; (3954 <nrf_gpio_pin_port_decode+0x70>)
    3904:	4814      	ldr	r0, [pc, #80]	; (3958 <nrf_gpio_pin_port_decode+0x74>)
    3906:	4a15      	ldr	r2, [pc, #84]	; (395c <nrf_gpio_pin_port_decode+0x78>)
    3908:	f44f 7305 	mov.w	r3, #532	; 0x214
    390c:	f002 ffff 	bl	690e <printk>
    3910:	4812      	ldr	r0, [pc, #72]	; (395c <nrf_gpio_pin_port_decode+0x78>)
    3912:	f44f 7105 	mov.w	r1, #532	; 0x214
    3916:	f002 ff21 	bl	675c <assert_post_action>
    uint32_t pin_number = *p_pin;
    391a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    391c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3920:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3922:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3924:	d00d      	beq.n	3942 <nrf_gpio_pin_port_decode+0x5e>
    3926:	2b01      	cmp	r3, #1
    3928:	d011      	beq.n	394e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    392a:	490d      	ldr	r1, [pc, #52]	; (3960 <nrf_gpio_pin_port_decode+0x7c>)
    392c:	480a      	ldr	r0, [pc, #40]	; (3958 <nrf_gpio_pin_port_decode+0x74>)
    392e:	4a0b      	ldr	r2, [pc, #44]	; (395c <nrf_gpio_pin_port_decode+0x78>)
    3930:	f240 2319 	movw	r3, #537	; 0x219
    3934:	f002 ffeb 	bl	690e <printk>
    3938:	4808      	ldr	r0, [pc, #32]	; (395c <nrf_gpio_pin_port_decode+0x78>)
    393a:	f240 2119 	movw	r1, #537	; 0x219
    393e:	f002 ff0d 	bl	675c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3942:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3946:	bd10      	pop	{r4, pc}
    switch (port)
    3948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    394c:	e7d4      	b.n	38f8 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    394e:	4805      	ldr	r0, [pc, #20]	; (3964 <nrf_gpio_pin_port_decode+0x80>)
    3950:	e7f9      	b.n	3946 <nrf_gpio_pin_port_decode+0x62>
    3952:	bf00      	nop
    3954:	00007dbe 	.word	0x00007dbe
    3958:	00007610 	.word	0x00007610
    395c:	00007d8b 	.word	0x00007d8b
    3960:	00007f38 	.word	0x00007f38
    3964:	50000300 	.word	0x50000300

00003968 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    3968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    396c:	4607      	mov	r7, r0
    396e:	b087      	sub	sp, #28
    3970:	4691      	mov	r9, r2
    3972:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    3974:	460c      	mov	r4, r1
    3976:	b949      	cbnz	r1, 398c <nrfx_pwm_init+0x24>
    3978:	4953      	ldr	r1, [pc, #332]	; (3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>)
    397a:	4854      	ldr	r0, [pc, #336]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    397c:	4a54      	ldr	r2, [pc, #336]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    397e:	2389      	movs	r3, #137	; 0x89
    3980:	f002 ffc5 	bl	690e <printk>
    3984:	4852      	ldr	r0, [pc, #328]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3986:	2189      	movs	r1, #137	; 0x89
    3988:	f002 fee8 	bl	675c <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    398c:	793e      	ldrb	r6, [r7, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    398e:	4d51      	ldr	r5, [pc, #324]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3990:	210c      	movs	r1, #12
    3992:	4371      	muls	r1, r6
    3994:	186b      	adds	r3, r5, r1
    3996:	7a1a      	ldrb	r2, [r3, #8]
    3998:	2a00      	cmp	r2, #0
    399a:	f040 8093 	bne.w	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    399e:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
    39a2:	f8c3 8004 	str.w	r8, [r3, #4]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    39a6:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    39aa:	f10d 0808 	add.w	r8, sp, #8
    39ae:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
    39b2:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    39b6:	2aff      	cmp	r2, #255	; 0xff
    39b8:	d07f      	beq.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
            if (!p_config->skip_gpio_cfg)
    39ba:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    39bc:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    39c0:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
    39c4:	b9b1      	cbnz	r1, 39f4 <nrfx_pwm_init+0x8c>
                if (inverted)
    39c6:	0613      	lsls	r3, r2, #24
    39c8:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    39cc:	a801      	add	r0, sp, #4
    39ce:	d56c      	bpl.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    39d0:	f7ff ff88 	bl	38e4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    39d4:	9901      	ldr	r1, [sp, #4]
    39d6:	2201      	movs	r2, #1
    39d8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    39da:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    39de:	a801      	add	r0, sp, #4
    39e0:	f8cd b004 	str.w	fp, [sp, #4]
    39e4:	f7ff ff7e 	bl	38e4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    39e8:	9b01      	ldr	r3, [sp, #4]
    39ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    39ee:	2203      	movs	r2, #3
    39f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    39f4:	45d1      	cmp	r9, sl
    39f6:	f108 0804 	add.w	r8, r8, #4
    39fa:	d1da      	bne.n	39b2 <nrfx_pwm_init+0x4a>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    39fc:	f8d7 8000 	ldr.w	r8, [r7]
        p_reg->PSEL.OUT[i] = out_pins[i];
    3a00:	9b02      	ldr	r3, [sp, #8]
    3a02:	f8c8 3560 	str.w	r3, [r8, #1376]	; 0x560
    3a06:	9b03      	ldr	r3, [sp, #12]
    3a08:	f8c8 3564 	str.w	r3, [r8, #1380]	; 0x564
    3a0c:	9b04      	ldr	r3, [sp, #16]
    3a0e:	f8c8 3568 	str.w	r3, [r8, #1384]	; 0x568
    3a12:	9b05      	ldr	r3, [sp, #20]
    3a14:	f8c8 356c 	str.w	r3, [r8, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    3a18:	2301      	movs	r3, #1
    3a1a:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    3a1e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
    3a22:	f894 b005 	ldrb.w	fp, [r4, #5]
    3a26:	f894 a006 	ldrb.w	sl, [r4, #6]
    3a2a:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    3a2e:	2b00      	cmp	r3, #0
    3a30:	da0b      	bge.n	3a4a <nrfx_pwm_init+0xe2>
    3a32:	4929      	ldr	r1, [pc, #164]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3a34:	4825      	ldr	r0, [pc, #148]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3a36:	4a29      	ldr	r2, [pc, #164]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3a38:	f44f 7327 	mov.w	r3, #668	; 0x29c
    3a3c:	f002 ff67 	bl	690e <printk>
    3a40:	4826      	ldr	r0, [pc, #152]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3a42:	f44f 7127 	mov.w	r1, #668	; 0x29c
    3a46:	f002 fe89 	bl	675c <assert_post_action>
    p_reg->PRESCALER  = base_clock;
    3a4a:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
    3a4e:	6838      	ldr	r0, [r7, #0]
    p_reg->MODE       = mode;
    3a50:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    3a54:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    3a58:	8963      	ldrh	r3, [r4, #10]
    3a5a:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    3a5e:	2300      	movs	r3, #0
    3a60:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    3a64:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a68:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    3a6c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    3a70:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    3a74:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    3a78:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    3a7c:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    3a80:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    3a84:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    3a88:	230c      	movs	r3, #12
    3a8a:	4373      	muls	r3, r6
    3a8c:	58eb      	ldr	r3, [r5, r3]
    3a8e:	b11b      	cbz	r3, 3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    3a90:	f340 3007 	sbfx	r0, r0, #12, #8
    3a94:	f7fd fec6 	bl	1824 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3a98:	230c      	movs	r3, #12
    3a9a:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    3a9e:	4810      	ldr	r0, [pc, #64]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3aa0:	2301      	movs	r3, #1
    3aa2:	722b      	strb	r3, [r5, #8]
}
    3aa4:	b007      	add	sp, #28
    3aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3aaa:	f7ff ff1b 	bl	38e4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3aae:	9901      	ldr	r1, [sp, #4]
    3ab0:	2201      	movs	r2, #1
    3ab2:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    3ab4:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    3ab8:	e791      	b.n	39de <nrfx_pwm_init+0x76>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    3aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3abe:	f8c8 3000 	str.w	r3, [r8]
    3ac2:	e797      	b.n	39f4 <nrfx_pwm_init+0x8c>
        return err_code;
    3ac4:	4807      	ldr	r0, [pc, #28]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3ac6:	e7ed      	b.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3ac8:	00007fd7 	.word	0x00007fd7
    3acc:	00007610 	.word	0x00007610
    3ad0:	00007f9c 	.word	0x00007f9c
    3ad4:	200008e0 	.word	0x200008e0
    3ad8:	00007fe0 	.word	0x00007fe0
    3adc:	00007ecf 	.word	0x00007ecf
    3ae0:	0bad0000 	.word	0x0bad0000
    3ae4:	0bad0005 	.word	0x0bad0005

00003ae8 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    3ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3aec:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3aee:	7903      	ldrb	r3, [r0, #4]
{
    3af0:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3af2:	4a31      	ldr	r2, [pc, #196]	; (3bb8 <nrfx_pwm_simple_playback+0xd0>)
{
    3af4:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3af6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    3afa:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    3afe:	210c      	movs	r1, #12
    3b00:	fb01 2303 	mla	r3, r1, r3, r2
{
    3b04:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    3b06:	7a1b      	ldrb	r3, [r3, #8]
    3b08:	b95b      	cbnz	r3, 3b22 <nrfx_pwm_simple_playback+0x3a>
    3b0a:	492c      	ldr	r1, [pc, #176]	; (3bbc <nrfx_pwm_simple_playback+0xd4>)
    3b0c:	482c      	ldr	r0, [pc, #176]	; (3bc0 <nrfx_pwm_simple_playback+0xd8>)
    3b0e:	4a2d      	ldr	r2, [pc, #180]	; (3bc4 <nrfx_pwm_simple_playback+0xdc>)
    3b10:	f240 1325 	movw	r3, #293	; 0x125
    3b14:	f002 fefb 	bl	690e <printk>
    3b18:	482a      	ldr	r0, [pc, #168]	; (3bc4 <nrfx_pwm_simple_playback+0xdc>)
    3b1a:	f240 1125 	movw	r1, #293	; 0x125
    3b1e:	f002 fe1d 	bl	675c <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
    3b22:	b95c      	cbnz	r4, 3b3c <nrfx_pwm_simple_playback+0x54>
    3b24:	4928      	ldr	r1, [pc, #160]	; (3bc8 <nrfx_pwm_simple_playback+0xe0>)
    3b26:	4826      	ldr	r0, [pc, #152]	; (3bc0 <nrfx_pwm_simple_playback+0xd8>)
    3b28:	4a26      	ldr	r2, [pc, #152]	; (3bc4 <nrfx_pwm_simple_playback+0xdc>)
    3b2a:	f44f 7393 	mov.w	r3, #294	; 0x126
    3b2e:	f002 feee 	bl	690e <printk>
    3b32:	4824      	ldr	r0, [pc, #144]	; (3bc4 <nrfx_pwm_simple_playback+0xdc>)
    3b34:	f44f 7193 	mov.w	r1, #294	; 0x126
    3b38:	f002 fe10 	bl	675c <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    3b3c:	6833      	ldr	r3, [r6, #0]
    3b3e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    3b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3b46:	d00b      	beq.n	3b60 <nrfx_pwm_simple_playback+0x78>
    3b48:	4920      	ldr	r1, [pc, #128]	; (3bcc <nrfx_pwm_simple_playback+0xe4>)
    3b4a:	481d      	ldr	r0, [pc, #116]	; (3bc0 <nrfx_pwm_simple_playback+0xd8>)
    3b4c:	4a1d      	ldr	r2, [pc, #116]	; (3bc4 <nrfx_pwm_simple_playback+0xdc>)
    3b4e:	f240 1327 	movw	r3, #295	; 0x127
    3b52:	f002 fedc 	bl	690e <printk>
    3b56:	481b      	ldr	r0, [pc, #108]	; (3bc4 <nrfx_pwm_simple_playback+0xdc>)
    3b58:	f240 1127 	movw	r1, #295	; 0x127
    3b5c:	f002 fdfe 	bl	675c <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    3b60:	6828      	ldr	r0, [r5, #0]
    3b62:	4632      	mov	r2, r6
    3b64:	2100      	movs	r1, #0
    3b66:	f7ff fe41 	bl	37ec <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    3b6a:	6828      	ldr	r0, [r5, #0]
    3b6c:	4632      	mov	r2, r6
    3b6e:	2101      	movs	r1, #1
    3b70:	f7ff fe3c 	bl	37ec <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    3b74:	6828      	ldr	r0, [r5, #0]
    3b76:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    3b7a:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    3b7e:	f018 0f01 	tst.w	r8, #1
    3b82:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
    3b86:	d114      	bne.n	3bb2 <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    3b88:	f018 0202 	ands.w	r2, r8, #2
    3b8c:	d003      	beq.n	3b96 <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    3b8e:	2b00      	cmp	r3, #0
    3b90:	bf14      	ite	ne
    3b92:	2208      	movne	r2, #8
    3b94:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    3b96:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    3b98:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    3b9c:	4639      	mov	r1, r7
    3b9e:	fa5f f288 	uxtb.w	r2, r8
    3ba2:	bf18      	it	ne
    3ba4:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    3ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    3baa:	bf08      	it	eq
    3bac:	2308      	moveq	r3, #8
    3bae:	f003 b9a2 	b.w	6ef6 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    3bb2:	2210      	movs	r2, #16
    3bb4:	e7ef      	b.n	3b96 <nrfx_pwm_simple_playback+0xae>
    3bb6:	bf00      	nop
    3bb8:	200008e0 	.word	0x200008e0
    3bbc:	00008001 	.word	0x00008001
    3bc0:	00007610 	.word	0x00007610
    3bc4:	00007f9c 	.word	0x00007f9c
    3bc8:	0000802d 	.word	0x0000802d
    3bcc:	00008040 	.word	0x00008040

00003bd0 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    3bd0:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    3bd2:	4e12      	ldr	r6, [pc, #72]	; (3c1c <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3bd4:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    3bd6:	220c      	movs	r2, #12
    3bd8:	fb02 6204 	mla	r2, r2, r4, r6
{
    3bdc:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    3bde:	7a12      	ldrb	r2, [r2, #8]
    3be0:	b95a      	cbnz	r2, 3bfa <nrfx_pwm_is_stopped+0x2a>
    3be2:	490f      	ldr	r1, [pc, #60]	; (3c20 <nrfx_pwm_is_stopped+0x50>)
    3be4:	480f      	ldr	r0, [pc, #60]	; (3c24 <nrfx_pwm_is_stopped+0x54>)
    3be6:	4a10      	ldr	r2, [pc, #64]	; (3c28 <nrfx_pwm_is_stopped+0x58>)
    3be8:	f240 13a3 	movw	r3, #419	; 0x1a3
    3bec:	f002 fe8f 	bl	690e <printk>
    3bf0:	480d      	ldr	r0, [pc, #52]	; (3c28 <nrfx_pwm_is_stopped+0x58>)
    3bf2:	f240 11a3 	movw	r1, #419	; 0x1a3
    3bf6:	f002 fdb1 	bl	675c <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    3bfa:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    3bfc:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    3bfe:	fb03 6404 	mla	r4, r3, r4, r6
    3c02:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3c04:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    3c08:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    3c0a:	b91a      	cbnz	r2, 3c14 <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    3c0c:	1e98      	subs	r0, r3, #2
    3c0e:	bf18      	it	ne
    3c10:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    3c12:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3c14:	2001      	movs	r0, #1
    3c16:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    3c18:	e7fb      	b.n	3c12 <nrfx_pwm_is_stopped+0x42>
    3c1a:	bf00      	nop
    3c1c:	200008e0 	.word	0x200008e0
    3c20:	00008001 	.word	0x00008001
    3c24:	00007610 	.word	0x00007610
    3c28:	00007f9c 	.word	0x00007f9c

00003c2c <nrfx_pwm_stop>:
{
    3c2c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    3c2e:	4a14      	ldr	r2, [pc, #80]	; (3c80 <nrfx_pwm_stop+0x54>)
    3c30:	7903      	ldrb	r3, [r0, #4]
{
    3c32:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    3c34:	210c      	movs	r1, #12
    3c36:	fb01 2303 	mla	r3, r1, r3, r2
{
    3c3a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    3c3c:	7a1b      	ldrb	r3, [r3, #8]
    3c3e:	b95b      	cbnz	r3, 3c58 <nrfx_pwm_stop+0x2c>
    3c40:	4910      	ldr	r1, [pc, #64]	; (3c84 <nrfx_pwm_stop+0x58>)
    3c42:	4811      	ldr	r0, [pc, #68]	; (3c88 <nrfx_pwm_stop+0x5c>)
    3c44:	4a11      	ldr	r2, [pc, #68]	; (3c8c <nrfx_pwm_stop+0x60>)
    3c46:	f44f 73bf 	mov.w	r3, #382	; 0x17e
    3c4a:	f002 fe60 	bl	690e <printk>
    3c4e:	480f      	ldr	r0, [pc, #60]	; (3c8c <nrfx_pwm_stop+0x60>)
    3c50:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    3c54:	f002 fd82 	bl	675c <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    3c58:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    3c5a:	2200      	movs	r2, #0
    3c5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c60:	2201      	movs	r2, #1
    3c62:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    3c64:	4620      	mov	r0, r4
    3c66:	f7ff ffb3 	bl	3bd0 <nrfx_pwm_is_stopped>
    3c6a:	b938      	cbnz	r0, 3c7c <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    3c6c:	4620      	mov	r0, r4
    3c6e:	f7ff ffaf 	bl	3bd0 <nrfx_pwm_is_stopped>
    3c72:	b918      	cbnz	r0, 3c7c <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    3c74:	2d00      	cmp	r5, #0
    3c76:	d1f9      	bne.n	3c6c <nrfx_pwm_stop+0x40>
}
    3c78:	4628      	mov	r0, r5
    3c7a:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    3c7c:	2501      	movs	r5, #1
    3c7e:	e7fb      	b.n	3c78 <nrfx_pwm_stop+0x4c>
    3c80:	200008e0 	.word	0x200008e0
    3c84:	00008069 	.word	0x00008069
    3c88:	00007610 	.word	0x00007610
    3c8c:	00007f9c 	.word	0x00007f9c

00003c90 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3c90:	4b03      	ldr	r3, [pc, #12]	; (3ca0 <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3c92:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    3c94:	f1a0 0308 	sub.w	r3, r0, #8
    3c98:	4258      	negs	r0, r3
    3c9a:	4158      	adcs	r0, r3
    3c9c:	4770      	bx	lr
    3c9e:	bf00      	nop
    3ca0:	10000130 	.word	0x10000130

00003ca4 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3ca4:	4b06      	ldr	r3, [pc, #24]	; (3cc0 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3ca6:	681b      	ldr	r3, [r3, #0]
    3ca8:	2b08      	cmp	r3, #8
    3caa:	d106      	bne.n	3cba <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3cac:	4b05      	ldr	r3, [pc, #20]	; (3cc4 <nrf52_errata_103+0x20>)
    3cae:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    3cb0:	2b05      	cmp	r3, #5
    3cb2:	d802      	bhi.n	3cba <nrf52_errata_103+0x16>
    3cb4:	4a04      	ldr	r2, [pc, #16]	; (3cc8 <nrf52_errata_103+0x24>)
    3cb6:	5cd0      	ldrb	r0, [r2, r3]
    3cb8:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3cba:	2000      	movs	r0, #0
    #endif
}
    3cbc:	4770      	bx	lr
    3cbe:	bf00      	nop
    3cc0:	10000130 	.word	0x10000130
    3cc4:	10000134 	.word	0x10000134
    3cc8:	000080b4 	.word	0x000080b4

00003ccc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3ccc:	4a02      	ldr	r2, [pc, #8]	; (3cd8 <nvmc_wait+0xc>)
    3cce:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	d0fb      	beq.n	3cce <nvmc_wait+0x2>
}
    3cd6:	4770      	bx	lr
    3cd8:	4001e000 	.word	0x4001e000

00003cdc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3cdc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3cde:	f7ff ffd7 	bl	3c90 <nrf52_errata_136>
    3ce2:	b140      	cbz	r0, 3cf6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ce8:	2200      	movs	r2, #0
    3cea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3cee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3cf2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3cf6:	f7ff ffcb 	bl	3c90 <nrf52_errata_136>
    3cfa:	2800      	cmp	r0, #0
    3cfc:	d046      	beq.n	3d8c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3d02:	4b5b      	ldr	r3, [pc, #364]	; (3e70 <SystemInit+0x194>)
    3d04:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3d08:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3d0c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3d10:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3d14:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3d18:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3d1c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3d20:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3d24:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3d28:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3d2c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3d30:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3d34:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3d38:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3d3c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3d40:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3d44:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3d48:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3d4c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3d50:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3d54:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3d58:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3d5c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3d60:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3d64:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3d68:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3d6c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3d70:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3d74:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3d78:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3d7c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3d80:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3d84:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3d88:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3d8c:	f7ff ff8a 	bl	3ca4 <nrf52_errata_103>
    3d90:	b110      	cbz	r0, 3d98 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    3d92:	4b38      	ldr	r3, [pc, #224]	; (3e74 <SystemInit+0x198>)
    3d94:	4a38      	ldr	r2, [pc, #224]	; (3e78 <SystemInit+0x19c>)
    3d96:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3d98:	f7ff ff84 	bl	3ca4 <nrf52_errata_103>
    3d9c:	b118      	cbz	r0, 3da6 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3d9e:	4b37      	ldr	r3, [pc, #220]	; (3e7c <SystemInit+0x1a0>)
    3da0:	22fb      	movs	r2, #251	; 0xfb
    3da2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3da6:	f7ff ff7d 	bl	3ca4 <nrf52_errata_103>
    3daa:	b148      	cbz	r0, 3dc0 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3dac:	4934      	ldr	r1, [pc, #208]	; (3e80 <SystemInit+0x1a4>)
    3dae:	4b35      	ldr	r3, [pc, #212]	; (3e84 <SystemInit+0x1a8>)
    3db0:	680a      	ldr	r2, [r1, #0]
    3db2:	681b      	ldr	r3, [r3, #0]
    3db4:	f022 020f 	bic.w	r2, r2, #15
    3db8:	f003 030f 	and.w	r3, r3, #15
    3dbc:	4313      	orrs	r3, r2
    3dbe:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    3dc0:	f7ff ff70 	bl	3ca4 <nrf52_errata_103>
    3dc4:	b118      	cbz	r0, 3dce <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3dc6:	4b30      	ldr	r3, [pc, #192]	; (3e88 <SystemInit+0x1ac>)
    3dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
    3dcc:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3dce:	f7ff ff5f 	bl	3c90 <nrf52_errata_136>
    3dd2:	b148      	cbz	r0, 3de8 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3dd8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3ddc:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3dde:	bf44      	itt	mi
    3de0:	f06f 0201 	mvnmi.w	r2, #1
    3de4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3de8:	4b28      	ldr	r3, [pc, #160]	; (3e8c <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3dea:	681b      	ldr	r3, [r3, #0]
    3dec:	2b08      	cmp	r3, #8
    3dee:	d10e      	bne.n	3e0e <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3df0:	4b27      	ldr	r3, [pc, #156]	; (3e90 <SystemInit+0x1b4>)
    3df2:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    3df4:	2b05      	cmp	r3, #5
    3df6:	d802      	bhi.n	3dfe <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    3df8:	4a26      	ldr	r2, [pc, #152]	; (3e94 <SystemInit+0x1b8>)
    3dfa:	5cd3      	ldrb	r3, [r2, r3]
    3dfc:	b13b      	cbz	r3, 3e0e <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3dfe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3e02:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e0a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3e0e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3e12:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3e16:	2a00      	cmp	r2, #0
    3e18:	db03      	blt.n	3e22 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3e1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3e1e:	2b00      	cmp	r3, #0
    3e20:	da22      	bge.n	3e68 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3e22:	491d      	ldr	r1, [pc, #116]	; (3e98 <SystemInit+0x1bc>)
    3e24:	2301      	movs	r3, #1
    3e26:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3e2a:	f7ff ff4f 	bl	3ccc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3e2e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    3e32:	2412      	movs	r4, #18
    3e34:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3e38:	f7ff ff48 	bl	3ccc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3e3c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3e40:	f7ff ff44 	bl	3ccc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3e44:	2300      	movs	r3, #0
    3e46:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3e4a:	f7ff ff3f 	bl	3ccc <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    3e4e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3e52:	4912      	ldr	r1, [pc, #72]	; (3e9c <SystemInit+0x1c0>)
    3e54:	4b12      	ldr	r3, [pc, #72]	; (3ea0 <SystemInit+0x1c4>)
    3e56:	68ca      	ldr	r2, [r1, #12]
    3e58:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3e5c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3e5e:	60cb      	str	r3, [r1, #12]
    3e60:	f3bf 8f4f 	dsb	sy
    __NOP();
    3e64:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3e66:	e7fd      	b.n	3e64 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3e68:	4b0e      	ldr	r3, [pc, #56]	; (3ea4 <SystemInit+0x1c8>)
    3e6a:	4a0f      	ldr	r2, [pc, #60]	; (3ea8 <SystemInit+0x1cc>)
    3e6c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3e6e:	bd10      	pop	{r4, pc}
    3e70:	4000c000 	.word	0x4000c000
    3e74:	4000568c 	.word	0x4000568c
    3e78:	00038148 	.word	0x00038148
    3e7c:	4000f000 	.word	0x4000f000
    3e80:	40000ee4 	.word	0x40000ee4
    3e84:	10000258 	.word	0x10000258
    3e88:	40029640 	.word	0x40029640
    3e8c:	10000130 	.word	0x10000130
    3e90:	10000134 	.word	0x10000134
    3e94:	000080ae 	.word	0x000080ae
    3e98:	4001e000 	.word	0x4001e000
    3e9c:	e000ed00 	.word	0xe000ed00
    3ea0:	05fa0004 	.word	0x05fa0004
    3ea4:	20000054 	.word	0x20000054
    3ea8:	03d09000 	.word	0x03d09000

00003eac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    3eac:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3eae:	4c14      	ldr	r4, [pc, #80]	; (3f00 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    3eb0:	4a14      	ldr	r2, [pc, #80]	; (3f04 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    3eb2:	4915      	ldr	r1, [pc, #84]	; (3f08 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3eb4:	2303      	movs	r3, #3
    3eb6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3eb8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3eba:	4b14      	ldr	r3, [pc, #80]	; (3f0c <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    3ebc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3ebe:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    3ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3ec4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    3ec6:	2300      	movs	r3, #0
    3ec8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    3eca:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3ecc:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    3ece:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    3ed0:	4a0f      	ldr	r2, [pc, #60]	; (3f10 <_DoInit+0x64>)
    3ed2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    3ed4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    3ed6:	2210      	movs	r2, #16
    3ed8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    3eda:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    3edc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3ede:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    3ee0:	f002 fd40 	bl	6964 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3ee4:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    3ee8:	490a      	ldr	r1, [pc, #40]	; (3f14 <_DoInit+0x68>)
    3eea:	4620      	mov	r0, r4
    3eec:	f002 fd3a 	bl	6964 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3ef0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    3ef4:	2320      	movs	r3, #32
    3ef6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3ef8:	f3bf 8f5f 	dmb	sy
}
    3efc:	bd10      	pop	{r4, pc}
    3efe:	bf00      	nop
    3f00:	200008ec 	.word	0x200008ec
    3f04:	000080ba 	.word	0x000080ba
    3f08:	000080c3 	.word	0x000080c3
    3f0c:	20000a06 	.word	0x20000a06
    3f10:	200009f6 	.word	0x200009f6
    3f14:	000080c7 	.word	0x000080c7

00003f18 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3f18:	4b0e      	ldr	r3, [pc, #56]	; (3f54 <z_sys_init_run_level+0x3c>)
{
    3f1a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3f1c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3f20:	3001      	adds	r0, #1
    3f22:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3f26:	42a6      	cmp	r6, r4
    3f28:	d800      	bhi.n	3f2c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3f2a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3f2c:	e9d4 3500 	ldrd	r3, r5, [r4]
    3f30:	4628      	mov	r0, r5
    3f32:	4798      	blx	r3
		if (dev != NULL) {
    3f34:	b165      	cbz	r5, 3f50 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    3f36:	68eb      	ldr	r3, [r5, #12]
    3f38:	b130      	cbz	r0, 3f48 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3f3a:	2800      	cmp	r0, #0
    3f3c:	bfb8      	it	lt
    3f3e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3f40:	28ff      	cmp	r0, #255	; 0xff
    3f42:	bfa8      	it	ge
    3f44:	20ff      	movge	r0, #255	; 0xff
    3f46:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3f48:	785a      	ldrb	r2, [r3, #1]
    3f4a:	f042 0201 	orr.w	r2, r2, #1
    3f4e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3f50:	3408      	adds	r4, #8
    3f52:	e7e8      	b.n	3f26 <z_sys_init_run_level+0xe>
    3f54:	00007438 	.word	0x00007438

00003f58 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    3f58:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    3f5a:	4605      	mov	r5, r0
    3f5c:	b910      	cbnz	r0, 3f64 <z_impl_device_get_binding+0xc>
		return NULL;
    3f5e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    3f60:	4620      	mov	r0, r4
    3f62:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    3f64:	7803      	ldrb	r3, [r0, #0]
    3f66:	2b00      	cmp	r3, #0
    3f68:	d0f9      	beq.n	3f5e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    3f6a:	4a0f      	ldr	r2, [pc, #60]	; (3fa8 <z_impl_device_get_binding+0x50>)
    3f6c:	4c0f      	ldr	r4, [pc, #60]	; (3fac <z_impl_device_get_binding+0x54>)
    3f6e:	4616      	mov	r6, r2
    3f70:	4294      	cmp	r4, r2
    3f72:	d108      	bne.n	3f86 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    3f74:	4c0d      	ldr	r4, [pc, #52]	; (3fac <z_impl_device_get_binding+0x54>)
    3f76:	42b4      	cmp	r4, r6
    3f78:	d0f1      	beq.n	3f5e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3f7a:	4620      	mov	r0, r4
    3f7c:	f002 ffe6 	bl	6f4c <z_device_ready>
    3f80:	b950      	cbnz	r0, 3f98 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    3f82:	3418      	adds	r4, #24
    3f84:	e7f7      	b.n	3f76 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    3f86:	4620      	mov	r0, r4
    3f88:	f002 ffe0 	bl	6f4c <z_device_ready>
    3f8c:	b110      	cbz	r0, 3f94 <z_impl_device_get_binding+0x3c>
    3f8e:	6823      	ldr	r3, [r4, #0]
    3f90:	42ab      	cmp	r3, r5
    3f92:	d0e5      	beq.n	3f60 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    3f94:	3418      	adds	r4, #24
    3f96:	e7eb      	b.n	3f70 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3f98:	6821      	ldr	r1, [r4, #0]
    3f9a:	4628      	mov	r0, r5
    3f9c:	f002 fcfc 	bl	6998 <strcmp>
    3fa0:	2800      	cmp	r0, #0
    3fa2:	d1ee      	bne.n	3f82 <z_impl_device_get_binding+0x2a>
    3fa4:	e7dc      	b.n	3f60 <z_impl_device_get_binding+0x8>
    3fa6:	bf00      	nop
    3fa8:	00007130 	.word	0x00007130
    3fac:	00007088 	.word	0x00007088

00003fb0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fb2:	4604      	mov	r4, r0
    3fb4:	460e      	mov	r6, r1
	__asm__ volatile(
    3fb6:	f04f 0320 	mov.w	r3, #32
    3fba:	f3ef 8711 	mrs	r7, BASEPRI
    3fbe:	f383 8812 	msr	BASEPRI_MAX, r3
    3fc2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    3fc6:	f001 fc01 	bl	57cc <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3fca:	4631      	mov	r1, r6
    3fcc:	4605      	mov	r5, r0
    3fce:	4620      	mov	r0, r4
    3fd0:	f002 ff7f 	bl	6ed2 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    3fd4:	2c04      	cmp	r4, #4
    3fd6:	d10c      	bne.n	3ff2 <z_fatal_error+0x42>
    3fd8:	490a      	ldr	r1, [pc, #40]	; (4004 <z_fatal_error+0x54>)
    3fda:	4a0b      	ldr	r2, [pc, #44]	; (4008 <z_fatal_error+0x58>)
    3fdc:	480b      	ldr	r0, [pc, #44]	; (400c <z_fatal_error+0x5c>)
    3fde:	238f      	movs	r3, #143	; 0x8f
    3fe0:	f002 fc95 	bl	690e <printk>
    3fe4:	480a      	ldr	r0, [pc, #40]	; (4010 <z_fatal_error+0x60>)
    3fe6:	f002 fc92 	bl	690e <printk>
    3fea:	4807      	ldr	r0, [pc, #28]	; (4008 <z_fatal_error+0x58>)
    3fec:	218f      	movs	r1, #143	; 0x8f
    3fee:	f002 fbb5 	bl	675c <assert_post_action>
	__asm__ volatile(
    3ff2:	f387 8811 	msr	BASEPRI, r7
    3ff6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3ffa:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    3ffc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4000:	f7fd bebc 	b.w	1d7c <z_impl_k_thread_abort>
    4004:	000080f0 	.word	0x000080f0
    4008:	000080ce 	.word	0x000080ce
    400c:	00007610 	.word	0x00007610
    4010:	0000810d 	.word	0x0000810d

00004014 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4014:	4c11      	ldr	r4, [pc, #68]	; (405c <idle+0x48>)
    4016:	68a2      	ldr	r2, [r4, #8]
    4018:	f992 200e 	ldrsb.w	r2, [r2, #14]
    401c:	2a00      	cmp	r2, #0
{
    401e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4020:	da09      	bge.n	4036 <idle+0x22>
    4022:	490f      	ldr	r1, [pc, #60]	; (4060 <idle+0x4c>)
    4024:	480f      	ldr	r0, [pc, #60]	; (4064 <idle+0x50>)
    4026:	4a10      	ldr	r2, [pc, #64]	; (4068 <idle+0x54>)
    4028:	2346      	movs	r3, #70	; 0x46
    402a:	f002 fc70 	bl	690e <printk>
    402e:	480e      	ldr	r0, [pc, #56]	; (4068 <idle+0x54>)
    4030:	2146      	movs	r1, #70	; 0x46
    4032:	f002 fb93 	bl	675c <assert_post_action>
	__asm__ volatile(
    4036:	f04f 0220 	mov.w	r2, #32
    403a:	f3ef 8311 	mrs	r3, BASEPRI
    403e:	f382 8812 	msr	BASEPRI_MAX, r2
    4042:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    4046:	f001 ffcf 	bl	5fe8 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    404a:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    404c:	f7fd fade 	bl	160c <pm_system_suspend>
    4050:	2800      	cmp	r0, #0
    4052:	d1f0      	bne.n	4036 <idle+0x22>
	arch_cpu_idle();
    4054:	f7fd fb70 	bl	1738 <arch_cpu_idle>
}
    4058:	e7ed      	b.n	4036 <idle+0x22>
    405a:	bf00      	nop
    405c:	20000994 	.word	0x20000994
    4060:	00008163 	.word	0x00008163
    4064:	00007610 	.word	0x00007610
    4068:	00008142 	.word	0x00008142

0000406c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    406c:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    406e:	2300      	movs	r3, #0
{
    4070:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    4072:	2201      	movs	r2, #1
    4074:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4078:	220f      	movs	r2, #15
    407a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    407e:	4c0d      	ldr	r4, [pc, #52]	; (40b4 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4080:	4a0d      	ldr	r2, [pc, #52]	; (40b8 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    4082:	9301      	str	r3, [sp, #4]
    4084:	490d      	ldr	r1, [pc, #52]	; (40bc <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4086:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    4088:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    408c:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    4090:	f44f 75b0 	mov.w	r5, #352	; 0x160
    4094:	9300      	str	r3, [sp, #0]
    4096:	fb05 1100 	mla	r1, r5, r0, r1
    409a:	4b09      	ldr	r3, [pc, #36]	; (40c0 <init_idle_thread+0x54>)
    409c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    40a0:	4620      	mov	r0, r4
    40a2:	f001 fd15 	bl	5ad0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    40a6:	7b63      	ldrb	r3, [r4, #13]
    40a8:	f023 0304 	bic.w	r3, r3, #4
    40ac:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    40ae:	b007      	add	sp, #28
    40b0:	bd30      	pop	{r4, r5, pc}
    40b2:	bf00      	nop
    40b4:	20000150 	.word	0x20000150
    40b8:	20000994 	.word	0x20000994
    40bc:	20001400 	.word	0x20001400
    40c0:	00004015 	.word	0x00004015

000040c4 <bg_thread_main>:
{
    40c4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    40c6:	4b0a      	ldr	r3, [pc, #40]	; (40f0 <bg_thread_main+0x2c>)
    40c8:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    40ca:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    40cc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    40ce:	f7ff ff23 	bl	3f18 <z_sys_init_run_level>
	boot_banner();
    40d2:	f002 f957 	bl	6384 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    40d6:	2003      	movs	r0, #3
    40d8:	f7ff ff1e 	bl	3f18 <z_sys_init_run_level>
	z_init_static_threads();
    40dc:	f001 fd5c 	bl	5b98 <z_init_static_threads>
	main();
    40e0:	f7fc f998 	bl	414 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    40e4:	4a03      	ldr	r2, [pc, #12]	; (40f4 <bg_thread_main+0x30>)
    40e6:	7b13      	ldrb	r3, [r2, #12]
    40e8:	f023 0301 	bic.w	r3, r3, #1
    40ec:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    40ee:	bd08      	pop	{r3, pc}
    40f0:	20000e06 	.word	0x20000e06
    40f4:	200001d0 	.word	0x200001d0

000040f8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    40f8:	4802      	ldr	r0, [pc, #8]	; (4104 <z_bss_zero+0xc>)
    40fa:	4a03      	ldr	r2, [pc, #12]	; (4108 <z_bss_zero+0x10>)
    40fc:	2100      	movs	r1, #0
    40fe:	1a12      	subs	r2, r2, r0
    4100:	f002 bc61 	b.w	69c6 <memset>
    4104:	20000130 	.word	0x20000130
    4108:	20000fc4 	.word	0x20000fc4

0000410c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    410c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    410e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 41e8 <z_cstart+0xdc>
    4112:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4114:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4118:	4d2d      	ldr	r5, [pc, #180]	; (41d0 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    411a:	4e2e      	ldr	r6, [pc, #184]	; (41d4 <z_cstart+0xc8>)
    411c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    411e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 41ec <z_cstart+0xe0>
    4122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4126:	2400      	movs	r4, #0
    4128:	616b      	str	r3, [r5, #20]
    412a:	23e0      	movs	r3, #224	; 0xe0
    412c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4130:	77ec      	strb	r4, [r5, #31]
    4132:	762c      	strb	r4, [r5, #24]
    4134:	766c      	strb	r4, [r5, #25]
    4136:	76ac      	strb	r4, [r5, #26]
    4138:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    413c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    413e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4142:	626b      	str	r3, [r5, #36]	; 0x24
    4144:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4148:	f7fd fdc2 	bl	1cd0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    414c:	f7fd faee 	bl	172c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4154:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4156:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4158:	f7fd feea 	bl	1f30 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    415c:	f7fd fe20 	bl	1da0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4160:	f240 1301 	movw	r3, #257	; 0x101
    4164:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4168:	ab06      	add	r3, sp, #24
    416a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    416c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4170:	f002 feeb 	bl	6f4a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4174:	4620      	mov	r0, r4
    4176:	f7ff fecf 	bl	3f18 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    417a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    417c:	4d16      	ldr	r5, [pc, #88]	; (41d8 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    417e:	f7ff fecb 	bl	3f18 <z_sys_init_run_level>
	z_sched_init();
    4182:	f001 f98d 	bl	54a0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4186:	4b15      	ldr	r3, [pc, #84]	; (41dc <z_cstart+0xd0>)
    4188:	9305      	str	r3, [sp, #20]
    418a:	2301      	movs	r3, #1
    418c:	4914      	ldr	r1, [pc, #80]	; (41e0 <z_cstart+0xd4>)
    418e:	9400      	str	r4, [sp, #0]
    4190:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4194:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4198:	464b      	mov	r3, r9
    419a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    419e:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    41a0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    41a2:	f001 fc95 	bl	5ad0 <z_setup_new_thread>
    41a6:	7b6a      	ldrb	r2, [r5, #13]
    41a8:	f022 0204 	bic.w	r2, r2, #4
    41ac:	736a      	strb	r2, [r5, #13]
    41ae:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    41b0:	4628      	mov	r0, r5
    41b2:	f000 fdc1 	bl	4d38 <z_ready_thread>
		init_idle_thread(i);
    41b6:	4620      	mov	r0, r4
    41b8:	f7ff ff58 	bl	406c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    41bc:	4b09      	ldr	r3, [pc, #36]	; (41e4 <z_cstart+0xd8>)
    41be:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    41c0:	464a      	mov	r2, r9
    41c2:	4639      	mov	r1, r7
    41c4:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    41c6:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    41c8:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    41cc:	f7fd fbe8 	bl	19a0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    41d0:	e000ed00 	.word	0xe000ed00
    41d4:	20000994 	.word	0x20000994
    41d8:	200001d0 	.word	0x200001d0
    41dc:	0000818b 	.word	0x0000818b
    41e0:	20000fe0 	.word	0x20000fe0
    41e4:	20000150 	.word	0x20000150
    41e8:	20001d80 	.word	0x20001d80
    41ec:	000040c5 	.word	0x000040c5

000041f0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    41f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    41f4:	4d16      	ldr	r5, [pc, #88]	; (4250 <init_mem_slab_module+0x60>)
    41f6:	4c17      	ldr	r4, [pc, #92]	; (4254 <init_mem_slab_module+0x64>)
    41f8:	4e17      	ldr	r6, [pc, #92]	; (4258 <init_mem_slab_module+0x68>)
    41fa:	46a8      	mov	r8, r5
    41fc:	42ac      	cmp	r4, r5
    41fe:	d90c      	bls.n	421a <init_mem_slab_module+0x2a>
    4200:	4916      	ldr	r1, [pc, #88]	; (425c <init_mem_slab_module+0x6c>)
    4202:	4817      	ldr	r0, [pc, #92]	; (4260 <init_mem_slab_module+0x70>)
    4204:	233c      	movs	r3, #60	; 0x3c
    4206:	4632      	mov	r2, r6
    4208:	f002 fb81 	bl	690e <printk>
    420c:	4815      	ldr	r0, [pc, #84]	; (4264 <init_mem_slab_module+0x74>)
    420e:	f002 fb7e 	bl	690e <printk>
    4212:	213c      	movs	r1, #60	; 0x3c
    4214:	4630      	mov	r0, r6
    4216:	f002 faa1 	bl	675c <assert_post_action>
    421a:	4544      	cmp	r4, r8
    421c:	d302      	bcc.n	4224 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    421e:	2000      	movs	r0, #0
	return rc;
}
    4220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4224:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    4228:	ea41 0302 	orr.w	r3, r1, r2
    422c:	f013 0303 	ands.w	r3, r3, #3
    4230:	d10b      	bne.n	424a <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    4232:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    4234:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    4236:	4283      	cmp	r3, r0
    4238:	d101      	bne.n	423e <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    423a:	3420      	adds	r4, #32
    423c:	e7de      	b.n	41fc <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    423e:	69a7      	ldr	r7, [r4, #24]
    4240:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4242:	3301      	adds	r3, #1
		slab->free_list = p;
    4244:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    4246:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4248:	e7f5      	b.n	4236 <init_mem_slab_module+0x46>
		return -EINVAL;
    424a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    424e:	e7e7      	b.n	4220 <init_mem_slab_module+0x30>
    4250:	200000dc 	.word	0x200000dc
    4254:	200000dc 	.word	0x200000dc
    4258:	00008190 	.word	0x00008190
    425c:	000081b5 	.word	0x000081b5
    4260:	00007610 	.word	0x00007610
    4264:	000081d2 	.word	0x000081d2

00004268 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    426c:	4604      	mov	r4, r0
    426e:	460e      	mov	r6, r1
    4270:	4690      	mov	r8, r2
    4272:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4274:	f100 0508 	add.w	r5, r0, #8
    4278:	f04f 0320 	mov.w	r3, #32
    427c:	f3ef 8711 	mrs	r7, BASEPRI
    4280:	f383 8812 	msr	BASEPRI_MAX, r3
    4284:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4288:	4628      	mov	r0, r5
    428a:	f001 fd15 	bl	5cb8 <z_spin_lock_valid>
    428e:	b968      	cbnz	r0, 42ac <k_mem_slab_alloc+0x44>
    4290:	4a24      	ldr	r2, [pc, #144]	; (4324 <k_mem_slab_alloc+0xbc>)
    4292:	4925      	ldr	r1, [pc, #148]	; (4328 <k_mem_slab_alloc+0xc0>)
    4294:	4825      	ldr	r0, [pc, #148]	; (432c <k_mem_slab_alloc+0xc4>)
    4296:	2381      	movs	r3, #129	; 0x81
    4298:	f002 fb39 	bl	690e <printk>
    429c:	4824      	ldr	r0, [pc, #144]	; (4330 <k_mem_slab_alloc+0xc8>)
    429e:	4629      	mov	r1, r5
    42a0:	f002 fb35 	bl	690e <printk>
    42a4:	481f      	ldr	r0, [pc, #124]	; (4324 <k_mem_slab_alloc+0xbc>)
    42a6:	2181      	movs	r1, #129	; 0x81
    42a8:	f002 fa58 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    42ac:	4628      	mov	r0, r5
    42ae:	f001 fd21 	bl	5cf4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    42b2:	69a3      	ldr	r3, [r4, #24]
    42b4:	b1eb      	cbz	r3, 42f2 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    42b6:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    42b8:	681b      	ldr	r3, [r3, #0]
    42ba:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    42bc:	69e3      	ldr	r3, [r4, #28]
    42be:	3301      	adds	r3, #1
    42c0:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    42c2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    42c4:	4628      	mov	r0, r5
    42c6:	f001 fd05 	bl	5cd4 <z_spin_unlock_valid>
    42ca:	b968      	cbnz	r0, 42e8 <k_mem_slab_alloc+0x80>
    42cc:	4a15      	ldr	r2, [pc, #84]	; (4324 <k_mem_slab_alloc+0xbc>)
    42ce:	4919      	ldr	r1, [pc, #100]	; (4334 <k_mem_slab_alloc+0xcc>)
    42d0:	4816      	ldr	r0, [pc, #88]	; (432c <k_mem_slab_alloc+0xc4>)
    42d2:	23ac      	movs	r3, #172	; 0xac
    42d4:	f002 fb1b 	bl	690e <printk>
    42d8:	4817      	ldr	r0, [pc, #92]	; (4338 <k_mem_slab_alloc+0xd0>)
    42da:	4629      	mov	r1, r5
    42dc:	f002 fb17 	bl	690e <printk>
    42e0:	4810      	ldr	r0, [pc, #64]	; (4324 <k_mem_slab_alloc+0xbc>)
    42e2:	21ac      	movs	r1, #172	; 0xac
    42e4:	f002 fa3a 	bl	675c <assert_post_action>
	__asm__ volatile(
    42e8:	f387 8811 	msr	BASEPRI, r7
    42ec:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    42f0:	e013      	b.n	431a <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    42f2:	ea58 0209 	orrs.w	r2, r8, r9
    42f6:	d103      	bne.n	4300 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    42f8:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    42fa:	f06f 040b 	mvn.w	r4, #11
    42fe:	e7e1      	b.n	42c4 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4300:	4622      	mov	r2, r4
    4302:	e9cd 8900 	strd	r8, r9, [sp]
    4306:	4639      	mov	r1, r7
    4308:	4628      	mov	r0, r5
    430a:	f000 fec7 	bl	509c <z_pend_curr>
		if (result == 0) {
    430e:	4604      	mov	r4, r0
    4310:	b918      	cbnz	r0, 431a <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    4312:	4b0a      	ldr	r3, [pc, #40]	; (433c <k_mem_slab_alloc+0xd4>)
    4314:	689b      	ldr	r3, [r3, #8]
    4316:	695b      	ldr	r3, [r3, #20]
    4318:	6033      	str	r3, [r6, #0]
}
    431a:	4620      	mov	r0, r4
    431c:	b003      	add	sp, #12
    431e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4322:	bf00      	nop
    4324:	000077fd 	.word	0x000077fd
    4328:	0000784f 	.word	0x0000784f
    432c:	00007610 	.word	0x00007610
    4330:	00007864 	.word	0x00007864
    4334:	00007823 	.word	0x00007823
    4338:	0000783a 	.word	0x0000783a
    433c:	20000994 	.word	0x20000994

00004340 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4344:	4604      	mov	r4, r0
    4346:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4348:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    434c:	f04f 0320 	mov.w	r3, #32
    4350:	f3ef 8711 	mrs	r7, BASEPRI
    4354:	f383 8812 	msr	BASEPRI_MAX, r3
    4358:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    435c:	4628      	mov	r0, r5
    435e:	f001 fcab 	bl	5cb8 <z_spin_lock_valid>
    4362:	b968      	cbnz	r0, 4380 <k_mem_slab_free+0x40>
    4364:	4a22      	ldr	r2, [pc, #136]	; (43f0 <k_mem_slab_free+0xb0>)
    4366:	4923      	ldr	r1, [pc, #140]	; (43f4 <k_mem_slab_free+0xb4>)
    4368:	4823      	ldr	r0, [pc, #140]	; (43f8 <k_mem_slab_free+0xb8>)
    436a:	2381      	movs	r3, #129	; 0x81
    436c:	f002 facf 	bl	690e <printk>
    4370:	4822      	ldr	r0, [pc, #136]	; (43fc <k_mem_slab_free+0xbc>)
    4372:	4629      	mov	r1, r5
    4374:	f002 facb 	bl	690e <printk>
    4378:	481d      	ldr	r0, [pc, #116]	; (43f0 <k_mem_slab_free+0xb0>)
    437a:	2181      	movs	r1, #129	; 0x81
    437c:	f002 f9ee 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    4380:	4628      	mov	r0, r5
    4382:	f001 fcb7 	bl	5cf4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4386:	f8d4 8018 	ldr.w	r8, [r4, #24]
    438a:	f1b8 0f00 	cmp.w	r8, #0
    438e:	d10f      	bne.n	43b0 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4390:	4620      	mov	r0, r4
    4392:	f001 f835 	bl	5400 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4396:	b158      	cbz	r0, 43b0 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4398:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    439a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    439c:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    43a0:	f000 fcca 	bl	4d38 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    43a4:	4639      	mov	r1, r7
    43a6:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    43a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    43ac:	f000 ba70 	b.w	4890 <z_reschedule>
	**(char ***) mem = slab->free_list;
    43b0:	6833      	ldr	r3, [r6, #0]
    43b2:	69a2      	ldr	r2, [r4, #24]
    43b4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    43b6:	6833      	ldr	r3, [r6, #0]
    43b8:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    43ba:	69e3      	ldr	r3, [r4, #28]
    43bc:	3b01      	subs	r3, #1
    43be:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    43c0:	4628      	mov	r0, r5
    43c2:	f001 fc87 	bl	5cd4 <z_spin_unlock_valid>
    43c6:	b968      	cbnz	r0, 43e4 <k_mem_slab_free+0xa4>
    43c8:	4a09      	ldr	r2, [pc, #36]	; (43f0 <k_mem_slab_free+0xb0>)
    43ca:	490d      	ldr	r1, [pc, #52]	; (4400 <k_mem_slab_free+0xc0>)
    43cc:	480a      	ldr	r0, [pc, #40]	; (43f8 <k_mem_slab_free+0xb8>)
    43ce:	23ac      	movs	r3, #172	; 0xac
    43d0:	f002 fa9d 	bl	690e <printk>
    43d4:	480b      	ldr	r0, [pc, #44]	; (4404 <k_mem_slab_free+0xc4>)
    43d6:	4629      	mov	r1, r5
    43d8:	f002 fa99 	bl	690e <printk>
    43dc:	4804      	ldr	r0, [pc, #16]	; (43f0 <k_mem_slab_free+0xb0>)
    43de:	21ac      	movs	r1, #172	; 0xac
    43e0:	f002 f9bc 	bl	675c <assert_post_action>
	__asm__ volatile(
    43e4:	f387 8811 	msr	BASEPRI, r7
    43e8:	f3bf 8f6f 	isb	sy
}
    43ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43f0:	000077fd 	.word	0x000077fd
    43f4:	0000784f 	.word	0x0000784f
    43f8:	00007610 	.word	0x00007610
    43fc:	00007864 	.word	0x00007864
    4400:	00007823 	.word	0x00007823
    4404:	0000783a 	.word	0x0000783a

00004408 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4408:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    440c:	4604      	mov	r4, r0
    440e:	4616      	mov	r6, r2
    4410:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4412:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4416:	b163      	cbz	r3, 4432 <z_impl_k_mutex_lock+0x2a>
    4418:	4970      	ldr	r1, [pc, #448]	; (45dc <z_impl_k_mutex_lock+0x1d4>)
    441a:	4a71      	ldr	r2, [pc, #452]	; (45e0 <z_impl_k_mutex_lock+0x1d8>)
    441c:	4871      	ldr	r0, [pc, #452]	; (45e4 <z_impl_k_mutex_lock+0x1dc>)
    441e:	2365      	movs	r3, #101	; 0x65
    4420:	f002 fa75 	bl	690e <printk>
    4424:	4870      	ldr	r0, [pc, #448]	; (45e8 <z_impl_k_mutex_lock+0x1e0>)
    4426:	f002 fa72 	bl	690e <printk>
    442a:	486d      	ldr	r0, [pc, #436]	; (45e0 <z_impl_k_mutex_lock+0x1d8>)
    442c:	2165      	movs	r1, #101	; 0x65
    442e:	f002 f995 	bl	675c <assert_post_action>
	__asm__ volatile(
    4432:	f04f 0320 	mov.w	r3, #32
    4436:	f3ef 8811 	mrs	r8, BASEPRI
    443a:	f383 8812 	msr	BASEPRI_MAX, r3
    443e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4442:	486a      	ldr	r0, [pc, #424]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    4444:	f001 fc38 	bl	5cb8 <z_spin_lock_valid>
    4448:	b968      	cbnz	r0, 4466 <z_impl_k_mutex_lock+0x5e>
    444a:	4a69      	ldr	r2, [pc, #420]	; (45f0 <z_impl_k_mutex_lock+0x1e8>)
    444c:	4969      	ldr	r1, [pc, #420]	; (45f4 <z_impl_k_mutex_lock+0x1ec>)
    444e:	4865      	ldr	r0, [pc, #404]	; (45e4 <z_impl_k_mutex_lock+0x1dc>)
    4450:	2381      	movs	r3, #129	; 0x81
    4452:	f002 fa5c 	bl	690e <printk>
    4456:	4965      	ldr	r1, [pc, #404]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    4458:	4867      	ldr	r0, [pc, #412]	; (45f8 <z_impl_k_mutex_lock+0x1f0>)
    445a:	f002 fa58 	bl	690e <printk>
    445e:	4864      	ldr	r0, [pc, #400]	; (45f0 <z_impl_k_mutex_lock+0x1e8>)
    4460:	2181      	movs	r1, #129	; 0x81
    4462:	f002 f97b 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    4466:	4861      	ldr	r0, [pc, #388]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    4468:	f001 fc44 	bl	5cf4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    446c:	68e3      	ldr	r3, [r4, #12]
    446e:	4a63      	ldr	r2, [pc, #396]	; (45fc <z_impl_k_mutex_lock+0x1f4>)
    4470:	b1fb      	cbz	r3, 44b2 <z_impl_k_mutex_lock+0xaa>
    4472:	68a0      	ldr	r0, [r4, #8]
    4474:	6891      	ldr	r1, [r2, #8]
    4476:	4288      	cmp	r0, r1
    4478:	d03d      	beq.n	44f6 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    447a:	ea56 0307 	orrs.w	r3, r6, r7
    447e:	d13c      	bne.n	44fa <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4480:	485a      	ldr	r0, [pc, #360]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    4482:	f001 fc27 	bl	5cd4 <z_spin_unlock_valid>
    4486:	b968      	cbnz	r0, 44a4 <z_impl_k_mutex_lock+0x9c>
    4488:	4a59      	ldr	r2, [pc, #356]	; (45f0 <z_impl_k_mutex_lock+0x1e8>)
    448a:	495d      	ldr	r1, [pc, #372]	; (4600 <z_impl_k_mutex_lock+0x1f8>)
    448c:	4855      	ldr	r0, [pc, #340]	; (45e4 <z_impl_k_mutex_lock+0x1dc>)
    448e:	23ac      	movs	r3, #172	; 0xac
    4490:	f002 fa3d 	bl	690e <printk>
    4494:	4955      	ldr	r1, [pc, #340]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    4496:	485b      	ldr	r0, [pc, #364]	; (4604 <z_impl_k_mutex_lock+0x1fc>)
    4498:	f002 fa39 	bl	690e <printk>
    449c:	4854      	ldr	r0, [pc, #336]	; (45f0 <z_impl_k_mutex_lock+0x1e8>)
    449e:	21ac      	movs	r1, #172	; 0xac
    44a0:	f002 f95c 	bl	675c <assert_post_action>
	__asm__ volatile(
    44a4:	f388 8811 	msr	BASEPRI, r8
    44a8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    44ac:	f06f 000f 	mvn.w	r0, #15
    44b0:	e01e      	b.n	44f0 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    44b2:	6891      	ldr	r1, [r2, #8]
    44b4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    44b8:	484c      	ldr	r0, [pc, #304]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    44ba:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    44bc:	3301      	adds	r3, #1
    44be:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    44c0:	6893      	ldr	r3, [r2, #8]
    44c2:	60a3      	str	r3, [r4, #8]
    44c4:	f001 fc06 	bl	5cd4 <z_spin_unlock_valid>
    44c8:	b968      	cbnz	r0, 44e6 <z_impl_k_mutex_lock+0xde>
    44ca:	4a49      	ldr	r2, [pc, #292]	; (45f0 <z_impl_k_mutex_lock+0x1e8>)
    44cc:	494c      	ldr	r1, [pc, #304]	; (4600 <z_impl_k_mutex_lock+0x1f8>)
    44ce:	4845      	ldr	r0, [pc, #276]	; (45e4 <z_impl_k_mutex_lock+0x1dc>)
    44d0:	23ac      	movs	r3, #172	; 0xac
    44d2:	f002 fa1c 	bl	690e <printk>
    44d6:	4945      	ldr	r1, [pc, #276]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    44d8:	484a      	ldr	r0, [pc, #296]	; (4604 <z_impl_k_mutex_lock+0x1fc>)
    44da:	f002 fa18 	bl	690e <printk>
    44de:	4844      	ldr	r0, [pc, #272]	; (45f0 <z_impl_k_mutex_lock+0x1e8>)
    44e0:	21ac      	movs	r1, #172	; 0xac
    44e2:	f002 f93b 	bl	675c <assert_post_action>
    44e6:	f388 8811 	msr	BASEPRI, r8
    44ea:	f3bf 8f6f 	isb	sy
		return 0;
    44ee:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    44f0:	b002      	add	sp, #8
    44f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    44f6:	6921      	ldr	r1, [r4, #16]
    44f8:	e7de      	b.n	44b8 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    44fa:	f991 100e 	ldrsb.w	r1, [r1, #14]
    44fe:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    4502:	4299      	cmp	r1, r3
    4504:	bfa8      	it	ge
    4506:	4619      	movge	r1, r3
    4508:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    450c:	4291      	cmp	r1, r2
    450e:	bfb8      	it	lt
    4510:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4512:	428b      	cmp	r3, r1
    4514:	dd44      	ble.n	45a0 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    4516:	f000 fdf1 	bl	50fc <z_set_prio>
    451a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    451c:	e9cd 6700 	strd	r6, r7, [sp]
    4520:	4832      	ldr	r0, [pc, #200]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    4522:	4622      	mov	r2, r4
    4524:	4641      	mov	r1, r8
    4526:	f000 fdb9 	bl	509c <z_pend_curr>
	if (got_mutex == 0) {
    452a:	2800      	cmp	r0, #0
    452c:	d0e0      	beq.n	44f0 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    452e:	f04f 0320 	mov.w	r3, #32
    4532:	f3ef 8611 	mrs	r6, BASEPRI
    4536:	f383 8812 	msr	BASEPRI_MAX, r3
    453a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    453e:	482b      	ldr	r0, [pc, #172]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    4540:	f001 fbba 	bl	5cb8 <z_spin_lock_valid>
    4544:	b968      	cbnz	r0, 4562 <z_impl_k_mutex_lock+0x15a>
    4546:	4a2a      	ldr	r2, [pc, #168]	; (45f0 <z_impl_k_mutex_lock+0x1e8>)
    4548:	492a      	ldr	r1, [pc, #168]	; (45f4 <z_impl_k_mutex_lock+0x1ec>)
    454a:	4826      	ldr	r0, [pc, #152]	; (45e4 <z_impl_k_mutex_lock+0x1dc>)
    454c:	2381      	movs	r3, #129	; 0x81
    454e:	f002 f9de 	bl	690e <printk>
    4552:	4926      	ldr	r1, [pc, #152]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    4554:	4828      	ldr	r0, [pc, #160]	; (45f8 <z_impl_k_mutex_lock+0x1f0>)
    4556:	f002 f9da 	bl	690e <printk>
    455a:	4825      	ldr	r0, [pc, #148]	; (45f0 <z_impl_k_mutex_lock+0x1e8>)
    455c:	2181      	movs	r1, #129	; 0x81
    455e:	f002 f8fd 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    4562:	4822      	ldr	r0, [pc, #136]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    4564:	f001 fbc6 	bl	5cf4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4568:	6823      	ldr	r3, [r4, #0]
    456a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    456c:	429c      	cmp	r4, r3
    456e:	d00a      	beq.n	4586 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4570:	b14b      	cbz	r3, 4586 <z_impl_k_mutex_lock+0x17e>
    4572:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4576:	4299      	cmp	r1, r3
    4578:	bfa8      	it	ge
    457a:	4619      	movge	r1, r3
    457c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4580:	4299      	cmp	r1, r3
    4582:	bfb8      	it	lt
    4584:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4586:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4588:	f990 300e 	ldrsb.w	r3, [r0, #14]
    458c:	4299      	cmp	r1, r3
    458e:	d109      	bne.n	45a4 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    4590:	b16d      	cbz	r5, 45ae <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    4592:	4816      	ldr	r0, [pc, #88]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    4594:	4631      	mov	r1, r6
    4596:	f000 f97b 	bl	4890 <z_reschedule>
	return -EAGAIN;
    459a:	f06f 000a 	mvn.w	r0, #10
    459e:	e7a7      	b.n	44f0 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    45a0:	2500      	movs	r5, #0
    45a2:	e7bb      	b.n	451c <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    45a4:	f000 fdaa 	bl	50fc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    45a8:	2800      	cmp	r0, #0
    45aa:	d1f2      	bne.n	4592 <z_impl_k_mutex_lock+0x18a>
    45ac:	e7f0      	b.n	4590 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    45ae:	480f      	ldr	r0, [pc, #60]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    45b0:	f001 fb90 	bl	5cd4 <z_spin_unlock_valid>
    45b4:	b968      	cbnz	r0, 45d2 <z_impl_k_mutex_lock+0x1ca>
    45b6:	4a0e      	ldr	r2, [pc, #56]	; (45f0 <z_impl_k_mutex_lock+0x1e8>)
    45b8:	4911      	ldr	r1, [pc, #68]	; (4600 <z_impl_k_mutex_lock+0x1f8>)
    45ba:	480a      	ldr	r0, [pc, #40]	; (45e4 <z_impl_k_mutex_lock+0x1dc>)
    45bc:	23ac      	movs	r3, #172	; 0xac
    45be:	f002 f9a6 	bl	690e <printk>
    45c2:	490a      	ldr	r1, [pc, #40]	; (45ec <z_impl_k_mutex_lock+0x1e4>)
    45c4:	480f      	ldr	r0, [pc, #60]	; (4604 <z_impl_k_mutex_lock+0x1fc>)
    45c6:	f002 f9a2 	bl	690e <printk>
    45ca:	4809      	ldr	r0, [pc, #36]	; (45f0 <z_impl_k_mutex_lock+0x1e8>)
    45cc:	21ac      	movs	r1, #172	; 0xac
    45ce:	f002 f8c5 	bl	675c <assert_post_action>
	__asm__ volatile(
    45d2:	f386 8811 	msr	BASEPRI, r6
    45d6:	f3bf 8f6f 	isb	sy
    45da:	e7de      	b.n	459a <z_impl_k_mutex_lock+0x192>
    45dc:	00008213 	.word	0x00008213
    45e0:	000081f1 	.word	0x000081f1
    45e4:	00007610 	.word	0x00007610
    45e8:	00008225 	.word	0x00008225
    45ec:	200009bc 	.word	0x200009bc
    45f0:	000077fd 	.word	0x000077fd
    45f4:	0000784f 	.word	0x0000784f
    45f8:	00007864 	.word	0x00007864
    45fc:	20000994 	.word	0x20000994
    4600:	00007823 	.word	0x00007823
    4604:	0000783a 	.word	0x0000783a

00004608 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4608:	b538      	push	{r3, r4, r5, lr}
    460a:	4604      	mov	r4, r0
    460c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4610:	b163      	cbz	r3, 462c <z_impl_k_mutex_unlock+0x24>
    4612:	4952      	ldr	r1, [pc, #328]	; (475c <z_impl_k_mutex_unlock+0x154>)
    4614:	4a52      	ldr	r2, [pc, #328]	; (4760 <z_impl_k_mutex_unlock+0x158>)
    4616:	4853      	ldr	r0, [pc, #332]	; (4764 <z_impl_k_mutex_unlock+0x15c>)
    4618:	23c7      	movs	r3, #199	; 0xc7
    461a:	f002 f978 	bl	690e <printk>
    461e:	4852      	ldr	r0, [pc, #328]	; (4768 <z_impl_k_mutex_unlock+0x160>)
    4620:	f002 f975 	bl	690e <printk>
    4624:	484e      	ldr	r0, [pc, #312]	; (4760 <z_impl_k_mutex_unlock+0x158>)
    4626:	21c7      	movs	r1, #199	; 0xc7
    4628:	f002 f898 	bl	675c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    462c:	68a3      	ldr	r3, [r4, #8]
    462e:	2b00      	cmp	r3, #0
    4630:	f000 808d 	beq.w	474e <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4634:	4d4d      	ldr	r5, [pc, #308]	; (476c <z_impl_k_mutex_unlock+0x164>)
    4636:	68aa      	ldr	r2, [r5, #8]
    4638:	4293      	cmp	r3, r2
    463a:	f040 808b 	bne.w	4754 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    463e:	68e3      	ldr	r3, [r4, #12]
    4640:	b94b      	cbnz	r3, 4656 <z_impl_k_mutex_unlock+0x4e>
    4642:	494b      	ldr	r1, [pc, #300]	; (4770 <z_impl_k_mutex_unlock+0x168>)
    4644:	4847      	ldr	r0, [pc, #284]	; (4764 <z_impl_k_mutex_unlock+0x15c>)
    4646:	4a46      	ldr	r2, [pc, #280]	; (4760 <z_impl_k_mutex_unlock+0x158>)
    4648:	23df      	movs	r3, #223	; 0xdf
    464a:	f002 f960 	bl	690e <printk>
    464e:	4844      	ldr	r0, [pc, #272]	; (4760 <z_impl_k_mutex_unlock+0x158>)
    4650:	21df      	movs	r1, #223	; 0xdf
    4652:	f002 f883 	bl	675c <assert_post_action>
    4656:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    465a:	b163      	cbz	r3, 4676 <z_impl_k_mutex_unlock+0x6e>
    465c:	493f      	ldr	r1, [pc, #252]	; (475c <z_impl_k_mutex_unlock+0x154>)
    465e:	4a45      	ldr	r2, [pc, #276]	; (4774 <z_impl_k_mutex_unlock+0x16c>)
    4660:	4840      	ldr	r0, [pc, #256]	; (4764 <z_impl_k_mutex_unlock+0x15c>)
    4662:	23fd      	movs	r3, #253	; 0xfd
    4664:	f002 f953 	bl	690e <printk>
    4668:	4843      	ldr	r0, [pc, #268]	; (4778 <z_impl_k_mutex_unlock+0x170>)
    466a:	f002 f950 	bl	690e <printk>
    466e:	4841      	ldr	r0, [pc, #260]	; (4774 <z_impl_k_mutex_unlock+0x16c>)
    4670:	21fd      	movs	r1, #253	; 0xfd
    4672:	f002 f873 	bl	675c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    4676:	68ab      	ldr	r3, [r5, #8]
    4678:	7bdb      	ldrb	r3, [r3, #15]
    467a:	2b01      	cmp	r3, #1
    467c:	d10c      	bne.n	4698 <z_impl_k_mutex_unlock+0x90>
    467e:	493f      	ldr	r1, [pc, #252]	; (477c <z_impl_k_mutex_unlock+0x174>)
    4680:	4a3c      	ldr	r2, [pc, #240]	; (4774 <z_impl_k_mutex_unlock+0x16c>)
    4682:	4838      	ldr	r0, [pc, #224]	; (4764 <z_impl_k_mutex_unlock+0x15c>)
    4684:	23fe      	movs	r3, #254	; 0xfe
    4686:	f002 f942 	bl	690e <printk>
    468a:	483b      	ldr	r0, [pc, #236]	; (4778 <z_impl_k_mutex_unlock+0x170>)
    468c:	f002 f93f 	bl	690e <printk>
    4690:	4838      	ldr	r0, [pc, #224]	; (4774 <z_impl_k_mutex_unlock+0x16c>)
    4692:	21fe      	movs	r1, #254	; 0xfe
    4694:	f002 f862 	bl	675c <assert_post_action>

	--_current->base.sched_locked;
    4698:	68aa      	ldr	r2, [r5, #8]
    469a:	7bd3      	ldrb	r3, [r2, #15]
    469c:	3b01      	subs	r3, #1
    469e:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    46a0:	68e3      	ldr	r3, [r4, #12]
    46a2:	2b01      	cmp	r3, #1
    46a4:	d905      	bls.n	46b2 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    46a6:	3b01      	subs	r3, #1
    46a8:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    46aa:	f000 fe2d 	bl	5308 <k_sched_unlock>

	return 0;
    46ae:	2000      	movs	r0, #0
}
    46b0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    46b2:	f04f 0320 	mov.w	r3, #32
    46b6:	f3ef 8511 	mrs	r5, BASEPRI
    46ba:	f383 8812 	msr	BASEPRI_MAX, r3
    46be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    46c2:	482f      	ldr	r0, [pc, #188]	; (4780 <z_impl_k_mutex_unlock+0x178>)
    46c4:	f001 faf8 	bl	5cb8 <z_spin_lock_valid>
    46c8:	b968      	cbnz	r0, 46e6 <z_impl_k_mutex_unlock+0xde>
    46ca:	4a2e      	ldr	r2, [pc, #184]	; (4784 <z_impl_k_mutex_unlock+0x17c>)
    46cc:	492e      	ldr	r1, [pc, #184]	; (4788 <z_impl_k_mutex_unlock+0x180>)
    46ce:	4825      	ldr	r0, [pc, #148]	; (4764 <z_impl_k_mutex_unlock+0x15c>)
    46d0:	2381      	movs	r3, #129	; 0x81
    46d2:	f002 f91c 	bl	690e <printk>
    46d6:	492a      	ldr	r1, [pc, #168]	; (4780 <z_impl_k_mutex_unlock+0x178>)
    46d8:	482c      	ldr	r0, [pc, #176]	; (478c <z_impl_k_mutex_unlock+0x184>)
    46da:	f002 f918 	bl	690e <printk>
    46de:	4829      	ldr	r0, [pc, #164]	; (4784 <z_impl_k_mutex_unlock+0x17c>)
    46e0:	2181      	movs	r1, #129	; 0x81
    46e2:	f002 f83b 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    46e6:	4826      	ldr	r0, [pc, #152]	; (4780 <z_impl_k_mutex_unlock+0x178>)
    46e8:	f001 fb04 	bl	5cf4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    46ec:	68a0      	ldr	r0, [r4, #8]
    46ee:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    46f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    46f4:	4299      	cmp	r1, r3
    46f6:	d001      	beq.n	46fc <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    46f8:	f000 fd00 	bl	50fc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    46fc:	4620      	mov	r0, r4
    46fe:	f000 fe7f 	bl	5400 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4702:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4704:	b158      	cbz	r0, 471e <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    4706:	f990 200e 	ldrsb.w	r2, [r0, #14]
    470a:	6122      	str	r2, [r4, #16]
    470c:	2200      	movs	r2, #0
    470e:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4710:	f000 fb12 	bl	4d38 <z_ready_thread>
		z_reschedule(&lock, key);
    4714:	481a      	ldr	r0, [pc, #104]	; (4780 <z_impl_k_mutex_unlock+0x178>)
    4716:	4629      	mov	r1, r5
    4718:	f000 f8ba 	bl	4890 <z_reschedule>
    471c:	e7c5      	b.n	46aa <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    471e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4720:	4817      	ldr	r0, [pc, #92]	; (4780 <z_impl_k_mutex_unlock+0x178>)
    4722:	f001 fad7 	bl	5cd4 <z_spin_unlock_valid>
    4726:	b968      	cbnz	r0, 4744 <z_impl_k_mutex_unlock+0x13c>
    4728:	4a16      	ldr	r2, [pc, #88]	; (4784 <z_impl_k_mutex_unlock+0x17c>)
    472a:	4919      	ldr	r1, [pc, #100]	; (4790 <z_impl_k_mutex_unlock+0x188>)
    472c:	480d      	ldr	r0, [pc, #52]	; (4764 <z_impl_k_mutex_unlock+0x15c>)
    472e:	23ac      	movs	r3, #172	; 0xac
    4730:	f002 f8ed 	bl	690e <printk>
    4734:	4912      	ldr	r1, [pc, #72]	; (4780 <z_impl_k_mutex_unlock+0x178>)
    4736:	4817      	ldr	r0, [pc, #92]	; (4794 <z_impl_k_mutex_unlock+0x18c>)
    4738:	f002 f8e9 	bl	690e <printk>
    473c:	4811      	ldr	r0, [pc, #68]	; (4784 <z_impl_k_mutex_unlock+0x17c>)
    473e:	21ac      	movs	r1, #172	; 0xac
    4740:	f002 f80c 	bl	675c <assert_post_action>
	__asm__ volatile(
    4744:	f385 8811 	msr	BASEPRI, r5
    4748:	f3bf 8f6f 	isb	sy
    474c:	e7ad      	b.n	46aa <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    474e:	f06f 0015 	mvn.w	r0, #21
    4752:	e7ad      	b.n	46b0 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    4754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4758:	e7aa      	b.n	46b0 <z_impl_k_mutex_unlock+0xa8>
    475a:	bf00      	nop
    475c:	00008213 	.word	0x00008213
    4760:	000081f1 	.word	0x000081f1
    4764:	00007610 	.word	0x00007610
    4768:	00008225 	.word	0x00008225
    476c:	20000994 	.word	0x20000994
    4770:	0000824a 	.word	0x0000824a
    4774:	00008261 	.word	0x00008261
    4778:	0000828c 	.word	0x0000828c
    477c:	0000828f 	.word	0x0000828f
    4780:	200009bc 	.word	0x200009bc
    4784:	000077fd 	.word	0x000077fd
    4788:	0000784f 	.word	0x0000784f
    478c:	00007864 	.word	0x00007864
    4790:	00007823 	.word	0x00007823
    4794:	0000783a 	.word	0x0000783a

00004798 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    4798:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    479a:	4c08      	ldr	r4, [pc, #32]	; (47bc <z_reset_time_slice+0x24>)
    479c:	6823      	ldr	r3, [r4, #0]
    479e:	b15b      	cbz	r3, 47b8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    47a0:	f7fe fe0a 	bl	33b8 <sys_clock_elapsed>
    47a4:	4603      	mov	r3, r0
    47a6:	6820      	ldr	r0, [r4, #0]
    47a8:	4a05      	ldr	r2, [pc, #20]	; (47c0 <z_reset_time_slice+0x28>)
    47aa:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    47ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    47b0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    47b2:	2100      	movs	r1, #0
    47b4:	f001 bc60 	b.w	6078 <z_set_timeout_expiry>
}
    47b8:	bd10      	pop	{r4, pc}
    47ba:	bf00      	nop
    47bc:	200009cc 	.word	0x200009cc
    47c0:	20000994 	.word	0x20000994

000047c4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    47c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47c6:	4604      	mov	r4, r0
    47c8:	460d      	mov	r5, r1
	__asm__ volatile(
    47ca:	f04f 0320 	mov.w	r3, #32
    47ce:	f3ef 8611 	mrs	r6, BASEPRI
    47d2:	f383 8812 	msr	BASEPRI_MAX, r3
    47d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    47da:	4823      	ldr	r0, [pc, #140]	; (4868 <k_sched_time_slice_set+0xa4>)
    47dc:	f001 fa6c 	bl	5cb8 <z_spin_lock_valid>
    47e0:	b968      	cbnz	r0, 47fe <k_sched_time_slice_set+0x3a>
    47e2:	4a22      	ldr	r2, [pc, #136]	; (486c <k_sched_time_slice_set+0xa8>)
    47e4:	4922      	ldr	r1, [pc, #136]	; (4870 <k_sched_time_slice_set+0xac>)
    47e6:	4823      	ldr	r0, [pc, #140]	; (4874 <k_sched_time_slice_set+0xb0>)
    47e8:	2381      	movs	r3, #129	; 0x81
    47ea:	f002 f890 	bl	690e <printk>
    47ee:	491e      	ldr	r1, [pc, #120]	; (4868 <k_sched_time_slice_set+0xa4>)
    47f0:	4821      	ldr	r0, [pc, #132]	; (4878 <k_sched_time_slice_set+0xb4>)
    47f2:	f002 f88c 	bl	690e <printk>
    47f6:	481d      	ldr	r0, [pc, #116]	; (486c <k_sched_time_slice_set+0xa8>)
    47f8:	2181      	movs	r1, #129	; 0x81
    47fa:	f001 ffaf 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    47fe:	481a      	ldr	r0, [pc, #104]	; (4868 <k_sched_time_slice_set+0xa4>)
    4800:	f001 fa78 	bl	5cf4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4804:	4b1d      	ldr	r3, [pc, #116]	; (487c <k_sched_time_slice_set+0xb8>)
    4806:	2200      	movs	r2, #0
    4808:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    480c:	f240 30e7 	movw	r0, #999	; 0x3e7
    4810:	2100      	movs	r1, #0
    4812:	611a      	str	r2, [r3, #16]
    4814:	fbe7 0104 	umlal	r0, r1, r7, r4
    4818:	2300      	movs	r3, #0
    481a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    481e:	f7fb fc6f 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4822:	2c00      	cmp	r4, #0
    4824:	4b16      	ldr	r3, [pc, #88]	; (4880 <k_sched_time_slice_set+0xbc>)
    4826:	dc1b      	bgt.n	4860 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    4828:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    482a:	4b16      	ldr	r3, [pc, #88]	; (4884 <k_sched_time_slice_set+0xc0>)
    482c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    482e:	f7ff ffb3 	bl	4798 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4832:	480d      	ldr	r0, [pc, #52]	; (4868 <k_sched_time_slice_set+0xa4>)
    4834:	f001 fa4e 	bl	5cd4 <z_spin_unlock_valid>
    4838:	b968      	cbnz	r0, 4856 <k_sched_time_slice_set+0x92>
    483a:	4a0c      	ldr	r2, [pc, #48]	; (486c <k_sched_time_slice_set+0xa8>)
    483c:	4912      	ldr	r1, [pc, #72]	; (4888 <k_sched_time_slice_set+0xc4>)
    483e:	480d      	ldr	r0, [pc, #52]	; (4874 <k_sched_time_slice_set+0xb0>)
    4840:	23ac      	movs	r3, #172	; 0xac
    4842:	f002 f864 	bl	690e <printk>
    4846:	4908      	ldr	r1, [pc, #32]	; (4868 <k_sched_time_slice_set+0xa4>)
    4848:	4810      	ldr	r0, [pc, #64]	; (488c <k_sched_time_slice_set+0xc8>)
    484a:	f002 f860 	bl	690e <printk>
    484e:	4807      	ldr	r0, [pc, #28]	; (486c <k_sched_time_slice_set+0xa8>)
    4850:	21ac      	movs	r1, #172	; 0xac
    4852:	f001 ff83 	bl	675c <assert_post_action>
	__asm__ volatile(
    4856:	f386 8811 	msr	BASEPRI, r6
    485a:	f3bf 8f6f 	isb	sy
	}
}
    485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    4860:	2802      	cmp	r0, #2
    4862:	bfb8      	it	lt
    4864:	2002      	movlt	r0, #2
    4866:	e7df      	b.n	4828 <k_sched_time_slice_set+0x64>
    4868:	200009c4 	.word	0x200009c4
    486c:	000077fd 	.word	0x000077fd
    4870:	0000784f 	.word	0x0000784f
    4874:	00007610 	.word	0x00007610
    4878:	00007864 	.word	0x00007864
    487c:	20000994 	.word	0x20000994
    4880:	200009cc 	.word	0x200009cc
    4884:	200009c8 	.word	0x200009c8
    4888:	00007823 	.word	0x00007823
    488c:	0000783a 	.word	0x0000783a

00004890 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4890:	b538      	push	{r3, r4, r5, lr}
    4892:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4894:	460d      	mov	r5, r1
    4896:	b9e9      	cbnz	r1, 48d4 <z_reschedule+0x44>
    4898:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    489c:	b9d3      	cbnz	r3, 48d4 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    489e:	4b19      	ldr	r3, [pc, #100]	; (4904 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    48a0:	69da      	ldr	r2, [r3, #28]
    48a2:	689b      	ldr	r3, [r3, #8]
    48a4:	429a      	cmp	r2, r3
    48a6:	d015      	beq.n	48d4 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    48a8:	f001 fa14 	bl	5cd4 <z_spin_unlock_valid>
    48ac:	b968      	cbnz	r0, 48ca <z_reschedule+0x3a>
    48ae:	4a16      	ldr	r2, [pc, #88]	; (4908 <z_reschedule+0x78>)
    48b0:	4916      	ldr	r1, [pc, #88]	; (490c <z_reschedule+0x7c>)
    48b2:	4817      	ldr	r0, [pc, #92]	; (4910 <z_reschedule+0x80>)
    48b4:	23c3      	movs	r3, #195	; 0xc3
    48b6:	f002 f82a 	bl	690e <printk>
    48ba:	4816      	ldr	r0, [pc, #88]	; (4914 <z_reschedule+0x84>)
    48bc:	4621      	mov	r1, r4
    48be:	f002 f826 	bl	690e <printk>
    48c2:	4811      	ldr	r0, [pc, #68]	; (4908 <z_reschedule+0x78>)
    48c4:	21c3      	movs	r1, #195	; 0xc3
    48c6:	f001 ff49 	bl	675c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    48ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    48ce:	2000      	movs	r0, #0
    48d0:	f7fd b816 	b.w	1900 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    48d4:	4620      	mov	r0, r4
    48d6:	f001 f9fd 	bl	5cd4 <z_spin_unlock_valid>
    48da:	b968      	cbnz	r0, 48f8 <z_reschedule+0x68>
    48dc:	4a0a      	ldr	r2, [pc, #40]	; (4908 <z_reschedule+0x78>)
    48de:	490b      	ldr	r1, [pc, #44]	; (490c <z_reschedule+0x7c>)
    48e0:	480b      	ldr	r0, [pc, #44]	; (4910 <z_reschedule+0x80>)
    48e2:	23ac      	movs	r3, #172	; 0xac
    48e4:	f002 f813 	bl	690e <printk>
    48e8:	480a      	ldr	r0, [pc, #40]	; (4914 <z_reschedule+0x84>)
    48ea:	4621      	mov	r1, r4
    48ec:	f002 f80f 	bl	690e <printk>
    48f0:	4805      	ldr	r0, [pc, #20]	; (4908 <z_reschedule+0x78>)
    48f2:	21ac      	movs	r1, #172	; 0xac
    48f4:	f001 ff32 	bl	675c <assert_post_action>
    48f8:	f385 8811 	msr	BASEPRI, r5
    48fc:	f3bf 8f6f 	isb	sy
    4900:	bd38      	pop	{r3, r4, r5, pc}
    4902:	bf00      	nop
    4904:	20000994 	.word	0x20000994
    4908:	000077fd 	.word	0x000077fd
    490c:	00007823 	.word	0x00007823
    4910:	00007610 	.word	0x00007610
    4914:	0000783a 	.word	0x0000783a

00004918 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    4918:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    491a:	f04f 0320 	mov.w	r3, #32
    491e:	f3ef 8511 	mrs	r5, BASEPRI
    4922:	f383 8812 	msr	BASEPRI_MAX, r3
    4926:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    492a:	4829      	ldr	r0, [pc, #164]	; (49d0 <k_sched_lock+0xb8>)
    492c:	f001 f9c4 	bl	5cb8 <z_spin_lock_valid>
    4930:	b968      	cbnz	r0, 494e <k_sched_lock+0x36>
    4932:	4a28      	ldr	r2, [pc, #160]	; (49d4 <k_sched_lock+0xbc>)
    4934:	4928      	ldr	r1, [pc, #160]	; (49d8 <k_sched_lock+0xc0>)
    4936:	4829      	ldr	r0, [pc, #164]	; (49dc <k_sched_lock+0xc4>)
    4938:	2381      	movs	r3, #129	; 0x81
    493a:	f001 ffe8 	bl	690e <printk>
    493e:	4924      	ldr	r1, [pc, #144]	; (49d0 <k_sched_lock+0xb8>)
    4940:	4827      	ldr	r0, [pc, #156]	; (49e0 <k_sched_lock+0xc8>)
    4942:	f001 ffe4 	bl	690e <printk>
    4946:	4823      	ldr	r0, [pc, #140]	; (49d4 <k_sched_lock+0xbc>)
    4948:	2181      	movs	r1, #129	; 0x81
    494a:	f001 ff07 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    494e:	4820      	ldr	r0, [pc, #128]	; (49d0 <k_sched_lock+0xb8>)
    4950:	f001 f9d0 	bl	5cf4 <z_spin_lock_set_owner>
    4954:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4958:	b163      	cbz	r3, 4974 <k_sched_lock+0x5c>
    495a:	4922      	ldr	r1, [pc, #136]	; (49e4 <k_sched_lock+0xcc>)
    495c:	4a22      	ldr	r2, [pc, #136]	; (49e8 <k_sched_lock+0xd0>)
    495e:	481f      	ldr	r0, [pc, #124]	; (49dc <k_sched_lock+0xc4>)
    4960:	23fd      	movs	r3, #253	; 0xfd
    4962:	f001 ffd4 	bl	690e <printk>
    4966:	4821      	ldr	r0, [pc, #132]	; (49ec <k_sched_lock+0xd4>)
    4968:	f001 ffd1 	bl	690e <printk>
    496c:	481e      	ldr	r0, [pc, #120]	; (49e8 <k_sched_lock+0xd0>)
    496e:	21fd      	movs	r1, #253	; 0xfd
    4970:	f001 fef4 	bl	675c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    4974:	4c1e      	ldr	r4, [pc, #120]	; (49f0 <k_sched_lock+0xd8>)
    4976:	68a2      	ldr	r2, [r4, #8]
    4978:	7bd2      	ldrb	r2, [r2, #15]
    497a:	2a01      	cmp	r2, #1
    497c:	d10c      	bne.n	4998 <k_sched_lock+0x80>
    497e:	491d      	ldr	r1, [pc, #116]	; (49f4 <k_sched_lock+0xdc>)
    4980:	4a19      	ldr	r2, [pc, #100]	; (49e8 <k_sched_lock+0xd0>)
    4982:	4816      	ldr	r0, [pc, #88]	; (49dc <k_sched_lock+0xc4>)
    4984:	23fe      	movs	r3, #254	; 0xfe
    4986:	f001 ffc2 	bl	690e <printk>
    498a:	4818      	ldr	r0, [pc, #96]	; (49ec <k_sched_lock+0xd4>)
    498c:	f001 ffbf 	bl	690e <printk>
    4990:	4815      	ldr	r0, [pc, #84]	; (49e8 <k_sched_lock+0xd0>)
    4992:	21fe      	movs	r1, #254	; 0xfe
    4994:	f001 fee2 	bl	675c <assert_post_action>
	--_current->base.sched_locked;
    4998:	68a2      	ldr	r2, [r4, #8]
    499a:	7bd3      	ldrb	r3, [r2, #15]
    499c:	3b01      	subs	r3, #1
    499e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    49a0:	480b      	ldr	r0, [pc, #44]	; (49d0 <k_sched_lock+0xb8>)
    49a2:	f001 f997 	bl	5cd4 <z_spin_unlock_valid>
    49a6:	b968      	cbnz	r0, 49c4 <k_sched_lock+0xac>
    49a8:	4a0a      	ldr	r2, [pc, #40]	; (49d4 <k_sched_lock+0xbc>)
    49aa:	4913      	ldr	r1, [pc, #76]	; (49f8 <k_sched_lock+0xe0>)
    49ac:	480b      	ldr	r0, [pc, #44]	; (49dc <k_sched_lock+0xc4>)
    49ae:	23ac      	movs	r3, #172	; 0xac
    49b0:	f001 ffad 	bl	690e <printk>
    49b4:	4906      	ldr	r1, [pc, #24]	; (49d0 <k_sched_lock+0xb8>)
    49b6:	4811      	ldr	r0, [pc, #68]	; (49fc <k_sched_lock+0xe4>)
    49b8:	f001 ffa9 	bl	690e <printk>
    49bc:	4805      	ldr	r0, [pc, #20]	; (49d4 <k_sched_lock+0xbc>)
    49be:	21ac      	movs	r1, #172	; 0xac
    49c0:	f001 fecc 	bl	675c <assert_post_action>
	__asm__ volatile(
    49c4:	f385 8811 	msr	BASEPRI, r5
    49c8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    49cc:	bd38      	pop	{r3, r4, r5, pc}
    49ce:	bf00      	nop
    49d0:	200009c4 	.word	0x200009c4
    49d4:	000077fd 	.word	0x000077fd
    49d8:	0000784f 	.word	0x0000784f
    49dc:	00007610 	.word	0x00007610
    49e0:	00007864 	.word	0x00007864
    49e4:	00008213 	.word	0x00008213
    49e8:	00008261 	.word	0x00008261
    49ec:	0000828c 	.word	0x0000828c
    49f0:	20000994 	.word	0x20000994
    49f4:	0000828f 	.word	0x0000828f
    49f8:	00007823 	.word	0x00007823
    49fc:	0000783a 	.word	0x0000783a

00004a00 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4a00:	4b0c      	ldr	r3, [pc, #48]	; (4a34 <z_priq_dumb_remove+0x34>)
    4a02:	4299      	cmp	r1, r3
{
    4a04:	b510      	push	{r4, lr}
    4a06:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4a08:	d10b      	bne.n	4a22 <z_priq_dumb_remove+0x22>
    4a0a:	490b      	ldr	r1, [pc, #44]	; (4a38 <z_priq_dumb_remove+0x38>)
    4a0c:	480b      	ldr	r0, [pc, #44]	; (4a3c <z_priq_dumb_remove+0x3c>)
    4a0e:	4a0c      	ldr	r2, [pc, #48]	; (4a40 <z_priq_dumb_remove+0x40>)
    4a10:	f240 33b5 	movw	r3, #949	; 0x3b5
    4a14:	f001 ff7b 	bl	690e <printk>
    4a18:	4809      	ldr	r0, [pc, #36]	; (4a40 <z_priq_dumb_remove+0x40>)
    4a1a:	f240 31b5 	movw	r1, #949	; 0x3b5
    4a1e:	f001 fe9d 	bl	675c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    4a22:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    4a26:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4a28:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4a2a:	2300      	movs	r3, #0
	node->prev = NULL;
    4a2c:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4a30:	bd10      	pop	{r4, pc}
    4a32:	bf00      	nop
    4a34:	20000150 	.word	0x20000150
    4a38:	000082e2 	.word	0x000082e2
    4a3c:	00007610 	.word	0x00007610
    4a40:	000082c0 	.word	0x000082c0

00004a44 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    4a44:	6883      	ldr	r3, [r0, #8]
{
    4a46:	b510      	push	{r4, lr}
    4a48:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    4a4a:	b95b      	cbnz	r3, 4a64 <unpend_thread_no_timeout+0x20>
    4a4c:	490b      	ldr	r1, [pc, #44]	; (4a7c <unpend_thread_no_timeout+0x38>)
    4a4e:	480c      	ldr	r0, [pc, #48]	; (4a80 <unpend_thread_no_timeout+0x3c>)
    4a50:	4a0c      	ldr	r2, [pc, #48]	; (4a84 <unpend_thread_no_timeout+0x40>)
    4a52:	f240 2353 	movw	r3, #595	; 0x253
    4a56:	f001 ff5a 	bl	690e <printk>
    4a5a:	480a      	ldr	r0, [pc, #40]	; (4a84 <unpend_thread_no_timeout+0x40>)
    4a5c:	f240 2153 	movw	r1, #595	; 0x253
    4a60:	f001 fe7c 	bl	675c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4a64:	68a0      	ldr	r0, [r4, #8]
    4a66:	4621      	mov	r1, r4
    4a68:	f7ff ffca 	bl	4a00 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4a6c:	7b63      	ldrb	r3, [r4, #13]
    4a6e:	f023 0302 	bic.w	r3, r3, #2
    4a72:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    4a74:	2300      	movs	r3, #0
    4a76:	60a3      	str	r3, [r4, #8]
}
    4a78:	bd10      	pop	{r4, pc}
    4a7a:	bf00      	nop
    4a7c:	00008303 	.word	0x00008303
    4a80:	00007610 	.word	0x00007610
    4a84:	000082c0 	.word	0x000082c0

00004a88 <update_cache>:
{
    4a88:	b538      	push	{r3, r4, r5, lr}
    4a8a:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    4a8c:	4814      	ldr	r0, [pc, #80]	; (4ae0 <update_cache+0x58>)
    4a8e:	4d15      	ldr	r5, [pc, #84]	; (4ae4 <update_cache+0x5c>)
    4a90:	f002 faa6 	bl	6fe0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4a94:	4604      	mov	r4, r0
    4a96:	b900      	cbnz	r0, 4a9a <update_cache+0x12>
    4a98:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    4a9a:	b9ca      	cbnz	r2, 4ad0 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    4a9c:	68ab      	ldr	r3, [r5, #8]
    4a9e:	b963      	cbnz	r3, 4aba <update_cache+0x32>
    4aa0:	4911      	ldr	r1, [pc, #68]	; (4ae8 <update_cache+0x60>)
    4aa2:	4a12      	ldr	r2, [pc, #72]	; (4aec <update_cache+0x64>)
    4aa4:	4812      	ldr	r0, [pc, #72]	; (4af0 <update_cache+0x68>)
    4aa6:	2381      	movs	r3, #129	; 0x81
    4aa8:	f001 ff31 	bl	690e <printk>
    4aac:	4811      	ldr	r0, [pc, #68]	; (4af4 <update_cache+0x6c>)
    4aae:	f001 ff2e 	bl	690e <printk>
    4ab2:	480e      	ldr	r0, [pc, #56]	; (4aec <update_cache+0x64>)
    4ab4:	2181      	movs	r1, #129	; 0x81
    4ab6:	f001 fe51 	bl	675c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    4aba:	68ab      	ldr	r3, [r5, #8]
    4abc:	7b5a      	ldrb	r2, [r3, #13]
    4abe:	06d2      	lsls	r2, r2, #27
    4ac0:	d106      	bne.n	4ad0 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4ac2:	69a2      	ldr	r2, [r4, #24]
    4ac4:	b922      	cbnz	r2, 4ad0 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    4ac6:	89da      	ldrh	r2, [r3, #14]
    4ac8:	2a7f      	cmp	r2, #127	; 0x7f
    4aca:	d901      	bls.n	4ad0 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    4acc:	61eb      	str	r3, [r5, #28]
}
    4ace:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4ad0:	68ab      	ldr	r3, [r5, #8]
    4ad2:	42a3      	cmp	r3, r4
    4ad4:	d001      	beq.n	4ada <update_cache+0x52>
			z_reset_time_slice();
    4ad6:	f7ff fe5f 	bl	4798 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4ada:	61ec      	str	r4, [r5, #28]
}
    4adc:	e7f7      	b.n	4ace <update_cache+0x46>
    4ade:	bf00      	nop
    4ae0:	200009b4 	.word	0x200009b4
    4ae4:	20000994 	.word	0x20000994
    4ae8:	0000831a 	.word	0x0000831a
    4aec:	000082c0 	.word	0x000082c0
    4af0:	00007610 	.word	0x00007610
    4af4:	0000828c 	.word	0x0000828c

00004af8 <move_thread_to_end_of_prio_q>:
{
    4af8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4afa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4afe:	7b43      	ldrb	r3, [r0, #13]
    4b00:	2a00      	cmp	r2, #0
{
    4b02:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4b04:	da06      	bge.n	4b14 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b0a:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    4b0c:	4601      	mov	r1, r0
    4b0e:	481f      	ldr	r0, [pc, #124]	; (4b8c <move_thread_to_end_of_prio_q+0x94>)
    4b10:	f7ff ff76 	bl	4a00 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4b14:	7b63      	ldrb	r3, [r4, #13]
    4b16:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4b1a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4b1c:	4b1c      	ldr	r3, [pc, #112]	; (4b90 <move_thread_to_end_of_prio_q+0x98>)
    4b1e:	429c      	cmp	r4, r3
    4b20:	d109      	bne.n	4b36 <move_thread_to_end_of_prio_q+0x3e>
    4b22:	491c      	ldr	r1, [pc, #112]	; (4b94 <move_thread_to_end_of_prio_q+0x9c>)
    4b24:	481c      	ldr	r0, [pc, #112]	; (4b98 <move_thread_to_end_of_prio_q+0xa0>)
    4b26:	4a1d      	ldr	r2, [pc, #116]	; (4b9c <move_thread_to_end_of_prio_q+0xa4>)
    4b28:	23b1      	movs	r3, #177	; 0xb1
    4b2a:	f001 fef0 	bl	690e <printk>
    4b2e:	481b      	ldr	r0, [pc, #108]	; (4b9c <move_thread_to_end_of_prio_q+0xa4>)
    4b30:	21b1      	movs	r1, #177	; 0xb1
    4b32:	f001 fe13 	bl	675c <assert_post_action>
	return list->head == list;
    4b36:	4a1a      	ldr	r2, [pc, #104]	; (4ba0 <move_thread_to_end_of_prio_q+0xa8>)
    4b38:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4b3a:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    4b3c:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b40:	428b      	cmp	r3, r1
    4b42:	bf08      	it	eq
    4b44:	2300      	moveq	r3, #0
    4b46:	2b00      	cmp	r3, #0
    4b48:	bf38      	it	cc
    4b4a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b4c:	b1cb      	cbz	r3, 4b82 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    4b4e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4b52:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4b56:	4286      	cmp	r6, r0
    4b58:	d00f      	beq.n	4b7a <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    4b5a:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4b5c:	2800      	cmp	r0, #0
    4b5e:	dd0c      	ble.n	4b7a <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    4b60:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4b62:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    4b66:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4b68:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    4b6a:	6890      	ldr	r0, [r2, #8]
    4b6c:	1b03      	subs	r3, r0, r4
    4b6e:	4258      	negs	r0, r3
}
    4b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4b74:	4158      	adcs	r0, r3
    4b76:	f7ff bf87 	b.w	4a88 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4b7a:	42ab      	cmp	r3, r5
    4b7c:	d001      	beq.n	4b82 <move_thread_to_end_of_prio_q+0x8a>
    4b7e:	681b      	ldr	r3, [r3, #0]
    4b80:	e7e4      	b.n	4b4c <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    4b82:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    4b86:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4b88:	6254      	str	r4, [r2, #36]	; 0x24
}
    4b8a:	e7ee      	b.n	4b6a <move_thread_to_end_of_prio_q+0x72>
    4b8c:	200009b4 	.word	0x200009b4
    4b90:	20000150 	.word	0x20000150
    4b94:	000082e2 	.word	0x000082e2
    4b98:	00007610 	.word	0x00007610
    4b9c:	000082c0 	.word	0x000082c0
    4ba0:	20000994 	.word	0x20000994

00004ba4 <z_time_slice>:
{
    4ba4:	b570      	push	{r4, r5, r6, lr}
    4ba6:	4604      	mov	r4, r0
	__asm__ volatile(
    4ba8:	f04f 0320 	mov.w	r3, #32
    4bac:	f3ef 8511 	mrs	r5, BASEPRI
    4bb0:	f383 8812 	msr	BASEPRI_MAX, r3
    4bb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4bb8:	482a      	ldr	r0, [pc, #168]	; (4c64 <z_time_slice+0xc0>)
    4bba:	f001 f87d 	bl	5cb8 <z_spin_lock_valid>
    4bbe:	b968      	cbnz	r0, 4bdc <z_time_slice+0x38>
    4bc0:	4a29      	ldr	r2, [pc, #164]	; (4c68 <z_time_slice+0xc4>)
    4bc2:	492a      	ldr	r1, [pc, #168]	; (4c6c <z_time_slice+0xc8>)
    4bc4:	482a      	ldr	r0, [pc, #168]	; (4c70 <z_time_slice+0xcc>)
    4bc6:	2381      	movs	r3, #129	; 0x81
    4bc8:	f001 fea1 	bl	690e <printk>
    4bcc:	4925      	ldr	r1, [pc, #148]	; (4c64 <z_time_slice+0xc0>)
    4bce:	4829      	ldr	r0, [pc, #164]	; (4c74 <z_time_slice+0xd0>)
    4bd0:	f001 fe9d 	bl	690e <printk>
    4bd4:	4824      	ldr	r0, [pc, #144]	; (4c68 <z_time_slice+0xc4>)
    4bd6:	2181      	movs	r1, #129	; 0x81
    4bd8:	f001 fdc0 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    4bdc:	4821      	ldr	r0, [pc, #132]	; (4c64 <z_time_slice+0xc0>)
    4bde:	f001 f889 	bl	5cf4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    4be2:	4b25      	ldr	r3, [pc, #148]	; (4c78 <z_time_slice+0xd4>)
    4be4:	4a25      	ldr	r2, [pc, #148]	; (4c7c <z_time_slice+0xd8>)
    4be6:	6898      	ldr	r0, [r3, #8]
    4be8:	6811      	ldr	r1, [r2, #0]
    4bea:	4288      	cmp	r0, r1
    4bec:	4619      	mov	r1, r3
    4bee:	d118      	bne.n	4c22 <z_time_slice+0x7e>
			z_reset_time_slice();
    4bf0:	f7ff fdd2 	bl	4798 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4bf4:	481b      	ldr	r0, [pc, #108]	; (4c64 <z_time_slice+0xc0>)
    4bf6:	f001 f86d 	bl	5cd4 <z_spin_unlock_valid>
    4bfa:	b968      	cbnz	r0, 4c18 <z_time_slice+0x74>
    4bfc:	4a1a      	ldr	r2, [pc, #104]	; (4c68 <z_time_slice+0xc4>)
    4bfe:	4920      	ldr	r1, [pc, #128]	; (4c80 <z_time_slice+0xdc>)
    4c00:	481b      	ldr	r0, [pc, #108]	; (4c70 <z_time_slice+0xcc>)
    4c02:	23ac      	movs	r3, #172	; 0xac
    4c04:	f001 fe83 	bl	690e <printk>
    4c08:	4916      	ldr	r1, [pc, #88]	; (4c64 <z_time_slice+0xc0>)
    4c0a:	481e      	ldr	r0, [pc, #120]	; (4c84 <z_time_slice+0xe0>)
    4c0c:	f001 fe7f 	bl	690e <printk>
    4c10:	4815      	ldr	r0, [pc, #84]	; (4c68 <z_time_slice+0xc4>)
    4c12:	21ac      	movs	r1, #172	; 0xac
    4c14:	f001 fda2 	bl	675c <assert_post_action>
	__asm__ volatile(
    4c18:	f385 8811 	msr	BASEPRI, r5
    4c1c:	f3bf 8f6f 	isb	sy
}
    4c20:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    4c22:	2600      	movs	r6, #0
    4c24:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4c26:	4a18      	ldr	r2, [pc, #96]	; (4c88 <z_time_slice+0xe4>)
    4c28:	6812      	ldr	r2, [r2, #0]
    4c2a:	b1ba      	cbz	r2, 4c5c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    4c2c:	89c2      	ldrh	r2, [r0, #14]
    4c2e:	2a7f      	cmp	r2, #127	; 0x7f
    4c30:	d814      	bhi.n	4c5c <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    4c32:	7b42      	ldrb	r2, [r0, #13]
    4c34:	06d2      	lsls	r2, r2, #27
    4c36:	d111      	bne.n	4c5c <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4c38:	4a14      	ldr	r2, [pc, #80]	; (4c8c <z_time_slice+0xe8>)
    4c3a:	f990 600e 	ldrsb.w	r6, [r0, #14]
    4c3e:	6812      	ldr	r2, [r2, #0]
    4c40:	4296      	cmp	r6, r2
    4c42:	db0b      	blt.n	4c5c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    4c44:	4a12      	ldr	r2, [pc, #72]	; (4c90 <z_time_slice+0xec>)
    4c46:	4290      	cmp	r0, r2
    4c48:	d008      	beq.n	4c5c <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    4c4a:	691a      	ldr	r2, [r3, #16]
    4c4c:	42a2      	cmp	r2, r4
    4c4e:	dc02      	bgt.n	4c56 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    4c50:	f7ff ff52 	bl	4af8 <move_thread_to_end_of_prio_q>
    4c54:	e7cc      	b.n	4bf0 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    4c56:	1b12      	subs	r2, r2, r4
    4c58:	611a      	str	r2, [r3, #16]
    4c5a:	e7cb      	b.n	4bf4 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    4c5c:	2300      	movs	r3, #0
    4c5e:	610b      	str	r3, [r1, #16]
    4c60:	e7c8      	b.n	4bf4 <z_time_slice+0x50>
    4c62:	bf00      	nop
    4c64:	200009c4 	.word	0x200009c4
    4c68:	000077fd 	.word	0x000077fd
    4c6c:	0000784f 	.word	0x0000784f
    4c70:	00007610 	.word	0x00007610
    4c74:	00007864 	.word	0x00007864
    4c78:	20000994 	.word	0x20000994
    4c7c:	200009c0 	.word	0x200009c0
    4c80:	00007823 	.word	0x00007823
    4c84:	0000783a 	.word	0x0000783a
    4c88:	200009cc 	.word	0x200009cc
    4c8c:	200009c8 	.word	0x200009c8
    4c90:	20000150 	.word	0x20000150

00004c94 <ready_thread>:
{
    4c94:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4c96:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4c9a:	7b43      	ldrb	r3, [r0, #13]
    4c9c:	2a00      	cmp	r2, #0
{
    4c9e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4ca0:	db3e      	blt.n	4d20 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4ca2:	06da      	lsls	r2, r3, #27
    4ca4:	d13c      	bne.n	4d20 <ready_thread+0x8c>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
    4ca6:	6985      	ldr	r5, [r0, #24]
    4ca8:	2d00      	cmp	r5, #0
    4caa:	d139      	bne.n	4d20 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    4cac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4cb0:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4cb2:	4b1c      	ldr	r3, [pc, #112]	; (4d24 <ready_thread+0x90>)
    4cb4:	4298      	cmp	r0, r3
    4cb6:	d109      	bne.n	4ccc <ready_thread+0x38>
    4cb8:	491b      	ldr	r1, [pc, #108]	; (4d28 <ready_thread+0x94>)
    4cba:	481c      	ldr	r0, [pc, #112]	; (4d2c <ready_thread+0x98>)
    4cbc:	4a1c      	ldr	r2, [pc, #112]	; (4d30 <ready_thread+0x9c>)
    4cbe:	23b1      	movs	r3, #177	; 0xb1
    4cc0:	f001 fe25 	bl	690e <printk>
    4cc4:	481a      	ldr	r0, [pc, #104]	; (4d30 <ready_thread+0x9c>)
    4cc6:	21b1      	movs	r1, #177	; 0xb1
    4cc8:	f001 fd48 	bl	675c <assert_post_action>
	return list->head == list;
    4ccc:	4919      	ldr	r1, [pc, #100]	; (4d34 <ready_thread+0xa0>)
    4cce:	460b      	mov	r3, r1
    4cd0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4cd4:	4298      	cmp	r0, r3
    4cd6:	bf18      	it	ne
    4cd8:	4605      	movne	r5, r0
    4cda:	2d00      	cmp	r5, #0
    4cdc:	461a      	mov	r2, r3
    4cde:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ce0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    4ce2:	bf38      	it	cc
    4ce4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ce6:	b1b3      	cbz	r3, 4d16 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    4ce8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4cec:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4cf0:	4286      	cmp	r6, r0
    4cf2:	d00c      	beq.n	4d0e <ready_thread+0x7a>
		return b2 - b1;
    4cf4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4cf6:	2800      	cmp	r0, #0
    4cf8:	dd09      	ble.n	4d0e <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    4cfa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4cfc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4d00:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4d02:	605c      	str	r4, [r3, #4]
}
    4d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    4d08:	2000      	movs	r0, #0
    4d0a:	f7ff bebd 	b.w	4a88 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4d0e:	42ab      	cmp	r3, r5
    4d10:	d001      	beq.n	4d16 <ready_thread+0x82>
    4d12:	681b      	ldr	r3, [r3, #0]
    4d14:	e7e7      	b.n	4ce6 <ready_thread+0x52>
	node->prev = tail;
    4d16:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    4d1a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4d1c:	624c      	str	r4, [r1, #36]	; 0x24
}
    4d1e:	e7f1      	b.n	4d04 <ready_thread+0x70>
}
    4d20:	bd70      	pop	{r4, r5, r6, pc}
    4d22:	bf00      	nop
    4d24:	20000150 	.word	0x20000150
    4d28:	000082e2 	.word	0x000082e2
    4d2c:	00007610 	.word	0x00007610
    4d30:	000082c0 	.word	0x000082c0
    4d34:	20000994 	.word	0x20000994

00004d38 <z_ready_thread>:
{
    4d38:	b538      	push	{r3, r4, r5, lr}
    4d3a:	4604      	mov	r4, r0
	__asm__ volatile(
    4d3c:	f04f 0320 	mov.w	r3, #32
    4d40:	f3ef 8511 	mrs	r5, BASEPRI
    4d44:	f383 8812 	msr	BASEPRI_MAX, r3
    4d48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d4c:	4817      	ldr	r0, [pc, #92]	; (4dac <z_ready_thread+0x74>)
    4d4e:	f000 ffb3 	bl	5cb8 <z_spin_lock_valid>
    4d52:	b968      	cbnz	r0, 4d70 <z_ready_thread+0x38>
    4d54:	4a16      	ldr	r2, [pc, #88]	; (4db0 <z_ready_thread+0x78>)
    4d56:	4917      	ldr	r1, [pc, #92]	; (4db4 <z_ready_thread+0x7c>)
    4d58:	4817      	ldr	r0, [pc, #92]	; (4db8 <z_ready_thread+0x80>)
    4d5a:	2381      	movs	r3, #129	; 0x81
    4d5c:	f001 fdd7 	bl	690e <printk>
    4d60:	4912      	ldr	r1, [pc, #72]	; (4dac <z_ready_thread+0x74>)
    4d62:	4816      	ldr	r0, [pc, #88]	; (4dbc <z_ready_thread+0x84>)
    4d64:	f001 fdd3 	bl	690e <printk>
    4d68:	4811      	ldr	r0, [pc, #68]	; (4db0 <z_ready_thread+0x78>)
    4d6a:	2181      	movs	r1, #129	; 0x81
    4d6c:	f001 fcf6 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    4d70:	480e      	ldr	r0, [pc, #56]	; (4dac <z_ready_thread+0x74>)
    4d72:	f000 ffbf 	bl	5cf4 <z_spin_lock_set_owner>
			ready_thread(thread);
    4d76:	4620      	mov	r0, r4
    4d78:	f7ff ff8c 	bl	4c94 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d7c:	480b      	ldr	r0, [pc, #44]	; (4dac <z_ready_thread+0x74>)
    4d7e:	f000 ffa9 	bl	5cd4 <z_spin_unlock_valid>
    4d82:	b968      	cbnz	r0, 4da0 <z_ready_thread+0x68>
    4d84:	4a0a      	ldr	r2, [pc, #40]	; (4db0 <z_ready_thread+0x78>)
    4d86:	490e      	ldr	r1, [pc, #56]	; (4dc0 <z_ready_thread+0x88>)
    4d88:	480b      	ldr	r0, [pc, #44]	; (4db8 <z_ready_thread+0x80>)
    4d8a:	23ac      	movs	r3, #172	; 0xac
    4d8c:	f001 fdbf 	bl	690e <printk>
    4d90:	4906      	ldr	r1, [pc, #24]	; (4dac <z_ready_thread+0x74>)
    4d92:	480c      	ldr	r0, [pc, #48]	; (4dc4 <z_ready_thread+0x8c>)
    4d94:	f001 fdbb 	bl	690e <printk>
    4d98:	4805      	ldr	r0, [pc, #20]	; (4db0 <z_ready_thread+0x78>)
    4d9a:	21ac      	movs	r1, #172	; 0xac
    4d9c:	f001 fcde 	bl	675c <assert_post_action>
	__asm__ volatile(
    4da0:	f385 8811 	msr	BASEPRI, r5
    4da4:	f3bf 8f6f 	isb	sy
}
    4da8:	bd38      	pop	{r3, r4, r5, pc}
    4daa:	bf00      	nop
    4dac:	200009c4 	.word	0x200009c4
    4db0:	000077fd 	.word	0x000077fd
    4db4:	0000784f 	.word	0x0000784f
    4db8:	00007610 	.word	0x00007610
    4dbc:	00007864 	.word	0x00007864
    4dc0:	00007823 	.word	0x00007823
    4dc4:	0000783a 	.word	0x0000783a

00004dc8 <z_sched_start>:
{
    4dc8:	b538      	push	{r3, r4, r5, lr}
    4dca:	4604      	mov	r4, r0
	__asm__ volatile(
    4dcc:	f04f 0320 	mov.w	r3, #32
    4dd0:	f3ef 8511 	mrs	r5, BASEPRI
    4dd4:	f383 8812 	msr	BASEPRI_MAX, r3
    4dd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ddc:	481d      	ldr	r0, [pc, #116]	; (4e54 <z_sched_start+0x8c>)
    4dde:	f000 ff6b 	bl	5cb8 <z_spin_lock_valid>
    4de2:	b968      	cbnz	r0, 4e00 <z_sched_start+0x38>
    4de4:	4a1c      	ldr	r2, [pc, #112]	; (4e58 <z_sched_start+0x90>)
    4de6:	491d      	ldr	r1, [pc, #116]	; (4e5c <z_sched_start+0x94>)
    4de8:	481d      	ldr	r0, [pc, #116]	; (4e60 <z_sched_start+0x98>)
    4dea:	2381      	movs	r3, #129	; 0x81
    4dec:	f001 fd8f 	bl	690e <printk>
    4df0:	4918      	ldr	r1, [pc, #96]	; (4e54 <z_sched_start+0x8c>)
    4df2:	481c      	ldr	r0, [pc, #112]	; (4e64 <z_sched_start+0x9c>)
    4df4:	f001 fd8b 	bl	690e <printk>
    4df8:	4817      	ldr	r0, [pc, #92]	; (4e58 <z_sched_start+0x90>)
    4dfa:	2181      	movs	r1, #129	; 0x81
    4dfc:	f001 fcae 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    4e00:	4814      	ldr	r0, [pc, #80]	; (4e54 <z_sched_start+0x8c>)
    4e02:	f000 ff77 	bl	5cf4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    4e06:	7b63      	ldrb	r3, [r4, #13]
    4e08:	075a      	lsls	r2, r3, #29
    4e0a:	d416      	bmi.n	4e3a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e0c:	4811      	ldr	r0, [pc, #68]	; (4e54 <z_sched_start+0x8c>)
    4e0e:	f000 ff61 	bl	5cd4 <z_spin_unlock_valid>
    4e12:	b968      	cbnz	r0, 4e30 <z_sched_start+0x68>
    4e14:	4a10      	ldr	r2, [pc, #64]	; (4e58 <z_sched_start+0x90>)
    4e16:	4914      	ldr	r1, [pc, #80]	; (4e68 <z_sched_start+0xa0>)
    4e18:	4811      	ldr	r0, [pc, #68]	; (4e60 <z_sched_start+0x98>)
    4e1a:	23ac      	movs	r3, #172	; 0xac
    4e1c:	f001 fd77 	bl	690e <printk>
    4e20:	490c      	ldr	r1, [pc, #48]	; (4e54 <z_sched_start+0x8c>)
    4e22:	4812      	ldr	r0, [pc, #72]	; (4e6c <z_sched_start+0xa4>)
    4e24:	f001 fd73 	bl	690e <printk>
    4e28:	480b      	ldr	r0, [pc, #44]	; (4e58 <z_sched_start+0x90>)
    4e2a:	21ac      	movs	r1, #172	; 0xac
    4e2c:	f001 fc96 	bl	675c <assert_post_action>
	__asm__ volatile(
    4e30:	f385 8811 	msr	BASEPRI, r5
    4e34:	f3bf 8f6f 	isb	sy
}
    4e38:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4e3a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    4e3e:	4620      	mov	r0, r4
    4e40:	7363      	strb	r3, [r4, #13]
    4e42:	f7ff ff27 	bl	4c94 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4e46:	4629      	mov	r1, r5
    4e48:	4802      	ldr	r0, [pc, #8]	; (4e54 <z_sched_start+0x8c>)
}
    4e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    4e4e:	f7ff bd1f 	b.w	4890 <z_reschedule>
    4e52:	bf00      	nop
    4e54:	200009c4 	.word	0x200009c4
    4e58:	000077fd 	.word	0x000077fd
    4e5c:	0000784f 	.word	0x0000784f
    4e60:	00007610 	.word	0x00007610
    4e64:	00007864 	.word	0x00007864
    4e68:	00007823 	.word	0x00007823
    4e6c:	0000783a 	.word	0x0000783a

00004e70 <z_thread_timeout>:
{
    4e70:	b570      	push	{r4, r5, r6, lr}
    4e72:	4604      	mov	r4, r0
	__asm__ volatile(
    4e74:	f04f 0320 	mov.w	r3, #32
    4e78:	f3ef 8611 	mrs	r6, BASEPRI
    4e7c:	f383 8812 	msr	BASEPRI_MAX, r3
    4e80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e84:	4820      	ldr	r0, [pc, #128]	; (4f08 <z_thread_timeout+0x98>)
    4e86:	f000 ff17 	bl	5cb8 <z_spin_lock_valid>
    4e8a:	b968      	cbnz	r0, 4ea8 <z_thread_timeout+0x38>
    4e8c:	4a1f      	ldr	r2, [pc, #124]	; (4f0c <z_thread_timeout+0x9c>)
    4e8e:	4920      	ldr	r1, [pc, #128]	; (4f10 <z_thread_timeout+0xa0>)
    4e90:	4820      	ldr	r0, [pc, #128]	; (4f14 <z_thread_timeout+0xa4>)
    4e92:	2381      	movs	r3, #129	; 0x81
    4e94:	f001 fd3b 	bl	690e <printk>
    4e98:	491b      	ldr	r1, [pc, #108]	; (4f08 <z_thread_timeout+0x98>)
    4e9a:	481f      	ldr	r0, [pc, #124]	; (4f18 <z_thread_timeout+0xa8>)
    4e9c:	f001 fd37 	bl	690e <printk>
    4ea0:	481a      	ldr	r0, [pc, #104]	; (4f0c <z_thread_timeout+0x9c>)
    4ea2:	2181      	movs	r1, #129	; 0x81
    4ea4:	f001 fc5a 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    4ea8:	4817      	ldr	r0, [pc, #92]	; (4f08 <z_thread_timeout+0x98>)
    4eaa:	f000 ff23 	bl	5cf4 <z_spin_lock_set_owner>
		if (!killed) {
    4eae:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4eb2:	f013 0f28 	tst.w	r3, #40	; 0x28
    4eb6:	d110      	bne.n	4eda <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    4eb8:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4ebc:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    4ec0:	b113      	cbz	r3, 4ec8 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    4ec2:	4628      	mov	r0, r5
    4ec4:	f7ff fdbe 	bl	4a44 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4ec8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4ecc:	f023 0314 	bic.w	r3, r3, #20
    4ed0:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    4ed4:	4628      	mov	r0, r5
    4ed6:	f7ff fedd 	bl	4c94 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4eda:	480b      	ldr	r0, [pc, #44]	; (4f08 <z_thread_timeout+0x98>)
    4edc:	f000 fefa 	bl	5cd4 <z_spin_unlock_valid>
    4ee0:	b968      	cbnz	r0, 4efe <z_thread_timeout+0x8e>
    4ee2:	4a0a      	ldr	r2, [pc, #40]	; (4f0c <z_thread_timeout+0x9c>)
    4ee4:	490d      	ldr	r1, [pc, #52]	; (4f1c <z_thread_timeout+0xac>)
    4ee6:	480b      	ldr	r0, [pc, #44]	; (4f14 <z_thread_timeout+0xa4>)
    4ee8:	23ac      	movs	r3, #172	; 0xac
    4eea:	f001 fd10 	bl	690e <printk>
    4eee:	4906      	ldr	r1, [pc, #24]	; (4f08 <z_thread_timeout+0x98>)
    4ef0:	480b      	ldr	r0, [pc, #44]	; (4f20 <z_thread_timeout+0xb0>)
    4ef2:	f001 fd0c 	bl	690e <printk>
    4ef6:	4805      	ldr	r0, [pc, #20]	; (4f0c <z_thread_timeout+0x9c>)
    4ef8:	21ac      	movs	r1, #172	; 0xac
    4efa:	f001 fc2f 	bl	675c <assert_post_action>
	__asm__ volatile(
    4efe:	f386 8811 	msr	BASEPRI, r6
    4f02:	f3bf 8f6f 	isb	sy
}
    4f06:	bd70      	pop	{r4, r5, r6, pc}
    4f08:	200009c4 	.word	0x200009c4
    4f0c:	000077fd 	.word	0x000077fd
    4f10:	0000784f 	.word	0x0000784f
    4f14:	00007610 	.word	0x00007610
    4f18:	00007864 	.word	0x00007864
    4f1c:	00007823 	.word	0x00007823
    4f20:	0000783a 	.word	0x0000783a

00004f24 <unready_thread>:
{
    4f24:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    4f26:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4f2a:	7b43      	ldrb	r3, [r0, #13]
    4f2c:	2a00      	cmp	r2, #0
{
    4f2e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4f30:	da06      	bge.n	4f40 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4f36:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    4f38:	4601      	mov	r1, r0
    4f3a:	4806      	ldr	r0, [pc, #24]	; (4f54 <unready_thread+0x30>)
    4f3c:	f7ff fd60 	bl	4a00 <z_priq_dumb_remove>
	update_cache(thread == _current);
    4f40:	4b05      	ldr	r3, [pc, #20]	; (4f58 <unready_thread+0x34>)
    4f42:	6898      	ldr	r0, [r3, #8]
    4f44:	1b03      	subs	r3, r0, r4
    4f46:	4258      	negs	r0, r3
}
    4f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    4f4c:	4158      	adcs	r0, r3
    4f4e:	f7ff bd9b 	b.w	4a88 <update_cache>
    4f52:	bf00      	nop
    4f54:	200009b4 	.word	0x200009b4
    4f58:	20000994 	.word	0x20000994

00004f5c <add_to_waitq_locked>:
{
    4f5c:	b538      	push	{r3, r4, r5, lr}
    4f5e:	4604      	mov	r4, r0
    4f60:	460d      	mov	r5, r1
	unready_thread(thread);
    4f62:	f7ff ffdf 	bl	4f24 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4f66:	7b63      	ldrb	r3, [r4, #13]
    4f68:	f043 0302 	orr.w	r3, r3, #2
    4f6c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4f6e:	b31d      	cbz	r5, 4fb8 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4f70:	4b17      	ldr	r3, [pc, #92]	; (4fd0 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    4f72:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4f74:	429c      	cmp	r4, r3
    4f76:	d109      	bne.n	4f8c <add_to_waitq_locked+0x30>
    4f78:	4916      	ldr	r1, [pc, #88]	; (4fd4 <add_to_waitq_locked+0x78>)
    4f7a:	4817      	ldr	r0, [pc, #92]	; (4fd8 <add_to_waitq_locked+0x7c>)
    4f7c:	4a17      	ldr	r2, [pc, #92]	; (4fdc <add_to_waitq_locked+0x80>)
    4f7e:	23b1      	movs	r3, #177	; 0xb1
    4f80:	f001 fcc5 	bl	690e <printk>
    4f84:	4815      	ldr	r0, [pc, #84]	; (4fdc <add_to_waitq_locked+0x80>)
    4f86:	21b1      	movs	r1, #177	; 0xb1
    4f88:	f001 fbe8 	bl	675c <assert_post_action>
	return list->head == list;
    4f8c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f8e:	429d      	cmp	r5, r3
    4f90:	bf08      	it	eq
    4f92:	2300      	moveq	r3, #0
    4f94:	2b00      	cmp	r3, #0
    4f96:	bf38      	it	cc
    4f98:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4f9a:	b19b      	cbz	r3, 4fc4 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    4f9c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4fa0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4fa4:	4291      	cmp	r1, r2
    4fa6:	d008      	beq.n	4fba <add_to_waitq_locked+0x5e>
		return b2 - b1;
    4fa8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4faa:	2a00      	cmp	r2, #0
    4fac:	dd05      	ble.n	4fba <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    4fae:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4fb0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4fb4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4fb6:	605c      	str	r4, [r3, #4]
}
    4fb8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4fba:	686a      	ldr	r2, [r5, #4]
    4fbc:	4293      	cmp	r3, r2
    4fbe:	d001      	beq.n	4fc4 <add_to_waitq_locked+0x68>
    4fc0:	681b      	ldr	r3, [r3, #0]
    4fc2:	e7ea      	b.n	4f9a <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    4fc4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4fc6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4fca:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4fcc:	606c      	str	r4, [r5, #4]
    4fce:	e7f3      	b.n	4fb8 <add_to_waitq_locked+0x5c>
    4fd0:	20000150 	.word	0x20000150
    4fd4:	000082e2 	.word	0x000082e2
    4fd8:	00007610 	.word	0x00007610
    4fdc:	000082c0 	.word	0x000082c0

00004fe0 <pend>:
{
    4fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fe4:	4604      	mov	r4, r0
    4fe6:	460d      	mov	r5, r1
    4fe8:	4616      	mov	r6, r2
    4fea:	461f      	mov	r7, r3
	__asm__ volatile(
    4fec:	f04f 0320 	mov.w	r3, #32
    4ff0:	f3ef 8811 	mrs	r8, BASEPRI
    4ff4:	f383 8812 	msr	BASEPRI_MAX, r3
    4ff8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ffc:	481f      	ldr	r0, [pc, #124]	; (507c <pend+0x9c>)
    4ffe:	f000 fe5b 	bl	5cb8 <z_spin_lock_valid>
    5002:	b968      	cbnz	r0, 5020 <pend+0x40>
    5004:	4a1e      	ldr	r2, [pc, #120]	; (5080 <pend+0xa0>)
    5006:	491f      	ldr	r1, [pc, #124]	; (5084 <pend+0xa4>)
    5008:	481f      	ldr	r0, [pc, #124]	; (5088 <pend+0xa8>)
    500a:	2381      	movs	r3, #129	; 0x81
    500c:	f001 fc7f 	bl	690e <printk>
    5010:	491a      	ldr	r1, [pc, #104]	; (507c <pend+0x9c>)
    5012:	481e      	ldr	r0, [pc, #120]	; (508c <pend+0xac>)
    5014:	f001 fc7b 	bl	690e <printk>
    5018:	4819      	ldr	r0, [pc, #100]	; (5080 <pend+0xa0>)
    501a:	2181      	movs	r1, #129	; 0x81
    501c:	f001 fb9e 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    5020:	4816      	ldr	r0, [pc, #88]	; (507c <pend+0x9c>)
    5022:	f000 fe67 	bl	5cf4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    5026:	4620      	mov	r0, r4
    5028:	4629      	mov	r1, r5
    502a:	f7ff ff97 	bl	4f5c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    502e:	4813      	ldr	r0, [pc, #76]	; (507c <pend+0x9c>)
    5030:	f000 fe50 	bl	5cd4 <z_spin_unlock_valid>
    5034:	b968      	cbnz	r0, 5052 <pend+0x72>
    5036:	4a12      	ldr	r2, [pc, #72]	; (5080 <pend+0xa0>)
    5038:	4915      	ldr	r1, [pc, #84]	; (5090 <pend+0xb0>)
    503a:	4813      	ldr	r0, [pc, #76]	; (5088 <pend+0xa8>)
    503c:	23ac      	movs	r3, #172	; 0xac
    503e:	f001 fc66 	bl	690e <printk>
    5042:	490e      	ldr	r1, [pc, #56]	; (507c <pend+0x9c>)
    5044:	4813      	ldr	r0, [pc, #76]	; (5094 <pend+0xb4>)
    5046:	f001 fc62 	bl	690e <printk>
    504a:	480d      	ldr	r0, [pc, #52]	; (5080 <pend+0xa0>)
    504c:	21ac      	movs	r1, #172	; 0xac
    504e:	f001 fb85 	bl	675c <assert_post_action>
	__asm__ volatile(
    5052:	f388 8811 	msr	BASEPRI, r8
    5056:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    505a:	1c7b      	adds	r3, r7, #1
    505c:	bf08      	it	eq
    505e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    5062:	d008      	beq.n	5076 <pend+0x96>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5064:	4632      	mov	r2, r6
    5066:	463b      	mov	r3, r7
    5068:	f104 0018 	add.w	r0, r4, #24
    506c:	490a      	ldr	r1, [pc, #40]	; (5098 <pend+0xb8>)
}
    506e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5072:	f000 be97 	b.w	5da4 <z_add_timeout>
    5076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    507a:	bf00      	nop
    507c:	200009c4 	.word	0x200009c4
    5080:	000077fd 	.word	0x000077fd
    5084:	0000784f 	.word	0x0000784f
    5088:	00007610 	.word	0x00007610
    508c:	00007864 	.word	0x00007864
    5090:	00007823 	.word	0x00007823
    5094:	0000783a 	.word	0x0000783a
    5098:	00004e71 	.word	0x00004e71

0000509c <z_pend_curr>:
{
    509c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    509e:	4b11      	ldr	r3, [pc, #68]	; (50e4 <z_pend_curr+0x48>)
{
    50a0:	4604      	mov	r4, r0
	pending_current = _current;
    50a2:	6898      	ldr	r0, [r3, #8]
    50a4:	4b10      	ldr	r3, [pc, #64]	; (50e8 <z_pend_curr+0x4c>)
{
    50a6:	460d      	mov	r5, r1
	pending_current = _current;
    50a8:	6018      	str	r0, [r3, #0]
{
    50aa:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    50ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    50b0:	f7ff ff96 	bl	4fe0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    50b4:	4620      	mov	r0, r4
    50b6:	f000 fe0d 	bl	5cd4 <z_spin_unlock_valid>
    50ba:	b968      	cbnz	r0, 50d8 <z_pend_curr+0x3c>
    50bc:	4a0b      	ldr	r2, [pc, #44]	; (50ec <z_pend_curr+0x50>)
    50be:	490c      	ldr	r1, [pc, #48]	; (50f0 <z_pend_curr+0x54>)
    50c0:	480c      	ldr	r0, [pc, #48]	; (50f4 <z_pend_curr+0x58>)
    50c2:	23c3      	movs	r3, #195	; 0xc3
    50c4:	f001 fc23 	bl	690e <printk>
    50c8:	480b      	ldr	r0, [pc, #44]	; (50f8 <z_pend_curr+0x5c>)
    50ca:	4621      	mov	r1, r4
    50cc:	f001 fc1f 	bl	690e <printk>
    50d0:	4806      	ldr	r0, [pc, #24]	; (50ec <z_pend_curr+0x50>)
    50d2:	21c3      	movs	r1, #195	; 0xc3
    50d4:	f001 fb42 	bl	675c <assert_post_action>
    50d8:	4628      	mov	r0, r5
}
    50da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    50de:	f7fc bc0f 	b.w	1900 <arch_swap>
    50e2:	bf00      	nop
    50e4:	20000994 	.word	0x20000994
    50e8:	200009c0 	.word	0x200009c0
    50ec:	000077fd 	.word	0x000077fd
    50f0:	00007823 	.word	0x00007823
    50f4:	00007610 	.word	0x00007610
    50f8:	0000783a 	.word	0x0000783a

000050fc <z_set_prio>:
{
    50fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50fe:	4604      	mov	r4, r0
    5100:	460e      	mov	r6, r1
	__asm__ volatile(
    5102:	f04f 0320 	mov.w	r3, #32
    5106:	f3ef 8711 	mrs	r7, BASEPRI
    510a:	f383 8812 	msr	BASEPRI_MAX, r3
    510e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5112:	483c      	ldr	r0, [pc, #240]	; (5204 <z_set_prio+0x108>)
    5114:	f000 fdd0 	bl	5cb8 <z_spin_lock_valid>
    5118:	b968      	cbnz	r0, 5136 <z_set_prio+0x3a>
    511a:	4a3b      	ldr	r2, [pc, #236]	; (5208 <z_set_prio+0x10c>)
    511c:	493b      	ldr	r1, [pc, #236]	; (520c <z_set_prio+0x110>)
    511e:	483c      	ldr	r0, [pc, #240]	; (5210 <z_set_prio+0x114>)
    5120:	2381      	movs	r3, #129	; 0x81
    5122:	f001 fbf4 	bl	690e <printk>
    5126:	4937      	ldr	r1, [pc, #220]	; (5204 <z_set_prio+0x108>)
    5128:	483a      	ldr	r0, [pc, #232]	; (5214 <z_set_prio+0x118>)
    512a:	f001 fbf0 	bl	690e <printk>
    512e:	4836      	ldr	r0, [pc, #216]	; (5208 <z_set_prio+0x10c>)
    5130:	2181      	movs	r1, #129	; 0x81
    5132:	f001 fb13 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    5136:	4833      	ldr	r0, [pc, #204]	; (5204 <z_set_prio+0x108>)
    5138:	f000 fddc 	bl	5cf4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    513c:	7b63      	ldrb	r3, [r4, #13]
    513e:	06da      	lsls	r2, r3, #27
    5140:	b276      	sxtb	r6, r6
    5142:	d15c      	bne.n	51fe <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    5144:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    5146:	2d00      	cmp	r5, #0
    5148:	d159      	bne.n	51fe <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    514a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    514e:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    5150:	4831      	ldr	r0, [pc, #196]	; (5218 <z_set_prio+0x11c>)
    5152:	4621      	mov	r1, r4
    5154:	f7ff fc54 	bl	4a00 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5158:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    515a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    515c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5160:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5162:	4b2e      	ldr	r3, [pc, #184]	; (521c <z_set_prio+0x120>)
    5164:	429c      	cmp	r4, r3
    5166:	d109      	bne.n	517c <z_set_prio+0x80>
    5168:	492d      	ldr	r1, [pc, #180]	; (5220 <z_set_prio+0x124>)
    516a:	4829      	ldr	r0, [pc, #164]	; (5210 <z_set_prio+0x114>)
    516c:	4a2d      	ldr	r2, [pc, #180]	; (5224 <z_set_prio+0x128>)
    516e:	23b1      	movs	r3, #177	; 0xb1
    5170:	f001 fbcd 	bl	690e <printk>
    5174:	482b      	ldr	r0, [pc, #172]	; (5224 <z_set_prio+0x128>)
    5176:	21b1      	movs	r1, #177	; 0xb1
    5178:	f001 faf0 	bl	675c <assert_post_action>
	return list->head == list;
    517c:	492a      	ldr	r1, [pc, #168]	; (5228 <z_set_prio+0x12c>)
    517e:	460b      	mov	r3, r1
    5180:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5184:	4298      	cmp	r0, r3
    5186:	bf18      	it	ne
    5188:	4605      	movne	r5, r0
    518a:	2d00      	cmp	r5, #0
    518c:	461a      	mov	r2, r3
    518e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5190:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    5192:	bf38      	it	cc
    5194:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5196:	b36b      	cbz	r3, 51f4 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    5198:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    519c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    51a0:	4286      	cmp	r6, r0
    51a2:	d023      	beq.n	51ec <z_set_prio+0xf0>
		return b2 - b1;
    51a4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    51a6:	2800      	cmp	r0, #0
    51a8:	dd20      	ble.n	51ec <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    51aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    51ac:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    51b0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    51b2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    51b4:	2001      	movs	r0, #1
    51b6:	f7ff fc67 	bl	4a88 <update_cache>
    51ba:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    51bc:	4811      	ldr	r0, [pc, #68]	; (5204 <z_set_prio+0x108>)
    51be:	f000 fd89 	bl	5cd4 <z_spin_unlock_valid>
    51c2:	b968      	cbnz	r0, 51e0 <z_set_prio+0xe4>
    51c4:	4a10      	ldr	r2, [pc, #64]	; (5208 <z_set_prio+0x10c>)
    51c6:	4919      	ldr	r1, [pc, #100]	; (522c <z_set_prio+0x130>)
    51c8:	4811      	ldr	r0, [pc, #68]	; (5210 <z_set_prio+0x114>)
    51ca:	23ac      	movs	r3, #172	; 0xac
    51cc:	f001 fb9f 	bl	690e <printk>
    51d0:	490c      	ldr	r1, [pc, #48]	; (5204 <z_set_prio+0x108>)
    51d2:	4817      	ldr	r0, [pc, #92]	; (5230 <z_set_prio+0x134>)
    51d4:	f001 fb9b 	bl	690e <printk>
    51d8:	480b      	ldr	r0, [pc, #44]	; (5208 <z_set_prio+0x10c>)
    51da:	21ac      	movs	r1, #172	; 0xac
    51dc:	f001 fabe 	bl	675c <assert_post_action>
	__asm__ volatile(
    51e0:	f387 8811 	msr	BASEPRI, r7
    51e4:	f3bf 8f6f 	isb	sy
}
    51e8:	4620      	mov	r0, r4
    51ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    51ec:	42ab      	cmp	r3, r5
    51ee:	d001      	beq.n	51f4 <z_set_prio+0xf8>
    51f0:	681b      	ldr	r3, [r3, #0]
    51f2:	e7d0      	b.n	5196 <z_set_prio+0x9a>
	node->prev = tail;
    51f4:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    51f8:	602c      	str	r4, [r5, #0]
	list->tail = node;
    51fa:	624c      	str	r4, [r1, #36]	; 0x24
}
    51fc:	e7da      	b.n	51b4 <z_set_prio+0xb8>
			thread->base.prio = prio;
    51fe:	73a6      	strb	r6, [r4, #14]
    5200:	2400      	movs	r4, #0
    5202:	e7db      	b.n	51bc <z_set_prio+0xc0>
    5204:	200009c4 	.word	0x200009c4
    5208:	000077fd 	.word	0x000077fd
    520c:	0000784f 	.word	0x0000784f
    5210:	00007610 	.word	0x00007610
    5214:	00007864 	.word	0x00007864
    5218:	200009b4 	.word	0x200009b4
    521c:	20000150 	.word	0x20000150
    5220:	000082e2 	.word	0x000082e2
    5224:	000082c0 	.word	0x000082c0
    5228:	20000994 	.word	0x20000994
    522c:	00007823 	.word	0x00007823
    5230:	0000783a 	.word	0x0000783a

00005234 <z_impl_k_thread_suspend>:
{
    5234:	b570      	push	{r4, r5, r6, lr}
    5236:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5238:	3018      	adds	r0, #24
    523a:	f000 fe87 	bl	5f4c <z_abort_timeout>
	__asm__ volatile(
    523e:	f04f 0320 	mov.w	r3, #32
    5242:	f3ef 8611 	mrs	r6, BASEPRI
    5246:	f383 8812 	msr	BASEPRI_MAX, r3
    524a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    524e:	4825      	ldr	r0, [pc, #148]	; (52e4 <z_impl_k_thread_suspend+0xb0>)
    5250:	f000 fd32 	bl	5cb8 <z_spin_lock_valid>
    5254:	b968      	cbnz	r0, 5272 <z_impl_k_thread_suspend+0x3e>
    5256:	4a24      	ldr	r2, [pc, #144]	; (52e8 <z_impl_k_thread_suspend+0xb4>)
    5258:	4924      	ldr	r1, [pc, #144]	; (52ec <z_impl_k_thread_suspend+0xb8>)
    525a:	4825      	ldr	r0, [pc, #148]	; (52f0 <z_impl_k_thread_suspend+0xbc>)
    525c:	2381      	movs	r3, #129	; 0x81
    525e:	f001 fb56 	bl	690e <printk>
    5262:	4920      	ldr	r1, [pc, #128]	; (52e4 <z_impl_k_thread_suspend+0xb0>)
    5264:	4823      	ldr	r0, [pc, #140]	; (52f4 <z_impl_k_thread_suspend+0xc0>)
    5266:	f001 fb52 	bl	690e <printk>
    526a:	481f      	ldr	r0, [pc, #124]	; (52e8 <z_impl_k_thread_suspend+0xb4>)
    526c:	2181      	movs	r1, #129	; 0x81
    526e:	f001 fa75 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    5272:	481c      	ldr	r0, [pc, #112]	; (52e4 <z_impl_k_thread_suspend+0xb0>)
    5274:	f000 fd3e 	bl	5cf4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    5278:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    527c:	7b63      	ldrb	r3, [r4, #13]
    527e:	2a00      	cmp	r2, #0
    5280:	da06      	bge.n	5290 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    5286:	481c      	ldr	r0, [pc, #112]	; (52f8 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5288:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    528a:	4621      	mov	r1, r4
    528c:	f7ff fbb8 	bl	4a00 <z_priq_dumb_remove>
		update_cache(thread == _current);
    5290:	4d1a      	ldr	r5, [pc, #104]	; (52fc <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5292:	7b63      	ldrb	r3, [r4, #13]
    5294:	68a8      	ldr	r0, [r5, #8]
    5296:	f043 0310 	orr.w	r3, r3, #16
    529a:	7363      	strb	r3, [r4, #13]
    529c:	1b03      	subs	r3, r0, r4
    529e:	4258      	negs	r0, r3
    52a0:	4158      	adcs	r0, r3
    52a2:	f7ff fbf1 	bl	4a88 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    52a6:	480f      	ldr	r0, [pc, #60]	; (52e4 <z_impl_k_thread_suspend+0xb0>)
    52a8:	f000 fd14 	bl	5cd4 <z_spin_unlock_valid>
    52ac:	b968      	cbnz	r0, 52ca <z_impl_k_thread_suspend+0x96>
    52ae:	4a0e      	ldr	r2, [pc, #56]	; (52e8 <z_impl_k_thread_suspend+0xb4>)
    52b0:	4913      	ldr	r1, [pc, #76]	; (5300 <z_impl_k_thread_suspend+0xcc>)
    52b2:	480f      	ldr	r0, [pc, #60]	; (52f0 <z_impl_k_thread_suspend+0xbc>)
    52b4:	23ac      	movs	r3, #172	; 0xac
    52b6:	f001 fb2a 	bl	690e <printk>
    52ba:	490a      	ldr	r1, [pc, #40]	; (52e4 <z_impl_k_thread_suspend+0xb0>)
    52bc:	4811      	ldr	r0, [pc, #68]	; (5304 <z_impl_k_thread_suspend+0xd0>)
    52be:	f001 fb26 	bl	690e <printk>
    52c2:	4809      	ldr	r0, [pc, #36]	; (52e8 <z_impl_k_thread_suspend+0xb4>)
    52c4:	21ac      	movs	r1, #172	; 0xac
    52c6:	f001 fa49 	bl	675c <assert_post_action>
	__asm__ volatile(
    52ca:	f386 8811 	msr	BASEPRI, r6
    52ce:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    52d2:	68ab      	ldr	r3, [r5, #8]
    52d4:	42a3      	cmp	r3, r4
    52d6:	d103      	bne.n	52e0 <z_impl_k_thread_suspend+0xac>
}
    52d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    52dc:	f001 be76 	b.w	6fcc <z_reschedule_unlocked>
}
    52e0:	bd70      	pop	{r4, r5, r6, pc}
    52e2:	bf00      	nop
    52e4:	200009c4 	.word	0x200009c4
    52e8:	000077fd 	.word	0x000077fd
    52ec:	0000784f 	.word	0x0000784f
    52f0:	00007610 	.word	0x00007610
    52f4:	00007864 	.word	0x00007864
    52f8:	200009b4 	.word	0x200009b4
    52fc:	20000994 	.word	0x20000994
    5300:	00007823 	.word	0x00007823
    5304:	0000783a 	.word	0x0000783a

00005308 <k_sched_unlock>:
{
    5308:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    530a:	f04f 0320 	mov.w	r3, #32
    530e:	f3ef 8511 	mrs	r5, BASEPRI
    5312:	f383 8812 	msr	BASEPRI_MAX, r3
    5316:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    531a:	482d      	ldr	r0, [pc, #180]	; (53d0 <k_sched_unlock+0xc8>)
    531c:	f000 fccc 	bl	5cb8 <z_spin_lock_valid>
    5320:	b968      	cbnz	r0, 533e <k_sched_unlock+0x36>
    5322:	4a2c      	ldr	r2, [pc, #176]	; (53d4 <k_sched_unlock+0xcc>)
    5324:	492c      	ldr	r1, [pc, #176]	; (53d8 <k_sched_unlock+0xd0>)
    5326:	482d      	ldr	r0, [pc, #180]	; (53dc <k_sched_unlock+0xd4>)
    5328:	2381      	movs	r3, #129	; 0x81
    532a:	f001 faf0 	bl	690e <printk>
    532e:	4928      	ldr	r1, [pc, #160]	; (53d0 <k_sched_unlock+0xc8>)
    5330:	482b      	ldr	r0, [pc, #172]	; (53e0 <k_sched_unlock+0xd8>)
    5332:	f001 faec 	bl	690e <printk>
    5336:	4827      	ldr	r0, [pc, #156]	; (53d4 <k_sched_unlock+0xcc>)
    5338:	2181      	movs	r1, #129	; 0x81
    533a:	f001 fa0f 	bl	675c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    533e:	4c29      	ldr	r4, [pc, #164]	; (53e4 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    5340:	4823      	ldr	r0, [pc, #140]	; (53d0 <k_sched_unlock+0xc8>)
    5342:	f000 fcd7 	bl	5cf4 <z_spin_lock_set_owner>
    5346:	68a2      	ldr	r2, [r4, #8]
    5348:	7bd2      	ldrb	r2, [r2, #15]
    534a:	b972      	cbnz	r2, 536a <k_sched_unlock+0x62>
    534c:	4926      	ldr	r1, [pc, #152]	; (53e8 <k_sched_unlock+0xe0>)
    534e:	4a27      	ldr	r2, [pc, #156]	; (53ec <k_sched_unlock+0xe4>)
    5350:	4822      	ldr	r0, [pc, #136]	; (53dc <k_sched_unlock+0xd4>)
    5352:	f240 3355 	movw	r3, #853	; 0x355
    5356:	f001 fada 	bl	690e <printk>
    535a:	4825      	ldr	r0, [pc, #148]	; (53f0 <k_sched_unlock+0xe8>)
    535c:	f001 fad7 	bl	690e <printk>
    5360:	4822      	ldr	r0, [pc, #136]	; (53ec <k_sched_unlock+0xe4>)
    5362:	f240 3155 	movw	r1, #853	; 0x355
    5366:	f001 f9f9 	bl	675c <assert_post_action>
    536a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    536e:	b173      	cbz	r3, 538e <k_sched_unlock+0x86>
    5370:	4920      	ldr	r1, [pc, #128]	; (53f4 <k_sched_unlock+0xec>)
    5372:	4a1e      	ldr	r2, [pc, #120]	; (53ec <k_sched_unlock+0xe4>)
    5374:	4819      	ldr	r0, [pc, #100]	; (53dc <k_sched_unlock+0xd4>)
    5376:	f240 3356 	movw	r3, #854	; 0x356
    537a:	f001 fac8 	bl	690e <printk>
    537e:	481c      	ldr	r0, [pc, #112]	; (53f0 <k_sched_unlock+0xe8>)
    5380:	f001 fac5 	bl	690e <printk>
    5384:	4819      	ldr	r0, [pc, #100]	; (53ec <k_sched_unlock+0xe4>)
    5386:	f240 3156 	movw	r1, #854	; 0x356
    538a:	f001 f9e7 	bl	675c <assert_post_action>
		++_current->base.sched_locked;
    538e:	68a2      	ldr	r2, [r4, #8]
    5390:	7bd3      	ldrb	r3, [r2, #15]
    5392:	3301      	adds	r3, #1
		update_cache(0);
    5394:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    5396:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5398:	f7ff fb76 	bl	4a88 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    539c:	480c      	ldr	r0, [pc, #48]	; (53d0 <k_sched_unlock+0xc8>)
    539e:	f000 fc99 	bl	5cd4 <z_spin_unlock_valid>
    53a2:	b968      	cbnz	r0, 53c0 <k_sched_unlock+0xb8>
    53a4:	4a0b      	ldr	r2, [pc, #44]	; (53d4 <k_sched_unlock+0xcc>)
    53a6:	4914      	ldr	r1, [pc, #80]	; (53f8 <k_sched_unlock+0xf0>)
    53a8:	480c      	ldr	r0, [pc, #48]	; (53dc <k_sched_unlock+0xd4>)
    53aa:	23ac      	movs	r3, #172	; 0xac
    53ac:	f001 faaf 	bl	690e <printk>
    53b0:	4907      	ldr	r1, [pc, #28]	; (53d0 <k_sched_unlock+0xc8>)
    53b2:	4812      	ldr	r0, [pc, #72]	; (53fc <k_sched_unlock+0xf4>)
    53b4:	f001 faab 	bl	690e <printk>
    53b8:	4806      	ldr	r0, [pc, #24]	; (53d4 <k_sched_unlock+0xcc>)
    53ba:	21ac      	movs	r1, #172	; 0xac
    53bc:	f001 f9ce 	bl	675c <assert_post_action>
	__asm__ volatile(
    53c0:	f385 8811 	msr	BASEPRI, r5
    53c4:	f3bf 8f6f 	isb	sy
}
    53c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    53cc:	f001 bdfe 	b.w	6fcc <z_reschedule_unlocked>
    53d0:	200009c4 	.word	0x200009c4
    53d4:	000077fd 	.word	0x000077fd
    53d8:	0000784f 	.word	0x0000784f
    53dc:	00007610 	.word	0x00007610
    53e0:	00007864 	.word	0x00007864
    53e4:	20000994 	.word	0x20000994
    53e8:	00008341 	.word	0x00008341
    53ec:	000082c0 	.word	0x000082c0
    53f0:	0000828c 	.word	0x0000828c
    53f4:	00008213 	.word	0x00008213
    53f8:	00007823 	.word	0x00007823
    53fc:	0000783a 	.word	0x0000783a

00005400 <z_unpend_first_thread>:
{
    5400:	b538      	push	{r3, r4, r5, lr}
    5402:	4604      	mov	r4, r0
	__asm__ volatile(
    5404:	f04f 0320 	mov.w	r3, #32
    5408:	f3ef 8511 	mrs	r5, BASEPRI
    540c:	f383 8812 	msr	BASEPRI_MAX, r3
    5410:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5414:	481b      	ldr	r0, [pc, #108]	; (5484 <z_unpend_first_thread+0x84>)
    5416:	f000 fc4f 	bl	5cb8 <z_spin_lock_valid>
    541a:	b968      	cbnz	r0, 5438 <z_unpend_first_thread+0x38>
    541c:	4a1a      	ldr	r2, [pc, #104]	; (5488 <z_unpend_first_thread+0x88>)
    541e:	491b      	ldr	r1, [pc, #108]	; (548c <z_unpend_first_thread+0x8c>)
    5420:	481b      	ldr	r0, [pc, #108]	; (5490 <z_unpend_first_thread+0x90>)
    5422:	2381      	movs	r3, #129	; 0x81
    5424:	f001 fa73 	bl	690e <printk>
    5428:	4916      	ldr	r1, [pc, #88]	; (5484 <z_unpend_first_thread+0x84>)
    542a:	481a      	ldr	r0, [pc, #104]	; (5494 <z_unpend_first_thread+0x94>)
    542c:	f001 fa6f 	bl	690e <printk>
    5430:	4815      	ldr	r0, [pc, #84]	; (5488 <z_unpend_first_thread+0x88>)
    5432:	2181      	movs	r1, #129	; 0x81
    5434:	f001 f992 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    5438:	4812      	ldr	r0, [pc, #72]	; (5484 <z_unpend_first_thread+0x84>)
    543a:	f000 fc5b 	bl	5cf4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    543e:	4620      	mov	r0, r4
    5440:	f001 fdce 	bl	6fe0 <z_priq_dumb_best>
		if (thread != NULL) {
    5444:	4604      	mov	r4, r0
    5446:	b128      	cbz	r0, 5454 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    5448:	f7ff fafc 	bl	4a44 <unpend_thread_no_timeout>
    544c:	f104 0018 	add.w	r0, r4, #24
    5450:	f000 fd7c 	bl	5f4c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5454:	480b      	ldr	r0, [pc, #44]	; (5484 <z_unpend_first_thread+0x84>)
    5456:	f000 fc3d 	bl	5cd4 <z_spin_unlock_valid>
    545a:	b968      	cbnz	r0, 5478 <z_unpend_first_thread+0x78>
    545c:	4a0a      	ldr	r2, [pc, #40]	; (5488 <z_unpend_first_thread+0x88>)
    545e:	490e      	ldr	r1, [pc, #56]	; (5498 <z_unpend_first_thread+0x98>)
    5460:	480b      	ldr	r0, [pc, #44]	; (5490 <z_unpend_first_thread+0x90>)
    5462:	23ac      	movs	r3, #172	; 0xac
    5464:	f001 fa53 	bl	690e <printk>
    5468:	4906      	ldr	r1, [pc, #24]	; (5484 <z_unpend_first_thread+0x84>)
    546a:	480c      	ldr	r0, [pc, #48]	; (549c <z_unpend_first_thread+0x9c>)
    546c:	f001 fa4f 	bl	690e <printk>
    5470:	4805      	ldr	r0, [pc, #20]	; (5488 <z_unpend_first_thread+0x88>)
    5472:	21ac      	movs	r1, #172	; 0xac
    5474:	f001 f972 	bl	675c <assert_post_action>
	__asm__ volatile(
    5478:	f385 8811 	msr	BASEPRI, r5
    547c:	f3bf 8f6f 	isb	sy
}
    5480:	4620      	mov	r0, r4
    5482:	bd38      	pop	{r3, r4, r5, pc}
    5484:	200009c4 	.word	0x200009c4
    5488:	000077fd 	.word	0x000077fd
    548c:	0000784f 	.word	0x0000784f
    5490:	00007610 	.word	0x00007610
    5494:	00007864 	.word	0x00007864
    5498:	00007823 	.word	0x00007823
    549c:	0000783a 	.word	0x0000783a

000054a0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    54a0:	4b04      	ldr	r3, [pc, #16]	; (54b4 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    54a2:	2100      	movs	r1, #0
    54a4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    54a8:	e9c3 2208 	strd	r2, r2, [r3, #32]
    54ac:	4608      	mov	r0, r1
    54ae:	f7ff b989 	b.w	47c4 <k_sched_time_slice_set>
    54b2:	bf00      	nop
    54b4:	20000994 	.word	0x20000994

000054b8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    54b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54ba:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    54be:	b173      	cbz	r3, 54de <z_impl_k_yield+0x26>
    54c0:	4941      	ldr	r1, [pc, #260]	; (55c8 <z_impl_k_yield+0x110>)
    54c2:	4a42      	ldr	r2, [pc, #264]	; (55cc <z_impl_k_yield+0x114>)
    54c4:	4842      	ldr	r0, [pc, #264]	; (55d0 <z_impl_k_yield+0x118>)
    54c6:	f240 43a1 	movw	r3, #1185	; 0x4a1
    54ca:	f001 fa20 	bl	690e <printk>
    54ce:	4841      	ldr	r0, [pc, #260]	; (55d4 <z_impl_k_yield+0x11c>)
    54d0:	f001 fa1d 	bl	690e <printk>
    54d4:	483d      	ldr	r0, [pc, #244]	; (55cc <z_impl_k_yield+0x114>)
    54d6:	f240 41a1 	movw	r1, #1185	; 0x4a1
    54da:	f001 f93f 	bl	675c <assert_post_action>
	__asm__ volatile(
    54de:	f04f 0320 	mov.w	r3, #32
    54e2:	f3ef 8611 	mrs	r6, BASEPRI
    54e6:	f383 8812 	msr	BASEPRI_MAX, r3
    54ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54ee:	483a      	ldr	r0, [pc, #232]	; (55d8 <z_impl_k_yield+0x120>)
    54f0:	f000 fbe2 	bl	5cb8 <z_spin_lock_valid>
    54f4:	b968      	cbnz	r0, 5512 <z_impl_k_yield+0x5a>
    54f6:	4a39      	ldr	r2, [pc, #228]	; (55dc <z_impl_k_yield+0x124>)
    54f8:	4939      	ldr	r1, [pc, #228]	; (55e0 <z_impl_k_yield+0x128>)
    54fa:	4835      	ldr	r0, [pc, #212]	; (55d0 <z_impl_k_yield+0x118>)
    54fc:	2381      	movs	r3, #129	; 0x81
    54fe:	f001 fa06 	bl	690e <printk>
    5502:	4935      	ldr	r1, [pc, #212]	; (55d8 <z_impl_k_yield+0x120>)
    5504:	4837      	ldr	r0, [pc, #220]	; (55e4 <z_impl_k_yield+0x12c>)
    5506:	f001 fa02 	bl	690e <printk>
    550a:	4834      	ldr	r0, [pc, #208]	; (55dc <z_impl_k_yield+0x124>)
    550c:	2181      	movs	r1, #129	; 0x81
    550e:	f001 f925 	bl	675c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    5512:	4d35      	ldr	r5, [pc, #212]	; (55e8 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    5514:	4830      	ldr	r0, [pc, #192]	; (55d8 <z_impl_k_yield+0x120>)
    5516:	f000 fbed 	bl	5cf4 <z_spin_lock_set_owner>
    551a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    551c:	7b4b      	ldrb	r3, [r1, #13]
    551e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5522:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    5524:	f105 0020 	add.w	r0, r5, #32
    5528:	f7ff fa6a 	bl	4a00 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    552c:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    552e:	7b63      	ldrb	r3, [r4, #13]
    5530:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5534:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5536:	4b2d      	ldr	r3, [pc, #180]	; (55ec <z_impl_k_yield+0x134>)
    5538:	429c      	cmp	r4, r3
    553a:	d109      	bne.n	5550 <z_impl_k_yield+0x98>
    553c:	492c      	ldr	r1, [pc, #176]	; (55f0 <z_impl_k_yield+0x138>)
    553e:	4824      	ldr	r0, [pc, #144]	; (55d0 <z_impl_k_yield+0x118>)
    5540:	4a22      	ldr	r2, [pc, #136]	; (55cc <z_impl_k_yield+0x114>)
    5542:	23b1      	movs	r3, #177	; 0xb1
    5544:	f001 f9e3 	bl	690e <printk>
    5548:	4820      	ldr	r0, [pc, #128]	; (55cc <z_impl_k_yield+0x114>)
    554a:	21b1      	movs	r1, #177	; 0xb1
    554c:	f001 f906 	bl	675c <assert_post_action>
	return list->head == list;
    5550:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5552:	4828      	ldr	r0, [pc, #160]	; (55f4 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5554:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5556:	4283      	cmp	r3, r0
    5558:	bf08      	it	eq
    555a:	2300      	moveq	r3, #0
    555c:	2b00      	cmp	r3, #0
    555e:	bf38      	it	cc
    5560:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5562:	b35b      	cbz	r3, 55bc <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    5564:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5568:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    556c:	4297      	cmp	r7, r2
    556e:	d021      	beq.n	55b4 <z_impl_k_yield+0xfc>
		return b2 - b1;
    5570:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    5572:	2a00      	cmp	r2, #0
    5574:	dd1e      	ble.n	55b4 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    5576:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5578:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    557c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    557e:	605c      	str	r4, [r3, #4]
	update_cache(1);
    5580:	2001      	movs	r0, #1
    5582:	f7ff fa81 	bl	4a88 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5586:	4814      	ldr	r0, [pc, #80]	; (55d8 <z_impl_k_yield+0x120>)
    5588:	f000 fba4 	bl	5cd4 <z_spin_unlock_valid>
    558c:	b968      	cbnz	r0, 55aa <z_impl_k_yield+0xf2>
    558e:	4a13      	ldr	r2, [pc, #76]	; (55dc <z_impl_k_yield+0x124>)
    5590:	4919      	ldr	r1, [pc, #100]	; (55f8 <z_impl_k_yield+0x140>)
    5592:	480f      	ldr	r0, [pc, #60]	; (55d0 <z_impl_k_yield+0x118>)
    5594:	23c3      	movs	r3, #195	; 0xc3
    5596:	f001 f9ba 	bl	690e <printk>
    559a:	490f      	ldr	r1, [pc, #60]	; (55d8 <z_impl_k_yield+0x120>)
    559c:	4817      	ldr	r0, [pc, #92]	; (55fc <z_impl_k_yield+0x144>)
    559e:	f001 f9b6 	bl	690e <printk>
    55a2:	480e      	ldr	r0, [pc, #56]	; (55dc <z_impl_k_yield+0x124>)
    55a4:	21c3      	movs	r1, #195	; 0xc3
    55a6:	f001 f8d9 	bl	675c <assert_post_action>
    55aa:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    55ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    55b0:	f7fc b9a6 	b.w	1900 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    55b4:	428b      	cmp	r3, r1
    55b6:	d001      	beq.n	55bc <z_impl_k_yield+0x104>
    55b8:	681b      	ldr	r3, [r3, #0]
    55ba:	e7d2      	b.n	5562 <z_impl_k_yield+0xaa>
	node->prev = tail;
    55bc:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    55c0:	600c      	str	r4, [r1, #0]
	list->tail = node;
    55c2:	626c      	str	r4, [r5, #36]	; 0x24
}
    55c4:	e7dc      	b.n	5580 <z_impl_k_yield+0xc8>
    55c6:	bf00      	nop
    55c8:	00008213 	.word	0x00008213
    55cc:	000082c0 	.word	0x000082c0
    55d0:	00007610 	.word	0x00007610
    55d4:	0000828c 	.word	0x0000828c
    55d8:	200009c4 	.word	0x200009c4
    55dc:	000077fd 	.word	0x000077fd
    55e0:	0000784f 	.word	0x0000784f
    55e4:	00007864 	.word	0x00007864
    55e8:	20000994 	.word	0x20000994
    55ec:	20000150 	.word	0x20000150
    55f0:	000082e2 	.word	0x000082e2
    55f4:	200009b4 	.word	0x200009b4
    55f8:	00007823 	.word	0x00007823
    55fc:	0000783a 	.word	0x0000783a

00005600 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    5600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5604:	4604      	mov	r4, r0
    5606:	460d      	mov	r5, r1
    5608:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    560c:	b173      	cbz	r3, 562c <z_tick_sleep+0x2c>
    560e:	4945      	ldr	r1, [pc, #276]	; (5724 <z_tick_sleep+0x124>)
    5610:	4a45      	ldr	r2, [pc, #276]	; (5728 <z_tick_sleep+0x128>)
    5612:	4846      	ldr	r0, [pc, #280]	; (572c <z_tick_sleep+0x12c>)
    5614:	f240 43be 	movw	r3, #1214	; 0x4be
    5618:	f001 f979 	bl	690e <printk>
    561c:	4844      	ldr	r0, [pc, #272]	; (5730 <z_tick_sleep+0x130>)
    561e:	f001 f976 	bl	690e <printk>
    5622:	4841      	ldr	r0, [pc, #260]	; (5728 <z_tick_sleep+0x128>)
    5624:	f240 41be 	movw	r1, #1214	; 0x4be
    5628:	f001 f898 	bl	675c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    562c:	ea54 0305 	orrs.w	r3, r4, r5
    5630:	d104      	bne.n	563c <z_tick_sleep+0x3c>
	z_impl_k_yield();
    5632:	f7ff ff41 	bl	54b8 <z_impl_k_yield>
		k_yield();
		return 0;
    5636:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    5638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    563c:	f06f 0301 	mvn.w	r3, #1
    5640:	1b1e      	subs	r6, r3, r4
    5642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5646:	eb63 0705 	sbc.w	r7, r3, r5
    564a:	2e01      	cmp	r6, #1
    564c:	f177 0300 	sbcs.w	r3, r7, #0
    5650:	da64      	bge.n	571c <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5652:	f001 fcd5 	bl	7000 <sys_clock_tick_get_32>
    5656:	1906      	adds	r6, r0, r4
    5658:	f04f 0320 	mov.w	r3, #32
    565c:	f3ef 8811 	mrs	r8, BASEPRI
    5660:	f383 8812 	msr	BASEPRI_MAX, r3
    5664:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5668:	4832      	ldr	r0, [pc, #200]	; (5734 <z_tick_sleep+0x134>)
    566a:	f000 fb25 	bl	5cb8 <z_spin_lock_valid>
    566e:	b968      	cbnz	r0, 568c <z_tick_sleep+0x8c>
    5670:	4a31      	ldr	r2, [pc, #196]	; (5738 <z_tick_sleep+0x138>)
    5672:	4932      	ldr	r1, [pc, #200]	; (573c <z_tick_sleep+0x13c>)
    5674:	482d      	ldr	r0, [pc, #180]	; (572c <z_tick_sleep+0x12c>)
    5676:	2381      	movs	r3, #129	; 0x81
    5678:	f001 f949 	bl	690e <printk>
    567c:	492d      	ldr	r1, [pc, #180]	; (5734 <z_tick_sleep+0x134>)
    567e:	4830      	ldr	r0, [pc, #192]	; (5740 <z_tick_sleep+0x140>)
    5680:	f001 f945 	bl	690e <printk>
    5684:	482c      	ldr	r0, [pc, #176]	; (5738 <z_tick_sleep+0x138>)
    5686:	2181      	movs	r1, #129	; 0x81
    5688:	f001 f868 	bl	675c <assert_post_action>
	pending_current = _current;
    568c:	4f2d      	ldr	r7, [pc, #180]	; (5744 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    568e:	4829      	ldr	r0, [pc, #164]	; (5734 <z_tick_sleep+0x134>)
    5690:	f000 fb30 	bl	5cf4 <z_spin_lock_set_owner>
    5694:	4b2c      	ldr	r3, [pc, #176]	; (5748 <z_tick_sleep+0x148>)
    5696:	68b8      	ldr	r0, [r7, #8]
    5698:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    569a:	f7ff fc43 	bl	4f24 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    569e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    56a0:	492a      	ldr	r1, [pc, #168]	; (574c <z_tick_sleep+0x14c>)
    56a2:	4622      	mov	r2, r4
    56a4:	462b      	mov	r3, r5
    56a6:	3018      	adds	r0, #24
    56a8:	f000 fb7c 	bl	5da4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    56ac:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    56ae:	4821      	ldr	r0, [pc, #132]	; (5734 <z_tick_sleep+0x134>)
    56b0:	7b53      	ldrb	r3, [r2, #13]
    56b2:	f043 0310 	orr.w	r3, r3, #16
    56b6:	7353      	strb	r3, [r2, #13]
    56b8:	f000 fb0c 	bl	5cd4 <z_spin_unlock_valid>
    56bc:	b968      	cbnz	r0, 56da <z_tick_sleep+0xda>
    56be:	4a1e      	ldr	r2, [pc, #120]	; (5738 <z_tick_sleep+0x138>)
    56c0:	4923      	ldr	r1, [pc, #140]	; (5750 <z_tick_sleep+0x150>)
    56c2:	481a      	ldr	r0, [pc, #104]	; (572c <z_tick_sleep+0x12c>)
    56c4:	23c3      	movs	r3, #195	; 0xc3
    56c6:	f001 f922 	bl	690e <printk>
    56ca:	491a      	ldr	r1, [pc, #104]	; (5734 <z_tick_sleep+0x134>)
    56cc:	4821      	ldr	r0, [pc, #132]	; (5754 <z_tick_sleep+0x154>)
    56ce:	f001 f91e 	bl	690e <printk>
    56d2:	4819      	ldr	r0, [pc, #100]	; (5738 <z_tick_sleep+0x138>)
    56d4:	21c3      	movs	r1, #195	; 0xc3
    56d6:	f001 f841 	bl	675c <assert_post_action>
    56da:	4640      	mov	r0, r8
    56dc:	f7fc f910 	bl	1900 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    56e0:	68bb      	ldr	r3, [r7, #8]
    56e2:	7b5b      	ldrb	r3, [r3, #13]
    56e4:	06db      	lsls	r3, r3, #27
    56e6:	d50e      	bpl.n	5706 <z_tick_sleep+0x106>
    56e8:	491b      	ldr	r1, [pc, #108]	; (5758 <z_tick_sleep+0x158>)
    56ea:	4a0f      	ldr	r2, [pc, #60]	; (5728 <z_tick_sleep+0x128>)
    56ec:	480f      	ldr	r0, [pc, #60]	; (572c <z_tick_sleep+0x12c>)
    56ee:	f240 43df 	movw	r3, #1247	; 0x4df
    56f2:	f001 f90c 	bl	690e <printk>
    56f6:	480e      	ldr	r0, [pc, #56]	; (5730 <z_tick_sleep+0x130>)
    56f8:	f001 f909 	bl	690e <printk>
    56fc:	480a      	ldr	r0, [pc, #40]	; (5728 <z_tick_sleep+0x128>)
    56fe:	f240 41df 	movw	r1, #1247	; 0x4df
    5702:	f001 f82b 	bl	675c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5706:	f001 fc7b 	bl	7000 <sys_clock_tick_get_32>
    570a:	1a30      	subs	r0, r6, r0
    570c:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    5710:	2801      	cmp	r0, #1
    5712:	f171 0300 	sbcs.w	r3, r1, #0
    5716:	bfb8      	it	lt
    5718:	2000      	movlt	r0, #0
    571a:	e78d      	b.n	5638 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    571c:	f06f 0601 	mvn.w	r6, #1
    5720:	1b36      	subs	r6, r6, r4
    5722:	e799      	b.n	5658 <z_tick_sleep+0x58>
    5724:	00008213 	.word	0x00008213
    5728:	000082c0 	.word	0x000082c0
    572c:	00007610 	.word	0x00007610
    5730:	0000828c 	.word	0x0000828c
    5734:	200009c4 	.word	0x200009c4
    5738:	000077fd 	.word	0x000077fd
    573c:	0000784f 	.word	0x0000784f
    5740:	00007864 	.word	0x00007864
    5744:	20000994 	.word	0x20000994
    5748:	200009c0 	.word	0x200009c0
    574c:	00004e71 	.word	0x00004e71
    5750:	00007823 	.word	0x00007823
    5754:	0000783a 	.word	0x0000783a
    5758:	00008372 	.word	0x00008372

0000575c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    575c:	b538      	push	{r3, r4, r5, lr}
    575e:	4604      	mov	r4, r0
    5760:	460d      	mov	r5, r1
    5762:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    5766:	b173      	cbz	r3, 5786 <z_impl_k_sleep+0x2a>
    5768:	4913      	ldr	r1, [pc, #76]	; (57b8 <z_impl_k_sleep+0x5c>)
    576a:	4a14      	ldr	r2, [pc, #80]	; (57bc <z_impl_k_sleep+0x60>)
    576c:	4814      	ldr	r0, [pc, #80]	; (57c0 <z_impl_k_sleep+0x64>)
    576e:	f240 43ee 	movw	r3, #1262	; 0x4ee
    5772:	f001 f8cc 	bl	690e <printk>
    5776:	4813      	ldr	r0, [pc, #76]	; (57c4 <z_impl_k_sleep+0x68>)
    5778:	f001 f8c9 	bl	690e <printk>
    577c:	480f      	ldr	r0, [pc, #60]	; (57bc <z_impl_k_sleep+0x60>)
    577e:	f240 41ee 	movw	r1, #1262	; 0x4ee
    5782:	f000 ffeb 	bl	675c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5786:	1c6b      	adds	r3, r5, #1
    5788:	bf08      	it	eq
    578a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    578e:	d106      	bne.n	579e <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    5790:	4b0d      	ldr	r3, [pc, #52]	; (57c8 <z_impl_k_sleep+0x6c>)
    5792:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5794:	f7ff fd4e 	bl	5234 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    579c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    579e:	4620      	mov	r0, r4
    57a0:	4629      	mov	r1, r5
    57a2:	f7ff ff2d 	bl	5600 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
    57a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    57aa:	fb80 3403 	smull	r3, r4, r0, r3
    57ae:	0bd8      	lsrs	r0, r3, #15
    57b0:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    57b4:	e7f2      	b.n	579c <z_impl_k_sleep+0x40>
    57b6:	bf00      	nop
    57b8:	00008213 	.word	0x00008213
    57bc:	000082c0 	.word	0x000082c0
    57c0:	00007610 	.word	0x00007610
    57c4:	0000828c 	.word	0x0000828c
    57c8:	20000994 	.word	0x20000994

000057cc <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    57cc:	4b01      	ldr	r3, [pc, #4]	; (57d4 <z_impl_z_current_get+0x8>)
    57ce:	6898      	ldr	r0, [r3, #8]
    57d0:	4770      	bx	lr
    57d2:	bf00      	nop
    57d4:	20000994 	.word	0x20000994

000057d8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    57d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57dc:	4604      	mov	r4, r0
    57de:	f04f 0320 	mov.w	r3, #32
    57e2:	f3ef 8611 	mrs	r6, BASEPRI
    57e6:	f383 8812 	msr	BASEPRI_MAX, r3
    57ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    57ee:	4848      	ldr	r0, [pc, #288]	; (5910 <z_thread_abort+0x138>)
    57f0:	f000 fa62 	bl	5cb8 <z_spin_lock_valid>
    57f4:	b968      	cbnz	r0, 5812 <z_thread_abort+0x3a>
    57f6:	4a47      	ldr	r2, [pc, #284]	; (5914 <z_thread_abort+0x13c>)
    57f8:	4947      	ldr	r1, [pc, #284]	; (5918 <z_thread_abort+0x140>)
    57fa:	4848      	ldr	r0, [pc, #288]	; (591c <z_thread_abort+0x144>)
    57fc:	2381      	movs	r3, #129	; 0x81
    57fe:	f001 f886 	bl	690e <printk>
    5802:	4943      	ldr	r1, [pc, #268]	; (5910 <z_thread_abort+0x138>)
    5804:	4846      	ldr	r0, [pc, #280]	; (5920 <z_thread_abort+0x148>)
    5806:	f001 f882 	bl	690e <printk>
    580a:	4842      	ldr	r0, [pc, #264]	; (5914 <z_thread_abort+0x13c>)
    580c:	2181      	movs	r1, #129	; 0x81
    580e:	f000 ffa5 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    5812:	483f      	ldr	r0, [pc, #252]	; (5910 <z_thread_abort+0x138>)
    5814:	f000 fa6e 	bl	5cf4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5818:	7b63      	ldrb	r3, [r4, #13]
    581a:	071a      	lsls	r2, r3, #28
    581c:	d517      	bpl.n	584e <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    581e:	483c      	ldr	r0, [pc, #240]	; (5910 <z_thread_abort+0x138>)
    5820:	f000 fa58 	bl	5cd4 <z_spin_unlock_valid>
    5824:	b968      	cbnz	r0, 5842 <z_thread_abort+0x6a>
    5826:	4a3b      	ldr	r2, [pc, #236]	; (5914 <z_thread_abort+0x13c>)
    5828:	493e      	ldr	r1, [pc, #248]	; (5924 <z_thread_abort+0x14c>)
    582a:	483c      	ldr	r0, [pc, #240]	; (591c <z_thread_abort+0x144>)
    582c:	23ac      	movs	r3, #172	; 0xac
    582e:	f001 f86e 	bl	690e <printk>
    5832:	4937      	ldr	r1, [pc, #220]	; (5910 <z_thread_abort+0x138>)
    5834:	483c      	ldr	r0, [pc, #240]	; (5928 <z_thread_abort+0x150>)
    5836:	f001 f86a 	bl	690e <printk>
    583a:	4836      	ldr	r0, [pc, #216]	; (5914 <z_thread_abort+0x13c>)
    583c:	21ac      	movs	r1, #172	; 0xac
    583e:	f000 ff8d 	bl	675c <assert_post_action>
	__asm__ volatile(
    5842:	f386 8811 	msr	BASEPRI, r6
    5846:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    584a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    584e:	f023 0220 	bic.w	r2, r3, #32
    5852:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5856:	09d2      	lsrs	r2, r2, #7
    5858:	d142      	bne.n	58e0 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    585a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    585c:	68a3      	ldr	r3, [r4, #8]
    585e:	b113      	cbz	r3, 5866 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    5860:	4620      	mov	r0, r4
    5862:	f7ff f8ef 	bl	4a44 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5866:	f104 0018 	add.w	r0, r4, #24
    586a:	f000 fb6f 	bl	5f4c <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    586e:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5872:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5876:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5878:	42bd      	cmp	r5, r7
    587a:	d001      	beq.n	5880 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    587c:	2d00      	cmp	r5, #0
    587e:	d139      	bne.n	58f4 <z_thread_abort+0x11c>
		update_cache(1);
    5880:	2001      	movs	r0, #1
    5882:	f7ff f901 	bl	4a88 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5886:	4b29      	ldr	r3, [pc, #164]	; (592c <z_thread_abort+0x154>)
    5888:	689b      	ldr	r3, [r3, #8]
    588a:	42a3      	cmp	r3, r4
    588c:	d1c7      	bne.n	581e <z_thread_abort+0x46>
    588e:	f3ef 8305 	mrs	r3, IPSR
    5892:	2b00      	cmp	r3, #0
    5894:	d1c3      	bne.n	581e <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5896:	481e      	ldr	r0, [pc, #120]	; (5910 <z_thread_abort+0x138>)
    5898:	f000 fa1c 	bl	5cd4 <z_spin_unlock_valid>
    589c:	b968      	cbnz	r0, 58ba <z_thread_abort+0xe2>
    589e:	4a1d      	ldr	r2, [pc, #116]	; (5914 <z_thread_abort+0x13c>)
    58a0:	4920      	ldr	r1, [pc, #128]	; (5924 <z_thread_abort+0x14c>)
    58a2:	481e      	ldr	r0, [pc, #120]	; (591c <z_thread_abort+0x144>)
    58a4:	23c3      	movs	r3, #195	; 0xc3
    58a6:	f001 f832 	bl	690e <printk>
    58aa:	4919      	ldr	r1, [pc, #100]	; (5910 <z_thread_abort+0x138>)
    58ac:	481e      	ldr	r0, [pc, #120]	; (5928 <z_thread_abort+0x150>)
    58ae:	f001 f82e 	bl	690e <printk>
    58b2:	4818      	ldr	r0, [pc, #96]	; (5914 <z_thread_abort+0x13c>)
    58b4:	21c3      	movs	r1, #195	; 0xc3
    58b6:	f000 ff51 	bl	675c <assert_post_action>
    58ba:	4630      	mov	r0, r6
    58bc:	f7fc f820 	bl	1900 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    58c0:	4a1b      	ldr	r2, [pc, #108]	; (5930 <z_thread_abort+0x158>)
    58c2:	491c      	ldr	r1, [pc, #112]	; (5934 <z_thread_abort+0x15c>)
    58c4:	4815      	ldr	r0, [pc, #84]	; (591c <z_thread_abort+0x144>)
    58c6:	f240 6309 	movw	r3, #1545	; 0x609
    58ca:	f001 f820 	bl	690e <printk>
    58ce:	481a      	ldr	r0, [pc, #104]	; (5938 <z_thread_abort+0x160>)
    58d0:	f001 f81d 	bl	690e <printk>
    58d4:	4816      	ldr	r0, [pc, #88]	; (5930 <z_thread_abort+0x158>)
    58d6:	f240 6109 	movw	r1, #1545	; 0x609
    58da:	f000 ff3f 	bl	675c <assert_post_action>
    58de:	e79e      	b.n	581e <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    58e0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    58e4:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
    58e8:	4814      	ldr	r0, [pc, #80]	; (593c <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    58ea:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    58ec:	4621      	mov	r1, r4
    58ee:	f7ff f887 	bl	4a00 <z_priq_dumb_remove>
}
    58f2:	e7b3      	b.n	585c <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    58f4:	4628      	mov	r0, r5
    58f6:	f7ff f8a5 	bl	4a44 <unpend_thread_no_timeout>
    58fa:	f105 0018 	add.w	r0, r5, #24
    58fe:	f000 fb25 	bl	5f4c <z_abort_timeout>
    5902:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5906:	4628      	mov	r0, r5
    5908:	f7ff f9c4 	bl	4c94 <ready_thread>
    590c:	e7b3      	b.n	5876 <z_thread_abort+0x9e>
    590e:	bf00      	nop
    5910:	200009c4 	.word	0x200009c4
    5914:	000077fd 	.word	0x000077fd
    5918:	0000784f 	.word	0x0000784f
    591c:	00007610 	.word	0x00007610
    5920:	00007864 	.word	0x00007864
    5924:	00007823 	.word	0x00007823
    5928:	0000783a 	.word	0x0000783a
    592c:	20000994 	.word	0x20000994
    5930:	000082c0 	.word	0x000082c0
    5934:	00007f38 	.word	0x00007f38
    5938:	000083b2 	.word	0x000083b2
    593c:	200009b4 	.word	0x200009b4

00005940 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5940:	b538      	push	{r3, r4, r5, lr}
    5942:	4604      	mov	r4, r0
	__asm__ volatile(
    5944:	f04f 0320 	mov.w	r3, #32
    5948:	f3ef 8511 	mrs	r5, BASEPRI
    594c:	f383 8812 	msr	BASEPRI_MAX, r3
    5950:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5954:	4814      	ldr	r0, [pc, #80]	; (59a8 <z_impl_k_sem_give+0x68>)
    5956:	f000 f9af 	bl	5cb8 <z_spin_lock_valid>
    595a:	b968      	cbnz	r0, 5978 <z_impl_k_sem_give+0x38>
    595c:	4a13      	ldr	r2, [pc, #76]	; (59ac <z_impl_k_sem_give+0x6c>)
    595e:	4914      	ldr	r1, [pc, #80]	; (59b0 <z_impl_k_sem_give+0x70>)
    5960:	4814      	ldr	r0, [pc, #80]	; (59b4 <z_impl_k_sem_give+0x74>)
    5962:	2381      	movs	r3, #129	; 0x81
    5964:	f000 ffd3 	bl	690e <printk>
    5968:	490f      	ldr	r1, [pc, #60]	; (59a8 <z_impl_k_sem_give+0x68>)
    596a:	4813      	ldr	r0, [pc, #76]	; (59b8 <z_impl_k_sem_give+0x78>)
    596c:	f000 ffcf 	bl	690e <printk>
    5970:	480e      	ldr	r0, [pc, #56]	; (59ac <z_impl_k_sem_give+0x6c>)
    5972:	2181      	movs	r1, #129	; 0x81
    5974:	f000 fef2 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    5978:	480b      	ldr	r0, [pc, #44]	; (59a8 <z_impl_k_sem_give+0x68>)
    597a:	f000 f9bb 	bl	5cf4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    597e:	4620      	mov	r0, r4
    5980:	f7ff fd3e 	bl	5400 <z_unpend_first_thread>

	if (thread != NULL) {
    5984:	b148      	cbz	r0, 599a <z_impl_k_sem_give+0x5a>
    5986:	2200      	movs	r2, #0
    5988:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    598a:	f7ff f9d5 	bl	4d38 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    598e:	4629      	mov	r1, r5
    5990:	4805      	ldr	r0, [pc, #20]	; (59a8 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5996:	f7fe bf7b 	b.w	4890 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    599a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    599e:	429a      	cmp	r2, r3
    59a0:	bf18      	it	ne
    59a2:	3301      	addne	r3, #1
    59a4:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    59a6:	e7f2      	b.n	598e <z_impl_k_sem_give+0x4e>
    59a8:	200009d0 	.word	0x200009d0
    59ac:	000077fd 	.word	0x000077fd
    59b0:	0000784f 	.word	0x0000784f
    59b4:	00007610 	.word	0x00007610
    59b8:	00007864 	.word	0x00007864

000059bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    59bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    59be:	4604      	mov	r4, r0
    59c0:	4616      	mov	r6, r2
    59c2:	461f      	mov	r7, r3
    59c4:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    59c8:	b17b      	cbz	r3, 59ea <z_impl_k_sem_take+0x2e>
    59ca:	ea56 0307 	orrs.w	r3, r6, r7
    59ce:	d00c      	beq.n	59ea <z_impl_k_sem_take+0x2e>
    59d0:	4935      	ldr	r1, [pc, #212]	; (5aa8 <z_impl_k_sem_take+0xec>)
    59d2:	4a36      	ldr	r2, [pc, #216]	; (5aac <z_impl_k_sem_take+0xf0>)
    59d4:	4836      	ldr	r0, [pc, #216]	; (5ab0 <z_impl_k_sem_take+0xf4>)
    59d6:	2379      	movs	r3, #121	; 0x79
    59d8:	f000 ff99 	bl	690e <printk>
    59dc:	4835      	ldr	r0, [pc, #212]	; (5ab4 <z_impl_k_sem_take+0xf8>)
    59de:	f000 ff96 	bl	690e <printk>
    59e2:	4832      	ldr	r0, [pc, #200]	; (5aac <z_impl_k_sem_take+0xf0>)
    59e4:	2179      	movs	r1, #121	; 0x79
    59e6:	f000 feb9 	bl	675c <assert_post_action>
    59ea:	f04f 0320 	mov.w	r3, #32
    59ee:	f3ef 8511 	mrs	r5, BASEPRI
    59f2:	f383 8812 	msr	BASEPRI_MAX, r3
    59f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    59fa:	482f      	ldr	r0, [pc, #188]	; (5ab8 <z_impl_k_sem_take+0xfc>)
    59fc:	f000 f95c 	bl	5cb8 <z_spin_lock_valid>
    5a00:	b968      	cbnz	r0, 5a1e <z_impl_k_sem_take+0x62>
    5a02:	4a2e      	ldr	r2, [pc, #184]	; (5abc <z_impl_k_sem_take+0x100>)
    5a04:	492e      	ldr	r1, [pc, #184]	; (5ac0 <z_impl_k_sem_take+0x104>)
    5a06:	482a      	ldr	r0, [pc, #168]	; (5ab0 <z_impl_k_sem_take+0xf4>)
    5a08:	2381      	movs	r3, #129	; 0x81
    5a0a:	f000 ff80 	bl	690e <printk>
    5a0e:	492a      	ldr	r1, [pc, #168]	; (5ab8 <z_impl_k_sem_take+0xfc>)
    5a10:	482c      	ldr	r0, [pc, #176]	; (5ac4 <z_impl_k_sem_take+0x108>)
    5a12:	f000 ff7c 	bl	690e <printk>
    5a16:	4829      	ldr	r0, [pc, #164]	; (5abc <z_impl_k_sem_take+0x100>)
    5a18:	2181      	movs	r1, #129	; 0x81
    5a1a:	f000 fe9f 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    5a1e:	4826      	ldr	r0, [pc, #152]	; (5ab8 <z_impl_k_sem_take+0xfc>)
    5a20:	f000 f968 	bl	5cf4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5a24:	68a3      	ldr	r3, [r4, #8]
    5a26:	b1d3      	cbz	r3, 5a5e <z_impl_k_sem_take+0xa2>
		sem->count--;
    5a28:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a2a:	4823      	ldr	r0, [pc, #140]	; (5ab8 <z_impl_k_sem_take+0xfc>)
    5a2c:	60a3      	str	r3, [r4, #8]
    5a2e:	f000 f951 	bl	5cd4 <z_spin_unlock_valid>
    5a32:	b968      	cbnz	r0, 5a50 <z_impl_k_sem_take+0x94>
    5a34:	4a21      	ldr	r2, [pc, #132]	; (5abc <z_impl_k_sem_take+0x100>)
    5a36:	4924      	ldr	r1, [pc, #144]	; (5ac8 <z_impl_k_sem_take+0x10c>)
    5a38:	481d      	ldr	r0, [pc, #116]	; (5ab0 <z_impl_k_sem_take+0xf4>)
    5a3a:	23ac      	movs	r3, #172	; 0xac
    5a3c:	f000 ff67 	bl	690e <printk>
    5a40:	491d      	ldr	r1, [pc, #116]	; (5ab8 <z_impl_k_sem_take+0xfc>)
    5a42:	4822      	ldr	r0, [pc, #136]	; (5acc <z_impl_k_sem_take+0x110>)
    5a44:	f000 ff63 	bl	690e <printk>
    5a48:	481c      	ldr	r0, [pc, #112]	; (5abc <z_impl_k_sem_take+0x100>)
    5a4a:	21ac      	movs	r1, #172	; 0xac
    5a4c:	f000 fe86 	bl	675c <assert_post_action>
	__asm__ volatile(
    5a50:	f385 8811 	msr	BASEPRI, r5
    5a54:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5a58:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5a5a:	b003      	add	sp, #12
    5a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5a5e:	ea56 0307 	orrs.w	r3, r6, r7
    5a62:	d118      	bne.n	5a96 <z_impl_k_sem_take+0xda>
    5a64:	4814      	ldr	r0, [pc, #80]	; (5ab8 <z_impl_k_sem_take+0xfc>)
    5a66:	f000 f935 	bl	5cd4 <z_spin_unlock_valid>
    5a6a:	b968      	cbnz	r0, 5a88 <z_impl_k_sem_take+0xcc>
    5a6c:	4a13      	ldr	r2, [pc, #76]	; (5abc <z_impl_k_sem_take+0x100>)
    5a6e:	4916      	ldr	r1, [pc, #88]	; (5ac8 <z_impl_k_sem_take+0x10c>)
    5a70:	480f      	ldr	r0, [pc, #60]	; (5ab0 <z_impl_k_sem_take+0xf4>)
    5a72:	23ac      	movs	r3, #172	; 0xac
    5a74:	f000 ff4b 	bl	690e <printk>
    5a78:	490f      	ldr	r1, [pc, #60]	; (5ab8 <z_impl_k_sem_take+0xfc>)
    5a7a:	4814      	ldr	r0, [pc, #80]	; (5acc <z_impl_k_sem_take+0x110>)
    5a7c:	f000 ff47 	bl	690e <printk>
    5a80:	480e      	ldr	r0, [pc, #56]	; (5abc <z_impl_k_sem_take+0x100>)
    5a82:	21ac      	movs	r1, #172	; 0xac
    5a84:	f000 fe6a 	bl	675c <assert_post_action>
    5a88:	f385 8811 	msr	BASEPRI, r5
    5a8c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5a90:	f06f 000f 	mvn.w	r0, #15
    5a94:	e7e1      	b.n	5a5a <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5a96:	e9cd 6700 	strd	r6, r7, [sp]
    5a9a:	4622      	mov	r2, r4
    5a9c:	4629      	mov	r1, r5
    5a9e:	4806      	ldr	r0, [pc, #24]	; (5ab8 <z_impl_k_sem_take+0xfc>)
    5aa0:	f7ff fafc 	bl	509c <z_pend_curr>
	return ret;
    5aa4:	e7d9      	b.n	5a5a <z_impl_k_sem_take+0x9e>
    5aa6:	bf00      	nop
    5aa8:	000083f4 	.word	0x000083f4
    5aac:	000083d4 	.word	0x000083d4
    5ab0:	00007610 	.word	0x00007610
    5ab4:	0000828c 	.word	0x0000828c
    5ab8:	200009d0 	.word	0x200009d0
    5abc:	000077fd 	.word	0x000077fd
    5ac0:	0000784f 	.word	0x0000784f
    5ac4:	00007864 	.word	0x00007864
    5ac8:	00007823 	.word	0x00007823
    5acc:	0000783a 	.word	0x0000783a

00005ad0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ad4:	b085      	sub	sp, #20
    5ad6:	4604      	mov	r4, r0
    5ad8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    5adc:	f1b8 0f0f 	cmp.w	r8, #15
{
    5ae0:	460f      	mov	r7, r1
    5ae2:	4615      	mov	r5, r2
    5ae4:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    5ae6:	d132      	bne.n	5b4e <z_setup_new_thread+0x7e>
    5ae8:	4b25      	ldr	r3, [pc, #148]	; (5b80 <z_setup_new_thread+0xb0>)
    5aea:	4599      	cmp	r9, r3
    5aec:	d133      	bne.n	5b56 <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    5aee:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    5af2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5af6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5af8:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5afa:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    5afc:	2304      	movs	r3, #4
    5afe:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5b00:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5b04:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    5b08:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    5b0e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b12:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5b14:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5b1a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    5b1c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b20:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    5b22:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b24:	464b      	mov	r3, r9
	node->prev = NULL;
    5b26:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    5b2a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    5b2c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    5b2e:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b30:	4642      	mov	r2, r8
    5b32:	4639      	mov	r1, r7
    5b34:	4620      	mov	r0, r4
    5b36:	f7fb fefd 	bl	1934 <arch_new_thread>
	if (!_current) {
    5b3a:	4b12      	ldr	r3, [pc, #72]	; (5b84 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    5b3c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    5b3e:	689b      	ldr	r3, [r3, #8]
    5b40:	b103      	cbz	r3, 5b44 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    5b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5b44:	6723      	str	r3, [r4, #112]	; 0x70
}
    5b46:	4640      	mov	r0, r8
    5b48:	b005      	add	sp, #20
    5b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    5b4e:	f108 0310 	add.w	r3, r8, #16
    5b52:	2b1e      	cmp	r3, #30
    5b54:	d9cb      	bls.n	5aee <z_setup_new_thread+0x1e>
    5b56:	4a0c      	ldr	r2, [pc, #48]	; (5b88 <z_setup_new_thread+0xb8>)
    5b58:	490c      	ldr	r1, [pc, #48]	; (5b8c <z_setup_new_thread+0xbc>)
    5b5a:	480d      	ldr	r0, [pc, #52]	; (5b90 <z_setup_new_thread+0xc0>)
    5b5c:	f240 2305 	movw	r3, #517	; 0x205
    5b60:	f000 fed5 	bl	690e <printk>
    5b64:	4641      	mov	r1, r8
    5b66:	480b      	ldr	r0, [pc, #44]	; (5b94 <z_setup_new_thread+0xc4>)
    5b68:	f06f 030f 	mvn.w	r3, #15
    5b6c:	220e      	movs	r2, #14
    5b6e:	f000 fece 	bl	690e <printk>
    5b72:	4805      	ldr	r0, [pc, #20]	; (5b88 <z_setup_new_thread+0xb8>)
    5b74:	f240 2105 	movw	r1, #517	; 0x205
    5b78:	f000 fdf0 	bl	675c <assert_post_action>
    5b7c:	e7b7      	b.n	5aee <z_setup_new_thread+0x1e>
    5b7e:	bf00      	nop
    5b80:	00004015 	.word	0x00004015
    5b84:	20000994 	.word	0x20000994
    5b88:	00008441 	.word	0x00008441
    5b8c:	00008464 	.word	0x00008464
    5b90:	00007610 	.word	0x00007610
    5b94:	000084e4 	.word	0x000084e4

00005b98 <z_init_static_threads>:
{
    5b98:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    5b9c:	4f3f      	ldr	r7, [pc, #252]	; (5c9c <z_init_static_threads+0x104>)
    5b9e:	4d40      	ldr	r5, [pc, #256]	; (5ca0 <z_init_static_threads+0x108>)
    5ba0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 5cb0 <z_init_static_threads+0x118>
{
    5ba4:	b086      	sub	sp, #24
    5ba6:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    5ba8:	42bd      	cmp	r5, r7
    5baa:	d90e      	bls.n	5bca <z_init_static_threads+0x32>
    5bac:	493d      	ldr	r1, [pc, #244]	; (5ca4 <z_init_static_threads+0x10c>)
    5bae:	483e      	ldr	r0, [pc, #248]	; (5ca8 <z_init_static_threads+0x110>)
    5bb0:	f240 23d5 	movw	r3, #725	; 0x2d5
    5bb4:	4642      	mov	r2, r8
    5bb6:	f000 feaa 	bl	690e <printk>
    5bba:	483c      	ldr	r0, [pc, #240]	; (5cac <z_init_static_threads+0x114>)
    5bbc:	f000 fea7 	bl	690e <printk>
    5bc0:	f240 21d5 	movw	r1, #725	; 0x2d5
    5bc4:	4640      	mov	r0, r8
    5bc6:	f000 fdc9 	bl	675c <assert_post_action>
    5bca:	42b5      	cmp	r5, r6
    5bcc:	f105 0430 	add.w	r4, r5, #48	; 0x30
    5bd0:	d31f      	bcc.n	5c12 <z_init_static_threads+0x7a>
	k_sched_lock();
    5bd2:	f7fe fea1 	bl	4918 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5bd6:	4c32      	ldr	r4, [pc, #200]	; (5ca0 <z_init_static_threads+0x108>)
    5bd8:	4d35      	ldr	r5, [pc, #212]	; (5cb0 <z_init_static_threads+0x118>)
    5bda:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 5ca4 <z_init_static_threads+0x10c>
    5bde:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 5ca8 <z_init_static_threads+0x110>
    5be2:	42b4      	cmp	r4, r6
    5be4:	d90e      	bls.n	5c04 <z_init_static_threads+0x6c>
    5be6:	4641      	mov	r1, r8
    5be8:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    5bec:	462a      	mov	r2, r5
    5bee:	4648      	mov	r0, r9
    5bf0:	f000 fe8d 	bl	690e <printk>
    5bf4:	482d      	ldr	r0, [pc, #180]	; (5cac <z_init_static_threads+0x114>)
    5bf6:	f000 fe8a 	bl	690e <printk>
    5bfa:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    5bfe:	4628      	mov	r0, r5
    5c00:	f000 fdac 	bl	675c <assert_post_action>
    5c04:	42b4      	cmp	r4, r6
    5c06:	d321      	bcc.n	5c4c <z_init_static_threads+0xb4>
}
    5c08:	b006      	add	sp, #24
    5c0a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    5c0e:	f7ff bb7b 	b.w	5308 <k_sched_unlock>
		z_setup_new_thread(
    5c12:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5c16:	9305      	str	r3, [sp, #20]
    5c18:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5c1c:	9304      	str	r3, [sp, #16]
    5c1e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5c22:	9303      	str	r3, [sp, #12]
    5c24:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5c28:	9302      	str	r3, [sp, #8]
    5c2a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5c2e:	9301      	str	r3, [sp, #4]
    5c30:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5c34:	9300      	str	r3, [sp, #0]
    5c36:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5c3a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5c3e:	f7ff ff47 	bl	5ad0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5c42:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5c46:	655d      	str	r5, [r3, #84]	; 0x54
    5c48:	4625      	mov	r5, r4
    5c4a:	e7ad      	b.n	5ba8 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5c4e:	1c4b      	adds	r3, r1, #1
    5c50:	d014      	beq.n	5c7c <z_init_static_threads+0xe4>
    5c52:	f240 32e7 	movw	r2, #999	; 0x3e7
    5c56:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    5c58:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    5c5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5c60:	4693      	mov	fp, r2
    5c62:	469c      	mov	ip, r3
    5c64:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5c68:	459c      	cmp	ip, r3
    5c6a:	bf08      	it	eq
    5c6c:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    5c6e:	6827      	ldr	r7, [r4, #0]
    5c70:	4658      	mov	r0, fp
    5c72:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5c74:	d104      	bne.n	5c80 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    5c76:	4638      	mov	r0, r7
    5c78:	f7ff f8a6 	bl	4dc8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5c7c:	3430      	adds	r4, #48	; 0x30
    5c7e:	e7b0      	b.n	5be2 <z_init_static_threads+0x4a>
    5c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5c84:	2300      	movs	r3, #0
    5c86:	f7fa fa3b 	bl	100 <__aeabi_uldivmod>
    5c8a:	4602      	mov	r2, r0
    5c8c:	460b      	mov	r3, r1
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5c8e:	f107 0018 	add.w	r0, r7, #24
    5c92:	4908      	ldr	r1, [pc, #32]	; (5cb4 <z_init_static_threads+0x11c>)
    5c94:	f000 f886 	bl	5da4 <z_add_timeout>
    5c98:	e7f0      	b.n	5c7c <z_init_static_threads+0xe4>
    5c9a:	bf00      	nop
    5c9c:	200000dc 	.word	0x200000dc
    5ca0:	200000dc 	.word	0x200000dc
    5ca4:	00008515 	.word	0x00008515
    5ca8:	00007610 	.word	0x00007610
    5cac:	000081d2 	.word	0x000081d2
    5cb0:	00008441 	.word	0x00008441
    5cb4:	00004e71 	.word	0x00004e71

00005cb8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    5cb8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    5cba:	b138      	cbz	r0, 5ccc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    5cbc:	4b04      	ldr	r3, [pc, #16]	; (5cd0 <z_spin_lock_valid+0x18>)
    5cbe:	7d1b      	ldrb	r3, [r3, #20]
    5cc0:	f000 0003 	and.w	r0, r0, #3
    5cc4:	1ac0      	subs	r0, r0, r3
    5cc6:	bf18      	it	ne
    5cc8:	2001      	movne	r0, #1
    5cca:	4770      	bx	lr
			return false;
		}
	}
	return true;
    5ccc:	2001      	movs	r0, #1
}
    5cce:	4770      	bx	lr
    5cd0:	20000994 	.word	0x20000994

00005cd4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5cd4:	4906      	ldr	r1, [pc, #24]	; (5cf0 <z_spin_unlock_valid+0x1c>)
{
    5cd6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5cd8:	688a      	ldr	r2, [r1, #8]
    5cda:	7d08      	ldrb	r0, [r1, #20]
    5cdc:	6819      	ldr	r1, [r3, #0]
    5cde:	4302      	orrs	r2, r0
    5ce0:	4291      	cmp	r1, r2
    5ce2:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    5ce6:	bf04      	itt	eq
    5ce8:	6018      	streq	r0, [r3, #0]
	return true;
    5cea:	2001      	moveq	r0, #1
}
    5cec:	4770      	bx	lr
    5cee:	bf00      	nop
    5cf0:	20000994 	.word	0x20000994

00005cf4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    5cf4:	4a02      	ldr	r2, [pc, #8]	; (5d00 <z_spin_lock_set_owner+0xc>)
    5cf6:	7d11      	ldrb	r1, [r2, #20]
    5cf8:	6893      	ldr	r3, [r2, #8]
    5cfa:	430b      	orrs	r3, r1
    5cfc:	6003      	str	r3, [r0, #0]
}
    5cfe:	4770      	bx	lr
    5d00:	20000994 	.word	0x20000994

00005d04 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5d04:	4b03      	ldr	r3, [pc, #12]	; (5d14 <elapsed+0x10>)
    5d06:	681b      	ldr	r3, [r3, #0]
    5d08:	b90b      	cbnz	r3, 5d0e <elapsed+0xa>
    5d0a:	f7fd bb55 	b.w	33b8 <sys_clock_elapsed>
}
    5d0e:	2000      	movs	r0, #0
    5d10:	4770      	bx	lr
    5d12:	bf00      	nop
    5d14:	200009d4 	.word	0x200009d4

00005d18 <next_timeout>:

static int32_t next_timeout(void)
{
    5d18:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5d1a:	4b13      	ldr	r3, [pc, #76]	; (5d68 <next_timeout+0x50>)
    5d1c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5d1e:	429c      	cmp	r4, r3
    5d20:	bf08      	it	eq
    5d22:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5d24:	f7ff ffee 	bl	5d04 <elapsed>
    5d28:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    5d2a:	b1bc      	cbz	r4, 5d5c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5d2c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5d30:	1b40      	subs	r0, r0, r5
    5d32:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    5d36:	2801      	cmp	r0, #1
    5d38:	f171 0300 	sbcs.w	r3, r1, #0
    5d3c:	db11      	blt.n	5d62 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5d3e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    5d42:	2300      	movs	r3, #0
    5d44:	4282      	cmp	r2, r0
    5d46:	eb73 0401 	sbcs.w	r4, r3, r1
    5d4a:	da00      	bge.n	5d4e <next_timeout+0x36>
    5d4c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5d4e:	4b07      	ldr	r3, [pc, #28]	; (5d6c <next_timeout+0x54>)
    5d50:	691b      	ldr	r3, [r3, #16]
    5d52:	b113      	cbz	r3, 5d5a <next_timeout+0x42>
    5d54:	4298      	cmp	r0, r3
    5d56:	bfa8      	it	ge
    5d58:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5d5a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    5d5c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5d60:	e7f5      	b.n	5d4e <next_timeout+0x36>
    5d62:	2000      	movs	r0, #0
    5d64:	e7f3      	b.n	5d4e <next_timeout+0x36>
    5d66:	bf00      	nop
    5d68:	20000058 	.word	0x20000058
    5d6c:	20000994 	.word	0x20000994

00005d70 <remove_timeout>:
{
    5d70:	b530      	push	{r4, r5, lr}
    5d72:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5d74:	b168      	cbz	r0, 5d92 <remove_timeout+0x22>
    5d76:	4a0a      	ldr	r2, [pc, #40]	; (5da0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    5d78:	6852      	ldr	r2, [r2, #4]
    5d7a:	4290      	cmp	r0, r2
    5d7c:	d009      	beq.n	5d92 <remove_timeout+0x22>
	if (next(t) != NULL) {
    5d7e:	b143      	cbz	r3, 5d92 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5d80:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5d84:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5d88:	1912      	adds	r2, r2, r4
    5d8a:	eb45 0101 	adc.w	r1, r5, r1
    5d8e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    5d92:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    5d94:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5d96:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5d98:	2300      	movs	r3, #0
	node->prev = NULL;
    5d9a:	e9c0 3300 	strd	r3, r3, [r0]
}
    5d9e:	bd30      	pop	{r4, r5, pc}
    5da0:	20000058 	.word	0x20000058

00005da4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    5da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5da8:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5daa:	1c6b      	adds	r3, r5, #1
    5dac:	bf08      	it	eq
    5dae:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    5db2:	4682      	mov	sl, r0
    5db4:	468b      	mov	fp, r1
    5db6:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5db8:	f000 80aa 	beq.w	5f10 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    5dbc:	6803      	ldr	r3, [r0, #0]
    5dbe:	b163      	cbz	r3, 5dda <z_add_timeout+0x36>
    5dc0:	4955      	ldr	r1, [pc, #340]	; (5f18 <z_add_timeout+0x174>)
    5dc2:	4a56      	ldr	r2, [pc, #344]	; (5f1c <z_add_timeout+0x178>)
    5dc4:	4856      	ldr	r0, [pc, #344]	; (5f20 <z_add_timeout+0x17c>)
    5dc6:	235d      	movs	r3, #93	; 0x5d
    5dc8:	f000 fda1 	bl	690e <printk>
    5dcc:	4855      	ldr	r0, [pc, #340]	; (5f24 <z_add_timeout+0x180>)
    5dce:	f000 fd9e 	bl	690e <printk>
    5dd2:	4852      	ldr	r0, [pc, #328]	; (5f1c <z_add_timeout+0x178>)
    5dd4:	215d      	movs	r1, #93	; 0x5d
    5dd6:	f000 fcc1 	bl	675c <assert_post_action>
	to->fn = fn;
    5dda:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    5dde:	f04f 0320 	mov.w	r3, #32
    5de2:	f3ef 8b11 	mrs	fp, BASEPRI
    5de6:	f383 8812 	msr	BASEPRI_MAX, r3
    5dea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5dee:	484e      	ldr	r0, [pc, #312]	; (5f28 <z_add_timeout+0x184>)
    5df0:	f7ff ff62 	bl	5cb8 <z_spin_lock_valid>
    5df4:	b968      	cbnz	r0, 5e12 <z_add_timeout+0x6e>
    5df6:	4a4d      	ldr	r2, [pc, #308]	; (5f2c <z_add_timeout+0x188>)
    5df8:	494d      	ldr	r1, [pc, #308]	; (5f30 <z_add_timeout+0x18c>)
    5dfa:	4849      	ldr	r0, [pc, #292]	; (5f20 <z_add_timeout+0x17c>)
    5dfc:	2381      	movs	r3, #129	; 0x81
    5dfe:	f000 fd86 	bl	690e <printk>
    5e02:	4949      	ldr	r1, [pc, #292]	; (5f28 <z_add_timeout+0x184>)
    5e04:	484b      	ldr	r0, [pc, #300]	; (5f34 <z_add_timeout+0x190>)
    5e06:	f000 fd82 	bl	690e <printk>
    5e0a:	4848      	ldr	r0, [pc, #288]	; (5f2c <z_add_timeout+0x188>)
    5e0c:	2181      	movs	r1, #129	; 0x81
    5e0e:	f000 fca5 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    5e12:	4845      	ldr	r0, [pc, #276]	; (5f28 <z_add_timeout+0x184>)
    5e14:	f7ff ff6e 	bl	5cf4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5e18:	f06f 0301 	mvn.w	r3, #1
    5e1c:	ebb3 0804 	subs.w	r8, r3, r4
    5e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5e24:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5e28:	f1b8 0f00 	cmp.w	r8, #0
    5e2c:	f179 0100 	sbcs.w	r1, r9, #0
    5e30:	db1c      	blt.n	5e6c <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5e32:	4841      	ldr	r0, [pc, #260]	; (5f38 <z_add_timeout+0x194>)
    5e34:	e9d0 1000 	ldrd	r1, r0, [r0]
    5e38:	1a5b      	subs	r3, r3, r1
    5e3a:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    5e3e:	1b1e      	subs	r6, r3, r4
    5e40:	eb62 0705 	sbc.w	r7, r2, r5
    5e44:	2e01      	cmp	r6, #1
    5e46:	f177 0300 	sbcs.w	r3, r7, #0
    5e4a:	bfbc      	itt	lt
    5e4c:	2601      	movlt	r6, #1
    5e4e:	2700      	movlt	r7, #0
    5e50:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    5e54:	4a39      	ldr	r2, [pc, #228]	; (5f3c <z_add_timeout+0x198>)
    5e56:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e5a:	4293      	cmp	r3, r2
    5e5c:	d11d      	bne.n	5e9a <z_add_timeout+0xf6>
	node->prev = tail;
    5e5e:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    5e62:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    5e66:	f8c2 a004 	str.w	sl, [r2, #4]
}
    5e6a:	e02c      	b.n	5ec6 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5e6c:	f7ff ff4a 	bl	5d04 <elapsed>
    5e70:	1c63      	adds	r3, r4, #1
    5e72:	9300      	str	r3, [sp, #0]
    5e74:	f145 0300 	adc.w	r3, r5, #0
    5e78:	9301      	str	r3, [sp, #4]
    5e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
    5e7e:	1812      	adds	r2, r2, r0
    5e80:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    5e84:	e9ca 2304 	strd	r2, r3, [sl, #16]
    5e88:	e7e4      	b.n	5e54 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5e8a:	1be0      	subs	r0, r4, r7
    5e8c:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    5e90:	42b3      	cmp	r3, r6
    5e92:	e9ca 0104 	strd	r0, r1, [sl, #16]
    5e96:	d0e2      	beq.n	5e5e <z_add_timeout+0xba>
    5e98:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5e9a:	2b00      	cmp	r3, #0
    5e9c:	d0df      	beq.n	5e5e <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    5e9e:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    5ea2:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    5ea6:	42bc      	cmp	r4, r7
    5ea8:	eb75 0108 	sbcs.w	r1, r5, r8
    5eac:	daed      	bge.n	5e8a <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    5eae:	1b38      	subs	r0, r7, r4
    5eb0:	eb68 0105 	sbc.w	r1, r8, r5
    5eb4:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5eb8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5eba:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    5ebe:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    5ec2:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    5ec6:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ec8:	4293      	cmp	r3, r2
    5eca:	d00b      	beq.n	5ee4 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5ecc:	459a      	cmp	sl, r3
    5ece:	d109      	bne.n	5ee4 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5ed0:	f7ff ff22 	bl	5d18 <next_timeout>

			if (next_time == 0 ||
    5ed4:	b118      	cbz	r0, 5ede <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    5ed6:	4b1a      	ldr	r3, [pc, #104]	; (5f40 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    5ed8:	691b      	ldr	r3, [r3, #16]
    5eda:	4283      	cmp	r3, r0
    5edc:	d002      	beq.n	5ee4 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    5ede:	2100      	movs	r1, #0
    5ee0:	f7fd fa3a 	bl	3358 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ee4:	4810      	ldr	r0, [pc, #64]	; (5f28 <z_add_timeout+0x184>)
    5ee6:	f7ff fef5 	bl	5cd4 <z_spin_unlock_valid>
    5eea:	b968      	cbnz	r0, 5f08 <z_add_timeout+0x164>
    5eec:	4a0f      	ldr	r2, [pc, #60]	; (5f2c <z_add_timeout+0x188>)
    5eee:	4915      	ldr	r1, [pc, #84]	; (5f44 <z_add_timeout+0x1a0>)
    5ef0:	480b      	ldr	r0, [pc, #44]	; (5f20 <z_add_timeout+0x17c>)
    5ef2:	23ac      	movs	r3, #172	; 0xac
    5ef4:	f000 fd0b 	bl	690e <printk>
    5ef8:	490b      	ldr	r1, [pc, #44]	; (5f28 <z_add_timeout+0x184>)
    5efa:	4813      	ldr	r0, [pc, #76]	; (5f48 <z_add_timeout+0x1a4>)
    5efc:	f000 fd07 	bl	690e <printk>
    5f00:	480a      	ldr	r0, [pc, #40]	; (5f2c <z_add_timeout+0x188>)
    5f02:	21ac      	movs	r1, #172	; 0xac
    5f04:	f000 fc2a 	bl	675c <assert_post_action>
	__asm__ volatile(
    5f08:	f38b 8811 	msr	BASEPRI, fp
    5f0c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5f10:	b003      	add	sp, #12
    5f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f16:	bf00      	nop
    5f18:	00008566 	.word	0x00008566
    5f1c:	00008542 	.word	0x00008542
    5f20:	00007610 	.word	0x00007610
    5f24:	0000828c 	.word	0x0000828c
    5f28:	200009d8 	.word	0x200009d8
    5f2c:	000077fd 	.word	0x000077fd
    5f30:	0000784f 	.word	0x0000784f
    5f34:	00007864 	.word	0x00007864
    5f38:	20000250 	.word	0x20000250
    5f3c:	20000058 	.word	0x20000058
    5f40:	20000994 	.word	0x20000994
    5f44:	00007823 	.word	0x00007823
    5f48:	0000783a 	.word	0x0000783a

00005f4c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    5f4c:	b538      	push	{r3, r4, r5, lr}
    5f4e:	4604      	mov	r4, r0
	__asm__ volatile(
    5f50:	f04f 0320 	mov.w	r3, #32
    5f54:	f3ef 8511 	mrs	r5, BASEPRI
    5f58:	f383 8812 	msr	BASEPRI_MAX, r3
    5f5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f60:	481a      	ldr	r0, [pc, #104]	; (5fcc <z_abort_timeout+0x80>)
    5f62:	f7ff fea9 	bl	5cb8 <z_spin_lock_valid>
    5f66:	b968      	cbnz	r0, 5f84 <z_abort_timeout+0x38>
    5f68:	4a19      	ldr	r2, [pc, #100]	; (5fd0 <z_abort_timeout+0x84>)
    5f6a:	491a      	ldr	r1, [pc, #104]	; (5fd4 <z_abort_timeout+0x88>)
    5f6c:	481a      	ldr	r0, [pc, #104]	; (5fd8 <z_abort_timeout+0x8c>)
    5f6e:	2381      	movs	r3, #129	; 0x81
    5f70:	f000 fccd 	bl	690e <printk>
    5f74:	4915      	ldr	r1, [pc, #84]	; (5fcc <z_abort_timeout+0x80>)
    5f76:	4819      	ldr	r0, [pc, #100]	; (5fdc <z_abort_timeout+0x90>)
    5f78:	f000 fcc9 	bl	690e <printk>
    5f7c:	4814      	ldr	r0, [pc, #80]	; (5fd0 <z_abort_timeout+0x84>)
    5f7e:	2181      	movs	r1, #129	; 0x81
    5f80:	f000 fbec 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    5f84:	4811      	ldr	r0, [pc, #68]	; (5fcc <z_abort_timeout+0x80>)
    5f86:	f7ff feb5 	bl	5cf4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    5f8a:	6823      	ldr	r3, [r4, #0]
    5f8c:	b1db      	cbz	r3, 5fc6 <z_abort_timeout+0x7a>
			remove_timeout(to);
    5f8e:	4620      	mov	r0, r4
    5f90:	f7ff feee 	bl	5d70 <remove_timeout>
			ret = 0;
    5f94:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f96:	480d      	ldr	r0, [pc, #52]	; (5fcc <z_abort_timeout+0x80>)
    5f98:	f7ff fe9c 	bl	5cd4 <z_spin_unlock_valid>
    5f9c:	b968      	cbnz	r0, 5fba <z_abort_timeout+0x6e>
    5f9e:	4a0c      	ldr	r2, [pc, #48]	; (5fd0 <z_abort_timeout+0x84>)
    5fa0:	490f      	ldr	r1, [pc, #60]	; (5fe0 <z_abort_timeout+0x94>)
    5fa2:	480d      	ldr	r0, [pc, #52]	; (5fd8 <z_abort_timeout+0x8c>)
    5fa4:	23ac      	movs	r3, #172	; 0xac
    5fa6:	f000 fcb2 	bl	690e <printk>
    5faa:	4908      	ldr	r1, [pc, #32]	; (5fcc <z_abort_timeout+0x80>)
    5fac:	480d      	ldr	r0, [pc, #52]	; (5fe4 <z_abort_timeout+0x98>)
    5fae:	f000 fcae 	bl	690e <printk>
    5fb2:	4807      	ldr	r0, [pc, #28]	; (5fd0 <z_abort_timeout+0x84>)
    5fb4:	21ac      	movs	r1, #172	; 0xac
    5fb6:	f000 fbd1 	bl	675c <assert_post_action>
	__asm__ volatile(
    5fba:	f385 8811 	msr	BASEPRI, r5
    5fbe:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    5fc2:	4620      	mov	r0, r4
    5fc4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    5fc6:	f06f 0415 	mvn.w	r4, #21
    5fca:	e7e4      	b.n	5f96 <z_abort_timeout+0x4a>
    5fcc:	200009d8 	.word	0x200009d8
    5fd0:	000077fd 	.word	0x000077fd
    5fd4:	0000784f 	.word	0x0000784f
    5fd8:	00007610 	.word	0x00007610
    5fdc:	00007864 	.word	0x00007864
    5fe0:	00007823 	.word	0x00007823
    5fe4:	0000783a 	.word	0x0000783a

00005fe8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    5fe8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5fea:	f04f 0320 	mov.w	r3, #32
    5fee:	f3ef 8511 	mrs	r5, BASEPRI
    5ff2:	f383 8812 	msr	BASEPRI_MAX, r3
    5ff6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5ffa:	4818      	ldr	r0, [pc, #96]	; (605c <z_get_next_timeout_expiry+0x74>)
    5ffc:	f7ff fe5c 	bl	5cb8 <z_spin_lock_valid>
    6000:	b968      	cbnz	r0, 601e <z_get_next_timeout_expiry+0x36>
    6002:	4a17      	ldr	r2, [pc, #92]	; (6060 <z_get_next_timeout_expiry+0x78>)
    6004:	4917      	ldr	r1, [pc, #92]	; (6064 <z_get_next_timeout_expiry+0x7c>)
    6006:	4818      	ldr	r0, [pc, #96]	; (6068 <z_get_next_timeout_expiry+0x80>)
    6008:	2381      	movs	r3, #129	; 0x81
    600a:	f000 fc80 	bl	690e <printk>
    600e:	4913      	ldr	r1, [pc, #76]	; (605c <z_get_next_timeout_expiry+0x74>)
    6010:	4816      	ldr	r0, [pc, #88]	; (606c <z_get_next_timeout_expiry+0x84>)
    6012:	f000 fc7c 	bl	690e <printk>
    6016:	4812      	ldr	r0, [pc, #72]	; (6060 <z_get_next_timeout_expiry+0x78>)
    6018:	2181      	movs	r1, #129	; 0x81
    601a:	f000 fb9f 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    601e:	480f      	ldr	r0, [pc, #60]	; (605c <z_get_next_timeout_expiry+0x74>)
    6020:	f7ff fe68 	bl	5cf4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    6024:	f7ff fe78 	bl	5d18 <next_timeout>
    6028:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    602a:	480c      	ldr	r0, [pc, #48]	; (605c <z_get_next_timeout_expiry+0x74>)
    602c:	f7ff fe52 	bl	5cd4 <z_spin_unlock_valid>
    6030:	b968      	cbnz	r0, 604e <z_get_next_timeout_expiry+0x66>
    6032:	4a0b      	ldr	r2, [pc, #44]	; (6060 <z_get_next_timeout_expiry+0x78>)
    6034:	490e      	ldr	r1, [pc, #56]	; (6070 <z_get_next_timeout_expiry+0x88>)
    6036:	480c      	ldr	r0, [pc, #48]	; (6068 <z_get_next_timeout_expiry+0x80>)
    6038:	23ac      	movs	r3, #172	; 0xac
    603a:	f000 fc68 	bl	690e <printk>
    603e:	4907      	ldr	r1, [pc, #28]	; (605c <z_get_next_timeout_expiry+0x74>)
    6040:	480c      	ldr	r0, [pc, #48]	; (6074 <z_get_next_timeout_expiry+0x8c>)
    6042:	f000 fc64 	bl	690e <printk>
    6046:	4806      	ldr	r0, [pc, #24]	; (6060 <z_get_next_timeout_expiry+0x78>)
    6048:	21ac      	movs	r1, #172	; 0xac
    604a:	f000 fb87 	bl	675c <assert_post_action>
	__asm__ volatile(
    604e:	f385 8811 	msr	BASEPRI, r5
    6052:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    6056:	4620      	mov	r0, r4
    6058:	bd38      	pop	{r3, r4, r5, pc}
    605a:	bf00      	nop
    605c:	200009d8 	.word	0x200009d8
    6060:	000077fd 	.word	0x000077fd
    6064:	0000784f 	.word	0x0000784f
    6068:	00007610 	.word	0x00007610
    606c:	00007864 	.word	0x00007864
    6070:	00007823 	.word	0x00007823
    6074:	0000783a 	.word	0x0000783a

00006078 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    6078:	b570      	push	{r4, r5, r6, lr}
    607a:	4604      	mov	r4, r0
    607c:	460d      	mov	r5, r1
	__asm__ volatile(
    607e:	f04f 0320 	mov.w	r3, #32
    6082:	f3ef 8611 	mrs	r6, BASEPRI
    6086:	f383 8812 	msr	BASEPRI_MAX, r3
    608a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    608e:	481b      	ldr	r0, [pc, #108]	; (60fc <z_set_timeout_expiry+0x84>)
    6090:	f7ff fe12 	bl	5cb8 <z_spin_lock_valid>
    6094:	b968      	cbnz	r0, 60b2 <z_set_timeout_expiry+0x3a>
    6096:	4a1a      	ldr	r2, [pc, #104]	; (6100 <z_set_timeout_expiry+0x88>)
    6098:	491a      	ldr	r1, [pc, #104]	; (6104 <z_set_timeout_expiry+0x8c>)
    609a:	481b      	ldr	r0, [pc, #108]	; (6108 <z_set_timeout_expiry+0x90>)
    609c:	2381      	movs	r3, #129	; 0x81
    609e:	f000 fc36 	bl	690e <printk>
    60a2:	4916      	ldr	r1, [pc, #88]	; (60fc <z_set_timeout_expiry+0x84>)
    60a4:	4819      	ldr	r0, [pc, #100]	; (610c <z_set_timeout_expiry+0x94>)
    60a6:	f000 fc32 	bl	690e <printk>
    60aa:	4815      	ldr	r0, [pc, #84]	; (6100 <z_set_timeout_expiry+0x88>)
    60ac:	2181      	movs	r1, #129	; 0x81
    60ae:	f000 fb55 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    60b2:	4812      	ldr	r0, [pc, #72]	; (60fc <z_set_timeout_expiry+0x84>)
    60b4:	f7ff fe1e 	bl	5cf4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    60b8:	f7ff fe2e 	bl	5d18 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    60bc:	2801      	cmp	r0, #1
    60be:	dd05      	ble.n	60cc <z_set_timeout_expiry+0x54>
    60c0:	42a0      	cmp	r0, r4
    60c2:	db03      	blt.n	60cc <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    60c4:	4629      	mov	r1, r5
    60c6:	4620      	mov	r0, r4
    60c8:	f7fd f946 	bl	3358 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    60cc:	480b      	ldr	r0, [pc, #44]	; (60fc <z_set_timeout_expiry+0x84>)
    60ce:	f7ff fe01 	bl	5cd4 <z_spin_unlock_valid>
    60d2:	b968      	cbnz	r0, 60f0 <z_set_timeout_expiry+0x78>
    60d4:	4a0a      	ldr	r2, [pc, #40]	; (6100 <z_set_timeout_expiry+0x88>)
    60d6:	490e      	ldr	r1, [pc, #56]	; (6110 <z_set_timeout_expiry+0x98>)
    60d8:	480b      	ldr	r0, [pc, #44]	; (6108 <z_set_timeout_expiry+0x90>)
    60da:	23ac      	movs	r3, #172	; 0xac
    60dc:	f000 fc17 	bl	690e <printk>
    60e0:	4906      	ldr	r1, [pc, #24]	; (60fc <z_set_timeout_expiry+0x84>)
    60e2:	480c      	ldr	r0, [pc, #48]	; (6114 <z_set_timeout_expiry+0x9c>)
    60e4:	f000 fc13 	bl	690e <printk>
    60e8:	4805      	ldr	r0, [pc, #20]	; (6100 <z_set_timeout_expiry+0x88>)
    60ea:	21ac      	movs	r1, #172	; 0xac
    60ec:	f000 fb36 	bl	675c <assert_post_action>
	__asm__ volatile(
    60f0:	f386 8811 	msr	BASEPRI, r6
    60f4:	f3bf 8f6f 	isb	sy
		}
	}
}
    60f8:	bd70      	pop	{r4, r5, r6, pc}
    60fa:	bf00      	nop
    60fc:	200009d8 	.word	0x200009d8
    6100:	000077fd 	.word	0x000077fd
    6104:	0000784f 	.word	0x0000784f
    6108:	00007610 	.word	0x00007610
    610c:	00007864 	.word	0x00007864
    6110:	00007823 	.word	0x00007823
    6114:	0000783a 	.word	0x0000783a

00006118 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    6118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    611c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    611e:	f7fe fd41 	bl	4ba4 <z_time_slice>
	__asm__ volatile(
    6122:	f04f 0320 	mov.w	r3, #32
    6126:	f3ef 8711 	mrs	r7, BASEPRI
    612a:	f383 8812 	msr	BASEPRI_MAX, r3
    612e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6132:	4855      	ldr	r0, [pc, #340]	; (6288 <sys_clock_announce+0x170>)
    6134:	f7ff fdc0 	bl	5cb8 <z_spin_lock_valid>
    6138:	b968      	cbnz	r0, 6156 <sys_clock_announce+0x3e>
    613a:	4a54      	ldr	r2, [pc, #336]	; (628c <sys_clock_announce+0x174>)
    613c:	4954      	ldr	r1, [pc, #336]	; (6290 <sys_clock_announce+0x178>)
    613e:	4855      	ldr	r0, [pc, #340]	; (6294 <sys_clock_announce+0x17c>)
    6140:	2381      	movs	r3, #129	; 0x81
    6142:	f000 fbe4 	bl	690e <printk>
    6146:	4950      	ldr	r1, [pc, #320]	; (6288 <sys_clock_announce+0x170>)
    6148:	4853      	ldr	r0, [pc, #332]	; (6298 <sys_clock_announce+0x180>)
    614a:	f000 fbe0 	bl	690e <printk>
    614e:	484f      	ldr	r0, [pc, #316]	; (628c <sys_clock_announce+0x174>)
    6150:	2181      	movs	r1, #129	; 0x81
    6152:	f000 fb03 	bl	675c <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    6156:	4d51      	ldr	r5, [pc, #324]	; (629c <sys_clock_announce+0x184>)
    6158:	4e51      	ldr	r6, [pc, #324]	; (62a0 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    615a:	484b      	ldr	r0, [pc, #300]	; (6288 <sys_clock_announce+0x170>)
	return list->head == list;
    615c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 62ac <sys_clock_announce+0x194>
    6160:	f7ff fdc8 	bl	5cf4 <z_spin_lock_set_owner>
    6164:	46b3      	mov	fp, r6
    6166:	602c      	str	r4, [r5, #0]
    6168:	e9d6 2300 	ldrd	r2, r3, [r6]
    616c:	f8d5 c000 	ldr.w	ip, [r5]
    6170:	f8da 4000 	ldr.w	r4, [sl]
    6174:	e9cd 2300 	strd	r2, r3, [sp]
    6178:	4662      	mov	r2, ip
    617a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    617c:	4554      	cmp	r4, sl
    617e:	46e0      	mov	r8, ip
    6180:	4699      	mov	r9, r3
    6182:	d00c      	beq.n	619e <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    6184:	b15c      	cbz	r4, 619e <sys_clock_announce+0x86>
    6186:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    618a:	458c      	cmp	ip, r1
    618c:	eb79 0302 	sbcs.w	r3, r9, r2
    6190:	da2e      	bge.n	61f0 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    6192:	ebb1 000c 	subs.w	r0, r1, ip
    6196:	eb62 0109 	sbc.w	r1, r2, r9
    619a:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    619e:	9a00      	ldr	r2, [sp, #0]
    61a0:	9901      	ldr	r1, [sp, #4]
    61a2:	eb18 0202 	adds.w	r2, r8, r2
    61a6:	464b      	mov	r3, r9
    61a8:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    61ac:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    61ae:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    61b2:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    61b4:	f7ff fdb0 	bl	5d18 <next_timeout>
    61b8:	4621      	mov	r1, r4
    61ba:	f7fd f8cd 	bl	3358 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61be:	4832      	ldr	r0, [pc, #200]	; (6288 <sys_clock_announce+0x170>)
    61c0:	f7ff fd88 	bl	5cd4 <z_spin_unlock_valid>
    61c4:	b968      	cbnz	r0, 61e2 <sys_clock_announce+0xca>
    61c6:	4a31      	ldr	r2, [pc, #196]	; (628c <sys_clock_announce+0x174>)
    61c8:	4936      	ldr	r1, [pc, #216]	; (62a4 <sys_clock_announce+0x18c>)
    61ca:	4832      	ldr	r0, [pc, #200]	; (6294 <sys_clock_announce+0x17c>)
    61cc:	23ac      	movs	r3, #172	; 0xac
    61ce:	f000 fb9e 	bl	690e <printk>
    61d2:	492d      	ldr	r1, [pc, #180]	; (6288 <sys_clock_announce+0x170>)
    61d4:	4834      	ldr	r0, [pc, #208]	; (62a8 <sys_clock_announce+0x190>)
    61d6:	f000 fb9a 	bl	690e <printk>
    61da:	482c      	ldr	r0, [pc, #176]	; (628c <sys_clock_announce+0x174>)
    61dc:	21ac      	movs	r1, #172	; 0xac
    61de:	f000 fabd 	bl	675c <assert_post_action>
	__asm__ volatile(
    61e2:	f387 8811 	msr	BASEPRI, r7
    61e6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    61ea:	b003      	add	sp, #12
    61ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    61f0:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    61f4:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    61f8:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    61fc:	f04f 0200 	mov.w	r2, #0
    6200:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    6204:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    6208:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    620a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    620e:	4620      	mov	r0, r4
		curr_tick += dt;
    6210:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    6214:	f7ff fdac 	bl	5d70 <remove_timeout>
    6218:	481b      	ldr	r0, [pc, #108]	; (6288 <sys_clock_announce+0x170>)
    621a:	f7ff fd5b 	bl	5cd4 <z_spin_unlock_valid>
    621e:	b968      	cbnz	r0, 623c <sys_clock_announce+0x124>
    6220:	4a1a      	ldr	r2, [pc, #104]	; (628c <sys_clock_announce+0x174>)
    6222:	4920      	ldr	r1, [pc, #128]	; (62a4 <sys_clock_announce+0x18c>)
    6224:	481b      	ldr	r0, [pc, #108]	; (6294 <sys_clock_announce+0x17c>)
    6226:	23ac      	movs	r3, #172	; 0xac
    6228:	f000 fb71 	bl	690e <printk>
    622c:	4916      	ldr	r1, [pc, #88]	; (6288 <sys_clock_announce+0x170>)
    622e:	481e      	ldr	r0, [pc, #120]	; (62a8 <sys_clock_announce+0x190>)
    6230:	f000 fb6d 	bl	690e <printk>
    6234:	4815      	ldr	r0, [pc, #84]	; (628c <sys_clock_announce+0x174>)
    6236:	21ac      	movs	r1, #172	; 0xac
    6238:	f000 fa90 	bl	675c <assert_post_action>
    623c:	f387 8811 	msr	BASEPRI, r7
    6240:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6244:	68a3      	ldr	r3, [r4, #8]
    6246:	4620      	mov	r0, r4
    6248:	4798      	blx	r3
	__asm__ volatile(
    624a:	f04f 0320 	mov.w	r3, #32
    624e:	f3ef 8711 	mrs	r7, BASEPRI
    6252:	f383 8812 	msr	BASEPRI_MAX, r3
    6256:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    625a:	480b      	ldr	r0, [pc, #44]	; (6288 <sys_clock_announce+0x170>)
    625c:	f7ff fd2c 	bl	5cb8 <z_spin_lock_valid>
    6260:	b968      	cbnz	r0, 627e <sys_clock_announce+0x166>
    6262:	4a0a      	ldr	r2, [pc, #40]	; (628c <sys_clock_announce+0x174>)
    6264:	490a      	ldr	r1, [pc, #40]	; (6290 <sys_clock_announce+0x178>)
    6266:	480b      	ldr	r0, [pc, #44]	; (6294 <sys_clock_announce+0x17c>)
    6268:	2381      	movs	r3, #129	; 0x81
    626a:	f000 fb50 	bl	690e <printk>
    626e:	4906      	ldr	r1, [pc, #24]	; (6288 <sys_clock_announce+0x170>)
    6270:	4809      	ldr	r0, [pc, #36]	; (6298 <sys_clock_announce+0x180>)
    6272:	f000 fb4c 	bl	690e <printk>
    6276:	4805      	ldr	r0, [pc, #20]	; (628c <sys_clock_announce+0x174>)
    6278:	2181      	movs	r1, #129	; 0x81
    627a:	f000 fa6f 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    627e:	4802      	ldr	r0, [pc, #8]	; (6288 <sys_clock_announce+0x170>)
    6280:	f7ff fd38 	bl	5cf4 <z_spin_lock_set_owner>
	return k;
    6284:	e770      	b.n	6168 <sys_clock_announce+0x50>
    6286:	bf00      	nop
    6288:	200009d8 	.word	0x200009d8
    628c:	000077fd 	.word	0x000077fd
    6290:	0000784f 	.word	0x0000784f
    6294:	00007610 	.word	0x00007610
    6298:	00007864 	.word	0x00007864
    629c:	200009d4 	.word	0x200009d4
    62a0:	20000250 	.word	0x20000250
    62a4:	00007823 	.word	0x00007823
    62a8:	0000783a 	.word	0x0000783a
    62ac:	20000058 	.word	0x20000058

000062b0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    62b0:	b570      	push	{r4, r5, r6, lr}
    62b2:	f04f 0320 	mov.w	r3, #32
    62b6:	f3ef 8611 	mrs	r6, BASEPRI
    62ba:	f383 8812 	msr	BASEPRI_MAX, r3
    62be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62c2:	481b      	ldr	r0, [pc, #108]	; (6330 <sys_clock_tick_get+0x80>)
    62c4:	f7ff fcf8 	bl	5cb8 <z_spin_lock_valid>
    62c8:	b968      	cbnz	r0, 62e6 <sys_clock_tick_get+0x36>
    62ca:	4a1a      	ldr	r2, [pc, #104]	; (6334 <sys_clock_tick_get+0x84>)
    62cc:	491a      	ldr	r1, [pc, #104]	; (6338 <sys_clock_tick_get+0x88>)
    62ce:	481b      	ldr	r0, [pc, #108]	; (633c <sys_clock_tick_get+0x8c>)
    62d0:	2381      	movs	r3, #129	; 0x81
    62d2:	f000 fb1c 	bl	690e <printk>
    62d6:	4916      	ldr	r1, [pc, #88]	; (6330 <sys_clock_tick_get+0x80>)
    62d8:	4819      	ldr	r0, [pc, #100]	; (6340 <sys_clock_tick_get+0x90>)
    62da:	f000 fb18 	bl	690e <printk>
    62de:	4815      	ldr	r0, [pc, #84]	; (6334 <sys_clock_tick_get+0x84>)
    62e0:	2181      	movs	r1, #129	; 0x81
    62e2:	f000 fa3b 	bl	675c <assert_post_action>
	z_spin_lock_set_owner(l);
    62e6:	4812      	ldr	r0, [pc, #72]	; (6330 <sys_clock_tick_get+0x80>)
    62e8:	f7ff fd04 	bl	5cf4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    62ec:	f7fd f864 	bl	33b8 <sys_clock_elapsed>
    62f0:	4b14      	ldr	r3, [pc, #80]	; (6344 <sys_clock_tick_get+0x94>)
    62f2:	e9d3 4500 	ldrd	r4, r5, [r3]
    62f6:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    62f8:	480d      	ldr	r0, [pc, #52]	; (6330 <sys_clock_tick_get+0x80>)
    62fa:	f145 0500 	adc.w	r5, r5, #0
    62fe:	f7ff fce9 	bl	5cd4 <z_spin_unlock_valid>
    6302:	b968      	cbnz	r0, 6320 <sys_clock_tick_get+0x70>
    6304:	4a0b      	ldr	r2, [pc, #44]	; (6334 <sys_clock_tick_get+0x84>)
    6306:	4910      	ldr	r1, [pc, #64]	; (6348 <sys_clock_tick_get+0x98>)
    6308:	480c      	ldr	r0, [pc, #48]	; (633c <sys_clock_tick_get+0x8c>)
    630a:	23ac      	movs	r3, #172	; 0xac
    630c:	f000 faff 	bl	690e <printk>
    6310:	4907      	ldr	r1, [pc, #28]	; (6330 <sys_clock_tick_get+0x80>)
    6312:	480e      	ldr	r0, [pc, #56]	; (634c <sys_clock_tick_get+0x9c>)
    6314:	f000 fafb 	bl	690e <printk>
    6318:	4806      	ldr	r0, [pc, #24]	; (6334 <sys_clock_tick_get+0x84>)
    631a:	21ac      	movs	r1, #172	; 0xac
    631c:	f000 fa1e 	bl	675c <assert_post_action>
	__asm__ volatile(
    6320:	f386 8811 	msr	BASEPRI, r6
    6324:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6328:	4620      	mov	r0, r4
    632a:	4629      	mov	r1, r5
    632c:	bd70      	pop	{r4, r5, r6, pc}
    632e:	bf00      	nop
    6330:	200009d8 	.word	0x200009d8
    6334:	000077fd 	.word	0x000077fd
    6338:	0000784f 	.word	0x0000784f
    633c:	00007610 	.word	0x00007610
    6340:	00007864 	.word	0x00007864
    6344:	20000250 	.word	0x20000250
    6348:	00007823 	.word	0x00007823
    634c:	0000783a 	.word	0x0000783a

00006350 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    6350:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    6352:	4806      	ldr	r0, [pc, #24]	; (636c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    6354:	4a06      	ldr	r2, [pc, #24]	; (6370 <z_data_copy+0x20>)
    6356:	4907      	ldr	r1, [pc, #28]	; (6374 <z_data_copy+0x24>)
    6358:	1a12      	subs	r2, r2, r0
    635a:	f000 fb29 	bl	69b0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    635e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6362:	4a05      	ldr	r2, [pc, #20]	; (6378 <z_data_copy+0x28>)
    6364:	4905      	ldr	r1, [pc, #20]	; (637c <z_data_copy+0x2c>)
    6366:	4806      	ldr	r0, [pc, #24]	; (6380 <z_data_copy+0x30>)
    6368:	f000 bb22 	b.w	69b0 <memcpy>
    636c:	20000000 	.word	0x20000000
    6370:	2000012c 	.word	0x2000012c
    6374:	000085bc 	.word	0x000085bc
    6378:	00000000 	.word	0x00000000
    637c:	000085bc 	.word	0x000085bc
    6380:	20000000 	.word	0x20000000

00006384 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6384:	4a02      	ldr	r2, [pc, #8]	; (6390 <boot_banner+0xc>)
    6386:	4903      	ldr	r1, [pc, #12]	; (6394 <boot_banner+0x10>)
    6388:	4803      	ldr	r0, [pc, #12]	; (6398 <boot_banner+0x14>)
    638a:	f000 bac0 	b.w	690e <printk>
    638e:	bf00      	nop
    6390:	0000828e 	.word	0x0000828e
    6394:	00008586 	.word	0x00008586
    6398:	00008592 	.word	0x00008592

0000639c <nrf_cc3xx_platform_init_no_rng>:
    639c:	b510      	push	{r4, lr}
    639e:	4c0a      	ldr	r4, [pc, #40]	; (63c8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    63a0:	6823      	ldr	r3, [r4, #0]
    63a2:	b11b      	cbz	r3, 63ac <nrf_cc3xx_platform_init_no_rng+0x10>
    63a4:	2301      	movs	r3, #1
    63a6:	6023      	str	r3, [r4, #0]
    63a8:	2000      	movs	r0, #0
    63aa:	bd10      	pop	{r4, pc}
    63ac:	f000 f8d6 	bl	655c <CC_LibInitNoRng>
    63b0:	2800      	cmp	r0, #0
    63b2:	d0f7      	beq.n	63a4 <nrf_cc3xx_platform_init_no_rng+0x8>
    63b4:	3801      	subs	r0, #1
    63b6:	2806      	cmp	r0, #6
    63b8:	d803      	bhi.n	63c2 <nrf_cc3xx_platform_init_no_rng+0x26>
    63ba:	4b04      	ldr	r3, [pc, #16]	; (63cc <nrf_cc3xx_platform_init_no_rng+0x30>)
    63bc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    63c0:	bd10      	pop	{r4, pc}
    63c2:	4803      	ldr	r0, [pc, #12]	; (63d0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    63c4:	bd10      	pop	{r4, pc}
    63c6:	bf00      	nop
    63c8:	200009dc 	.word	0x200009dc
    63cc:	00007450 	.word	0x00007450
    63d0:	ffff8ffe 	.word	0xffff8ffe

000063d4 <nrf_cc3xx_platform_abort>:
    63d4:	f3bf 8f4f 	dsb	sy
    63d8:	4905      	ldr	r1, [pc, #20]	; (63f0 <nrf_cc3xx_platform_abort+0x1c>)
    63da:	4b06      	ldr	r3, [pc, #24]	; (63f4 <nrf_cc3xx_platform_abort+0x20>)
    63dc:	68ca      	ldr	r2, [r1, #12]
    63de:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    63e2:	4313      	orrs	r3, r2
    63e4:	60cb      	str	r3, [r1, #12]
    63e6:	f3bf 8f4f 	dsb	sy
    63ea:	bf00      	nop
    63ec:	e7fd      	b.n	63ea <nrf_cc3xx_platform_abort+0x16>
    63ee:	bf00      	nop
    63f0:	e000ed00 	.word	0xe000ed00
    63f4:	05fa0004 	.word	0x05fa0004

000063f8 <CC_PalAbort>:
    63f8:	b4f0      	push	{r4, r5, r6, r7}
    63fa:	4f09      	ldr	r7, [pc, #36]	; (6420 <CC_PalAbort+0x28>)
    63fc:	4e09      	ldr	r6, [pc, #36]	; (6424 <CC_PalAbort+0x2c>)
    63fe:	4c0a      	ldr	r4, [pc, #40]	; (6428 <CC_PalAbort+0x30>)
    6400:	4a0a      	ldr	r2, [pc, #40]	; (642c <CC_PalAbort+0x34>)
    6402:	4d0b      	ldr	r5, [pc, #44]	; (6430 <CC_PalAbort+0x38>)
    6404:	490b      	ldr	r1, [pc, #44]	; (6434 <CC_PalAbort+0x3c>)
    6406:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    640a:	603b      	str	r3, [r7, #0]
    640c:	6852      	ldr	r2, [r2, #4]
    640e:	6033      	str	r3, [r6, #0]
    6410:	6023      	str	r3, [r4, #0]
    6412:	2400      	movs	r4, #0
    6414:	602b      	str	r3, [r5, #0]
    6416:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    641a:	bcf0      	pop	{r4, r5, r6, r7}
    641c:	4710      	bx	r2
    641e:	bf00      	nop
    6420:	5002b400 	.word	0x5002b400
    6424:	5002b404 	.word	0x5002b404
    6428:	5002b408 	.word	0x5002b408
    642c:	20000060 	.word	0x20000060
    6430:	5002b40c 	.word	0x5002b40c
    6434:	5002a000 	.word	0x5002a000

00006438 <nrf_cc3xx_platform_set_abort>:
    6438:	e9d0 1200 	ldrd	r1, r2, [r0]
    643c:	4b01      	ldr	r3, [pc, #4]	; (6444 <nrf_cc3xx_platform_set_abort+0xc>)
    643e:	e9c3 1200 	strd	r1, r2, [r3]
    6442:	4770      	bx	lr
    6444:	20000060 	.word	0x20000060

00006448 <mutex_free>:
    6448:	b510      	push	{r4, lr}
    644a:	4604      	mov	r4, r0
    644c:	b130      	cbz	r0, 645c <mutex_free+0x14>
    644e:	6863      	ldr	r3, [r4, #4]
    6450:	06db      	lsls	r3, r3, #27
    6452:	d502      	bpl.n	645a <mutex_free+0x12>
    6454:	2300      	movs	r3, #0
    6456:	6023      	str	r3, [r4, #0]
    6458:	6063      	str	r3, [r4, #4]
    645a:	bd10      	pop	{r4, pc}
    645c:	4b02      	ldr	r3, [pc, #8]	; (6468 <mutex_free+0x20>)
    645e:	4803      	ldr	r0, [pc, #12]	; (646c <mutex_free+0x24>)
    6460:	685b      	ldr	r3, [r3, #4]
    6462:	4798      	blx	r3
    6464:	e7f3      	b.n	644e <mutex_free+0x6>
    6466:	bf00      	nop
    6468:	20000060 	.word	0x20000060
    646c:	0000746c 	.word	0x0000746c

00006470 <mutex_unlock>:
    6470:	b168      	cbz	r0, 648e <mutex_unlock+0x1e>
    6472:	6843      	ldr	r3, [r0, #4]
    6474:	b13b      	cbz	r3, 6486 <mutex_unlock+0x16>
    6476:	06db      	lsls	r3, r3, #27
    6478:	d507      	bpl.n	648a <mutex_unlock+0x1a>
    647a:	f3bf 8f5f 	dmb	sy
    647e:	2300      	movs	r3, #0
    6480:	6003      	str	r3, [r0, #0]
    6482:	4618      	mov	r0, r3
    6484:	4770      	bx	lr
    6486:	4803      	ldr	r0, [pc, #12]	; (6494 <mutex_unlock+0x24>)
    6488:	4770      	bx	lr
    648a:	4803      	ldr	r0, [pc, #12]	; (6498 <mutex_unlock+0x28>)
    648c:	4770      	bx	lr
    648e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6492:	4770      	bx	lr
    6494:	ffff8fea 	.word	0xffff8fea
    6498:	ffff8fe9 	.word	0xffff8fe9

0000649c <mutex_init>:
    649c:	b510      	push	{r4, lr}
    649e:	4604      	mov	r4, r0
    64a0:	b120      	cbz	r0, 64ac <mutex_init+0x10>
    64a2:	2200      	movs	r2, #0
    64a4:	2311      	movs	r3, #17
    64a6:	6022      	str	r2, [r4, #0]
    64a8:	6063      	str	r3, [r4, #4]
    64aa:	bd10      	pop	{r4, pc}
    64ac:	4801      	ldr	r0, [pc, #4]	; (64b4 <mutex_init+0x18>)
    64ae:	f7ff ffa3 	bl	63f8 <CC_PalAbort>
    64b2:	e7f6      	b.n	64a2 <mutex_init+0x6>
    64b4:	00007494 	.word	0x00007494

000064b8 <mutex_lock>:
    64b8:	b1c0      	cbz	r0, 64ec <mutex_lock+0x34>
    64ba:	6843      	ldr	r3, [r0, #4]
    64bc:	b1a3      	cbz	r3, 64e8 <mutex_lock+0x30>
    64be:	06db      	lsls	r3, r3, #27
    64c0:	d510      	bpl.n	64e4 <mutex_lock+0x2c>
    64c2:	2201      	movs	r2, #1
    64c4:	f3bf 8f5b 	dmb	ish
    64c8:	e850 3f00 	ldrex	r3, [r0]
    64cc:	e840 2100 	strex	r1, r2, [r0]
    64d0:	2900      	cmp	r1, #0
    64d2:	d1f9      	bne.n	64c8 <mutex_lock+0x10>
    64d4:	f3bf 8f5b 	dmb	ish
    64d8:	2b01      	cmp	r3, #1
    64da:	d0f3      	beq.n	64c4 <mutex_lock+0xc>
    64dc:	f3bf 8f5f 	dmb	sy
    64e0:	2000      	movs	r0, #0
    64e2:	4770      	bx	lr
    64e4:	4803      	ldr	r0, [pc, #12]	; (64f4 <mutex_lock+0x3c>)
    64e6:	4770      	bx	lr
    64e8:	4803      	ldr	r0, [pc, #12]	; (64f8 <mutex_lock+0x40>)
    64ea:	4770      	bx	lr
    64ec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    64f0:	4770      	bx	lr
    64f2:	bf00      	nop
    64f4:	ffff8fe9 	.word	0xffff8fe9
    64f8:	ffff8fea 	.word	0xffff8fea

000064fc <nrf_cc3xx_platform_set_mutexes>:
    64fc:	b570      	push	{r4, r5, r6, lr}
    64fe:	e9d0 2300 	ldrd	r2, r3, [r0]
    6502:	4c13      	ldr	r4, [pc, #76]	; (6550 <nrf_cc3xx_platform_set_mutexes+0x54>)
    6504:	4d13      	ldr	r5, [pc, #76]	; (6554 <nrf_cc3xx_platform_set_mutexes+0x58>)
    6506:	e9c4 2300 	strd	r2, r3, [r4]
    650a:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    650e:	e9c4 6302 	strd	r6, r3, [r4, #8]
    6512:	4b11      	ldr	r3, [pc, #68]	; (6558 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    6514:	6808      	ldr	r0, [r1, #0]
    6516:	6018      	str	r0, [r3, #0]
    6518:	6848      	ldr	r0, [r1, #4]
    651a:	6058      	str	r0, [r3, #4]
    651c:	6888      	ldr	r0, [r1, #8]
    651e:	6098      	str	r0, [r3, #8]
    6520:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    6524:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    6528:	60de      	str	r6, [r3, #12]
    652a:	6118      	str	r0, [r3, #16]
    652c:	06cb      	lsls	r3, r1, #27
    652e:	d50d      	bpl.n	654c <nrf_cc3xx_platform_set_mutexes+0x50>
    6530:	2300      	movs	r3, #0
    6532:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    6536:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    653a:	f505 7088 	add.w	r0, r5, #272	; 0x110
    653e:	4790      	blx	r2
    6540:	6823      	ldr	r3, [r4, #0]
    6542:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    6546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    654a:	4718      	bx	r3
    654c:	bd70      	pop	{r4, r5, r6, pc}
    654e:	bf00      	nop
    6550:	20000070 	.word	0x20000070
    6554:	20000e08 	.word	0x20000e08
    6558:	20000080 	.word	0x20000080

0000655c <CC_LibInitNoRng>:
    655c:	b510      	push	{r4, lr}
    655e:	f000 f833 	bl	65c8 <CC_HalInit>
    6562:	b120      	cbz	r0, 656e <CC_LibInitNoRng+0x12>
    6564:	2403      	movs	r4, #3
    6566:	f000 f867 	bl	6638 <CC_PalTerminate>
    656a:	4620      	mov	r0, r4
    656c:	bd10      	pop	{r4, pc}
    656e:	f000 f835 	bl	65dc <CC_PalInit>
    6572:	b990      	cbnz	r0, 659a <CC_LibInitNoRng+0x3e>
    6574:	f000 f8b0 	bl	66d8 <CC_PalPowerSaveModeSelect>
    6578:	b990      	cbnz	r0, 65a0 <CC_LibInitNoRng+0x44>
    657a:	4b0f      	ldr	r3, [pc, #60]	; (65b8 <CC_LibInitNoRng+0x5c>)
    657c:	681b      	ldr	r3, [r3, #0]
    657e:	0e1b      	lsrs	r3, r3, #24
    6580:	2bf0      	cmp	r3, #240	; 0xf0
    6582:	d108      	bne.n	6596 <CC_LibInitNoRng+0x3a>
    6584:	4a0d      	ldr	r2, [pc, #52]	; (65bc <CC_LibInitNoRng+0x60>)
    6586:	4b0e      	ldr	r3, [pc, #56]	; (65c0 <CC_LibInitNoRng+0x64>)
    6588:	6812      	ldr	r2, [r2, #0]
    658a:	429a      	cmp	r2, r3
    658c:	d00a      	beq.n	65a4 <CC_LibInitNoRng+0x48>
    658e:	2407      	movs	r4, #7
    6590:	f000 f81c 	bl	65cc <CC_HalTerminate>
    6594:	e7e7      	b.n	6566 <CC_LibInitNoRng+0xa>
    6596:	2406      	movs	r4, #6
    6598:	e7fa      	b.n	6590 <CC_LibInitNoRng+0x34>
    659a:	2404      	movs	r4, #4
    659c:	4620      	mov	r0, r4
    659e:	bd10      	pop	{r4, pc}
    65a0:	2400      	movs	r4, #0
    65a2:	e7f5      	b.n	6590 <CC_LibInitNoRng+0x34>
    65a4:	2001      	movs	r0, #1
    65a6:	f000 f897 	bl	66d8 <CC_PalPowerSaveModeSelect>
    65aa:	4604      	mov	r4, r0
    65ac:	2800      	cmp	r0, #0
    65ae:	d1f7      	bne.n	65a0 <CC_LibInitNoRng+0x44>
    65b0:	4b04      	ldr	r3, [pc, #16]	; (65c4 <CC_LibInitNoRng+0x68>)
    65b2:	6018      	str	r0, [r3, #0]
    65b4:	e7d9      	b.n	656a <CC_LibInitNoRng+0xe>
    65b6:	bf00      	nop
    65b8:	5002b928 	.word	0x5002b928
    65bc:	5002ba24 	.word	0x5002ba24
    65c0:	20e00000 	.word	0x20e00000
    65c4:	5002ba0c 	.word	0x5002ba0c

000065c8 <CC_HalInit>:
    65c8:	2000      	movs	r0, #0
    65ca:	4770      	bx	lr

000065cc <CC_HalTerminate>:
    65cc:	2000      	movs	r0, #0
    65ce:	4770      	bx	lr

000065d0 <CC_HalMaskInterrupt>:
    65d0:	4b01      	ldr	r3, [pc, #4]	; (65d8 <CC_HalMaskInterrupt+0x8>)
    65d2:	6018      	str	r0, [r3, #0]
    65d4:	4770      	bx	lr
    65d6:	bf00      	nop
    65d8:	5002ba04 	.word	0x5002ba04

000065dc <CC_PalInit>:
    65dc:	b510      	push	{r4, lr}
    65de:	4811      	ldr	r0, [pc, #68]	; (6624 <CC_PalInit+0x48>)
    65e0:	f000 f848 	bl	6674 <CC_PalMutexCreate>
    65e4:	b100      	cbz	r0, 65e8 <CC_PalInit+0xc>
    65e6:	bd10      	pop	{r4, pc}
    65e8:	480f      	ldr	r0, [pc, #60]	; (6628 <CC_PalInit+0x4c>)
    65ea:	f000 f843 	bl	6674 <CC_PalMutexCreate>
    65ee:	2800      	cmp	r0, #0
    65f0:	d1f9      	bne.n	65e6 <CC_PalInit+0xa>
    65f2:	4c0e      	ldr	r4, [pc, #56]	; (662c <CC_PalInit+0x50>)
    65f4:	4620      	mov	r0, r4
    65f6:	f000 f83d 	bl	6674 <CC_PalMutexCreate>
    65fa:	2800      	cmp	r0, #0
    65fc:	d1f3      	bne.n	65e6 <CC_PalInit+0xa>
    65fe:	4b0c      	ldr	r3, [pc, #48]	; (6630 <CC_PalInit+0x54>)
    6600:	480c      	ldr	r0, [pc, #48]	; (6634 <CC_PalInit+0x58>)
    6602:	601c      	str	r4, [r3, #0]
    6604:	f000 f836 	bl	6674 <CC_PalMutexCreate>
    6608:	4601      	mov	r1, r0
    660a:	2800      	cmp	r0, #0
    660c:	d1eb      	bne.n	65e6 <CC_PalInit+0xa>
    660e:	f000 f82d 	bl	666c <CC_PalDmaInit>
    6612:	4604      	mov	r4, r0
    6614:	b108      	cbz	r0, 661a <CC_PalInit+0x3e>
    6616:	4620      	mov	r0, r4
    6618:	bd10      	pop	{r4, pc}
    661a:	f000 f83f 	bl	669c <CC_PalPowerSaveModeInit>
    661e:	4620      	mov	r0, r4
    6620:	e7fa      	b.n	6618 <CC_PalInit+0x3c>
    6622:	bf00      	nop
    6624:	200000b8 	.word	0x200000b8
    6628:	200000ac 	.word	0x200000ac
    662c:	200000b4 	.word	0x200000b4
    6630:	200000bc 	.word	0x200000bc
    6634:	200000b0 	.word	0x200000b0

00006638 <CC_PalTerminate>:
    6638:	b508      	push	{r3, lr}
    663a:	4808      	ldr	r0, [pc, #32]	; (665c <CC_PalTerminate+0x24>)
    663c:	f000 f824 	bl	6688 <CC_PalMutexDestroy>
    6640:	4807      	ldr	r0, [pc, #28]	; (6660 <CC_PalTerminate+0x28>)
    6642:	f000 f821 	bl	6688 <CC_PalMutexDestroy>
    6646:	4807      	ldr	r0, [pc, #28]	; (6664 <CC_PalTerminate+0x2c>)
    6648:	f000 f81e 	bl	6688 <CC_PalMutexDestroy>
    664c:	4806      	ldr	r0, [pc, #24]	; (6668 <CC_PalTerminate+0x30>)
    664e:	f000 f81b 	bl	6688 <CC_PalMutexDestroy>
    6652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6656:	f000 b80b 	b.w	6670 <CC_PalDmaTerminate>
    665a:	bf00      	nop
    665c:	200000b8 	.word	0x200000b8
    6660:	200000ac 	.word	0x200000ac
    6664:	200000b4 	.word	0x200000b4
    6668:	200000b0 	.word	0x200000b0

0000666c <CC_PalDmaInit>:
    666c:	2000      	movs	r0, #0
    666e:	4770      	bx	lr

00006670 <CC_PalDmaTerminate>:
    6670:	4770      	bx	lr
    6672:	bf00      	nop

00006674 <CC_PalMutexCreate>:
    6674:	b508      	push	{r3, lr}
    6676:	4b03      	ldr	r3, [pc, #12]	; (6684 <CC_PalMutexCreate+0x10>)
    6678:	6802      	ldr	r2, [r0, #0]
    667a:	681b      	ldr	r3, [r3, #0]
    667c:	6810      	ldr	r0, [r2, #0]
    667e:	4798      	blx	r3
    6680:	2000      	movs	r0, #0
    6682:	bd08      	pop	{r3, pc}
    6684:	20000070 	.word	0x20000070

00006688 <CC_PalMutexDestroy>:
    6688:	b508      	push	{r3, lr}
    668a:	4b03      	ldr	r3, [pc, #12]	; (6698 <CC_PalMutexDestroy+0x10>)
    668c:	6802      	ldr	r2, [r0, #0]
    668e:	685b      	ldr	r3, [r3, #4]
    6690:	6810      	ldr	r0, [r2, #0]
    6692:	4798      	blx	r3
    6694:	2000      	movs	r0, #0
    6696:	bd08      	pop	{r3, pc}
    6698:	20000070 	.word	0x20000070

0000669c <CC_PalPowerSaveModeInit>:
    669c:	b570      	push	{r4, r5, r6, lr}
    669e:	4c09      	ldr	r4, [pc, #36]	; (66c4 <CC_PalPowerSaveModeInit+0x28>)
    66a0:	4d09      	ldr	r5, [pc, #36]	; (66c8 <CC_PalPowerSaveModeInit+0x2c>)
    66a2:	6920      	ldr	r0, [r4, #16]
    66a4:	68ab      	ldr	r3, [r5, #8]
    66a6:	4798      	blx	r3
    66a8:	b118      	cbz	r0, 66b2 <CC_PalPowerSaveModeInit+0x16>
    66aa:	4b08      	ldr	r3, [pc, #32]	; (66cc <CC_PalPowerSaveModeInit+0x30>)
    66ac:	4808      	ldr	r0, [pc, #32]	; (66d0 <CC_PalPowerSaveModeInit+0x34>)
    66ae:	685b      	ldr	r3, [r3, #4]
    66b0:	4798      	blx	r3
    66b2:	4a08      	ldr	r2, [pc, #32]	; (66d4 <CC_PalPowerSaveModeInit+0x38>)
    66b4:	68eb      	ldr	r3, [r5, #12]
    66b6:	6920      	ldr	r0, [r4, #16]
    66b8:	2100      	movs	r1, #0
    66ba:	6011      	str	r1, [r2, #0]
    66bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    66c0:	4718      	bx	r3
    66c2:	bf00      	nop
    66c4:	20000080 	.word	0x20000080
    66c8:	20000070 	.word	0x20000070
    66cc:	20000060 	.word	0x20000060
    66d0:	000074b8 	.word	0x000074b8
    66d4:	200009f0 	.word	0x200009f0

000066d8 <CC_PalPowerSaveModeSelect>:
    66d8:	b570      	push	{r4, r5, r6, lr}
    66da:	4d1a      	ldr	r5, [pc, #104]	; (6744 <CC_PalPowerSaveModeSelect+0x6c>)
    66dc:	4e1a      	ldr	r6, [pc, #104]	; (6748 <CC_PalPowerSaveModeSelect+0x70>)
    66de:	4604      	mov	r4, r0
    66e0:	68b2      	ldr	r2, [r6, #8]
    66e2:	6928      	ldr	r0, [r5, #16]
    66e4:	4790      	blx	r2
    66e6:	b9f0      	cbnz	r0, 6726 <CC_PalPowerSaveModeSelect+0x4e>
    66e8:	b15c      	cbz	r4, 6702 <CC_PalPowerSaveModeSelect+0x2a>
    66ea:	4c18      	ldr	r4, [pc, #96]	; (674c <CC_PalPowerSaveModeSelect+0x74>)
    66ec:	6823      	ldr	r3, [r4, #0]
    66ee:	b1ab      	cbz	r3, 671c <CC_PalPowerSaveModeSelect+0x44>
    66f0:	2b01      	cmp	r3, #1
    66f2:	d01a      	beq.n	672a <CC_PalPowerSaveModeSelect+0x52>
    66f4:	3b01      	subs	r3, #1
    66f6:	6023      	str	r3, [r4, #0]
    66f8:	6928      	ldr	r0, [r5, #16]
    66fa:	68f3      	ldr	r3, [r6, #12]
    66fc:	4798      	blx	r3
    66fe:	2000      	movs	r0, #0
    6700:	bd70      	pop	{r4, r5, r6, pc}
    6702:	4c12      	ldr	r4, [pc, #72]	; (674c <CC_PalPowerSaveModeSelect+0x74>)
    6704:	6821      	ldr	r1, [r4, #0]
    6706:	b939      	cbnz	r1, 6718 <CC_PalPowerSaveModeSelect+0x40>
    6708:	4b11      	ldr	r3, [pc, #68]	; (6750 <CC_PalPowerSaveModeSelect+0x78>)
    670a:	4a12      	ldr	r2, [pc, #72]	; (6754 <CC_PalPowerSaveModeSelect+0x7c>)
    670c:	2001      	movs	r0, #1
    670e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    6712:	6813      	ldr	r3, [r2, #0]
    6714:	2b00      	cmp	r3, #0
    6716:	d1fc      	bne.n	6712 <CC_PalPowerSaveModeSelect+0x3a>
    6718:	3101      	adds	r1, #1
    671a:	6021      	str	r1, [r4, #0]
    671c:	68f3      	ldr	r3, [r6, #12]
    671e:	6928      	ldr	r0, [r5, #16]
    6720:	4798      	blx	r3
    6722:	2000      	movs	r0, #0
    6724:	bd70      	pop	{r4, r5, r6, pc}
    6726:	480c      	ldr	r0, [pc, #48]	; (6758 <CC_PalPowerSaveModeSelect+0x80>)
    6728:	bd70      	pop	{r4, r5, r6, pc}
    672a:	4a0a      	ldr	r2, [pc, #40]	; (6754 <CC_PalPowerSaveModeSelect+0x7c>)
    672c:	6813      	ldr	r3, [r2, #0]
    672e:	2b00      	cmp	r3, #0
    6730:	d1fc      	bne.n	672c <CC_PalPowerSaveModeSelect+0x54>
    6732:	4a07      	ldr	r2, [pc, #28]	; (6750 <CC_PalPowerSaveModeSelect+0x78>)
    6734:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6738:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    673c:	f7ff ff48 	bl	65d0 <CC_HalMaskInterrupt>
    6740:	6823      	ldr	r3, [r4, #0]
    6742:	e7d7      	b.n	66f4 <CC_PalPowerSaveModeSelect+0x1c>
    6744:	20000080 	.word	0x20000080
    6748:	20000070 	.word	0x20000070
    674c:	200009f0 	.word	0x200009f0
    6750:	5002a000 	.word	0x5002a000
    6754:	5002b910 	.word	0x5002b910
    6758:	ffff8fe9 	.word	0xffff8fe9

0000675c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    675c:	4040      	eors	r0, r0
    675e:	f380 8811 	msr	BASEPRI, r0
    6762:	f04f 0004 	mov.w	r0, #4
    6766:	df02      	svc	2
}
    6768:	4770      	bx	lr

0000676a <encode_uint>:
{
    676a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    676e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    6770:	78d3      	ldrb	r3, [r2, #3]
{
    6772:	4614      	mov	r4, r2
	switch (specifier) {
    6774:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6776:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    677a:	4606      	mov	r6, r0
    677c:	460f      	mov	r7, r1
    677e:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    6780:	d02d      	beq.n	67de <encode_uint+0x74>
    6782:	d828      	bhi.n	67d6 <encode_uint+0x6c>
		return 16;
    6784:	2b58      	cmp	r3, #88	; 0x58
    6786:	bf14      	ite	ne
    6788:	250a      	movne	r5, #10
    678a:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    678c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    6790:	46aa      	mov	sl, r5
    6792:	f04f 0b00 	mov.w	fp, #0
    6796:	4652      	mov	r2, sl
    6798:	465b      	mov	r3, fp
    679a:	4630      	mov	r0, r6
    679c:	4639      	mov	r1, r7
    679e:	f7f9 fcaf 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    67a2:	2a09      	cmp	r2, #9
    67a4:	b2d3      	uxtb	r3, r2
    67a6:	d81f      	bhi.n	67e8 <encode_uint+0x7e>
    67a8:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    67aa:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    67ac:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    67ae:	bf08      	it	eq
    67b0:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    67b2:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    67b6:	d301      	bcc.n	67bc <encode_uint+0x52>
    67b8:	45c8      	cmp	r8, r9
    67ba:	d812      	bhi.n	67e2 <encode_uint+0x78>
	if (conv->flag_hash) {
    67bc:	7823      	ldrb	r3, [r4, #0]
    67be:	069b      	lsls	r3, r3, #26
    67c0:	d505      	bpl.n	67ce <encode_uint+0x64>
		if (radix == 8) {
    67c2:	2d08      	cmp	r5, #8
    67c4:	d116      	bne.n	67f4 <encode_uint+0x8a>
			conv->altform_0 = true;
    67c6:	78a3      	ldrb	r3, [r4, #2]
    67c8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    67cc:	70a3      	strb	r3, [r4, #2]
}
    67ce:	4640      	mov	r0, r8
    67d0:	b003      	add	sp, #12
    67d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    67d6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    67da:	2b70      	cmp	r3, #112	; 0x70
    67dc:	e7d3      	b.n	6786 <encode_uint+0x1c>
	switch (specifier) {
    67de:	2508      	movs	r5, #8
    67e0:	e7d4      	b.n	678c <encode_uint+0x22>
		value /= radix;
    67e2:	4606      	mov	r6, r0
    67e4:	460f      	mov	r7, r1
    67e6:	e7d6      	b.n	6796 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    67e8:	9a01      	ldr	r2, [sp, #4]
    67ea:	2a19      	cmp	r2, #25
    67ec:	bf94      	ite	ls
    67ee:	3337      	addls	r3, #55	; 0x37
    67f0:	3357      	addhi	r3, #87	; 0x57
    67f2:	e7da      	b.n	67aa <encode_uint+0x40>
		} else if (radix == 16) {
    67f4:	2d10      	cmp	r5, #16
    67f6:	d1ea      	bne.n	67ce <encode_uint+0x64>
			conv->altform_0c = true;
    67f8:	78a3      	ldrb	r3, [r4, #2]
    67fa:	f043 0310 	orr.w	r3, r3, #16
    67fe:	e7e5      	b.n	67cc <encode_uint+0x62>

00006800 <outs>:
{
    6800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6804:	4607      	mov	r7, r0
    6806:	4688      	mov	r8, r1
    6808:	4615      	mov	r5, r2
    680a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    680c:	4614      	mov	r4, r2
    680e:	42b4      	cmp	r4, r6
    6810:	eba4 0005 	sub.w	r0, r4, r5
    6814:	d302      	bcc.n	681c <outs+0x1c>
    6816:	b93e      	cbnz	r6, 6828 <outs+0x28>
    6818:	7823      	ldrb	r3, [r4, #0]
    681a:	b12b      	cbz	r3, 6828 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    681c:	f814 0b01 	ldrb.w	r0, [r4], #1
    6820:	4641      	mov	r1, r8
    6822:	47b8      	blx	r7
		if (rc < 0) {
    6824:	2800      	cmp	r0, #0
    6826:	daf2      	bge.n	680e <outs+0xe>
}
    6828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000682c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    682c:	4770      	bx	lr

0000682e <sys_notify_validate>:
	if (notify == NULL) {
    682e:	4603      	mov	r3, r0
    6830:	b158      	cbz	r0, 684a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6832:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6834:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    6838:	2a01      	cmp	r2, #1
    683a:	d003      	beq.n	6844 <sys_notify_validate+0x16>
    683c:	2a03      	cmp	r2, #3
    683e:	d104      	bne.n	684a <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    6840:	6802      	ldr	r2, [r0, #0]
    6842:	b112      	cbz	r2, 684a <sys_notify_validate+0x1c>
		notify->result = 0;
    6844:	2000      	movs	r0, #0
    6846:	6098      	str	r0, [r3, #8]
    6848:	4770      	bx	lr
		return -EINVAL;
    684a:	f06f 0015 	mvn.w	r0, #21
}
    684e:	4770      	bx	lr

00006850 <abort_function>:
{
    6850:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6852:	2000      	movs	r0, #0
    6854:	f7fa ff52 	bl	16fc <sys_reboot>

00006858 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6858:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    685a:	f013 0307 	ands.w	r3, r3, #7
    685e:	d105      	bne.n	686c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6860:	6803      	ldr	r3, [r0, #0]
    6862:	2b00      	cmp	r3, #0
		evt = EVT_START;
    6864:	bf0c      	ite	eq
    6866:	2000      	moveq	r0, #0
    6868:	2003      	movne	r0, #3
    686a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    686c:	2b02      	cmp	r3, #2
    686e:	d105      	bne.n	687c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6870:	8bc3      	ldrh	r3, [r0, #30]
    6872:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    6874:	bf14      	ite	ne
    6876:	2000      	movne	r0, #0
    6878:	2004      	moveq	r0, #4
    687a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    687c:	2b01      	cmp	r3, #1
    687e:	d105      	bne.n	688c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6880:	6803      	ldr	r3, [r0, #0]
    6882:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    6884:	bf0c      	ite	eq
    6886:	2000      	moveq	r0, #0
    6888:	2005      	movne	r0, #5
    688a:	4770      	bx	lr
	int evt = EVT_NOP;
    688c:	2000      	movs	r0, #0
}
    688e:	4770      	bx	lr

00006890 <notify_one>:
{
    6890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6894:	460d      	mov	r5, r1
    6896:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6898:	4619      	mov	r1, r3
    689a:	1d28      	adds	r0, r5, #4
{
    689c:	4690      	mov	r8, r2
    689e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    68a0:	f7fa fa86 	bl	db0 <sys_notify_finalize>
	if (cb) {
    68a4:	4604      	mov	r4, r0
    68a6:	b138      	cbz	r0, 68b8 <notify_one+0x28>
		cb(mgr, cli, state, res);
    68a8:	4633      	mov	r3, r6
    68aa:	4642      	mov	r2, r8
    68ac:	4629      	mov	r1, r5
    68ae:	4638      	mov	r0, r7
    68b0:	46a4      	mov	ip, r4
}
    68b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    68b6:	4760      	bx	ip
}
    68b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000068bc <validate_args>:
{
    68bc:	b510      	push	{r4, lr}
    68be:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    68c0:	b140      	cbz	r0, 68d4 <validate_args+0x18>
    68c2:	b139      	cbz	r1, 68d4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    68c4:	1d08      	adds	r0, r1, #4
    68c6:	f7ff ffb2 	bl	682e <sys_notify_validate>
	if ((rv == 0)
    68ca:	b928      	cbnz	r0, 68d8 <validate_args+0x1c>
	    && ((cli->notify.flags
    68cc:	68a3      	ldr	r3, [r4, #8]
    68ce:	f033 0303 	bics.w	r3, r3, #3
    68d2:	d001      	beq.n	68d8 <validate_args+0x1c>
		rv = -EINVAL;
    68d4:	f06f 0015 	mvn.w	r0, #21
}
    68d8:	bd10      	pop	{r4, pc}

000068da <onoff_manager_init>:
{
    68da:	b538      	push	{r3, r4, r5, lr}
    68dc:	460c      	mov	r4, r1
	if ((mgr == NULL)
    68de:	4605      	mov	r5, r0
    68e0:	b158      	cbz	r0, 68fa <onoff_manager_init+0x20>
	    || (transitions == NULL)
    68e2:	b151      	cbz	r1, 68fa <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    68e4:	680b      	ldr	r3, [r1, #0]
    68e6:	b143      	cbz	r3, 68fa <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    68e8:	684b      	ldr	r3, [r1, #4]
    68ea:	b133      	cbz	r3, 68fa <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    68ec:	2220      	movs	r2, #32
    68ee:	2100      	movs	r1, #0
    68f0:	f000 f869 	bl	69c6 <memset>
    68f4:	612c      	str	r4, [r5, #16]
	return 0;
    68f6:	2000      	movs	r0, #0
}
    68f8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    68fa:	f06f 0015 	mvn.w	r0, #21
    68fe:	e7fb      	b.n	68f8 <onoff_manager_init+0x1e>

00006900 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    6900:	2200      	movs	r2, #0
    6902:	e9c0 2200 	strd	r2, r2, [r0]
    6906:	6082      	str	r2, [r0, #8]
}
    6908:	4770      	bx	lr

0000690a <arch_printk_char_out>:
}
    690a:	2000      	movs	r0, #0
    690c:	4770      	bx	lr

0000690e <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    690e:	b40f      	push	{r0, r1, r2, r3}
    6910:	b507      	push	{r0, r1, r2, lr}
    6912:	a904      	add	r1, sp, #16
    6914:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6918:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    691a:	f7fa fee1 	bl	16e0 <vprintk>
	}
	va_end(ap);
}
    691e:	b003      	add	sp, #12
    6920:	f85d eb04 	ldr.w	lr, [sp], #4
    6924:	b004      	add	sp, #16
    6926:	4770      	bx	lr

00006928 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6928:	4604      	mov	r4, r0
    692a:	b508      	push	{r3, lr}
    692c:	4608      	mov	r0, r1
    692e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6930:	461a      	mov	r2, r3
    6932:	47a0      	blx	r4
	return z_impl_z_current_get();
    6934:	f7fe ff4a 	bl	57cc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6938:	f7fb fa20 	bl	1d7c <z_impl_k_thread_abort>

0000693c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    693c:	f7fd bb38 	b.w	3fb0 <z_fatal_error>

00006940 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6940:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    6942:	6800      	ldr	r0, [r0, #0]
    6944:	f7fd bb34 	b.w	3fb0 <z_fatal_error>

00006948 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6948:	2100      	movs	r1, #0
    694a:	2001      	movs	r0, #1
    694c:	f7ff bff6 	b.w	693c <z_arm_fatal_error>

00006950 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6950:	b508      	push	{r3, lr}
	handler();
    6952:	f7fa ff29 	bl	17a8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    695a:	f7fb b837 	b.w	19cc <z_arm_exc_exit>

0000695e <_stdout_hook_default>:
}
    695e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6962:	4770      	bx	lr

00006964 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6964:	3901      	subs	r1, #1
    6966:	4603      	mov	r3, r0
    6968:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    696c:	b90a      	cbnz	r2, 6972 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    696e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6970:	4770      	bx	lr
		*d = *s;
    6972:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6976:	e7f7      	b.n	6968 <strcpy+0x4>

00006978 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6978:	4603      	mov	r3, r0
	size_t n = 0;
    697a:	2000      	movs	r0, #0

	while (*s != '\0') {
    697c:	5c1a      	ldrb	r2, [r3, r0]
    697e:	b902      	cbnz	r2, 6982 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6980:	4770      	bx	lr
		n++;
    6982:	3001      	adds	r0, #1
    6984:	e7fa      	b.n	697c <strlen+0x4>

00006986 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6986:	4603      	mov	r3, r0
	size_t n = 0;
    6988:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    698a:	5c1a      	ldrb	r2, [r3, r0]
    698c:	b10a      	cbz	r2, 6992 <strnlen+0xc>
    698e:	4288      	cmp	r0, r1
    6990:	d100      	bne.n	6994 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6992:	4770      	bx	lr
		n++;
    6994:	3001      	adds	r0, #1
    6996:	e7f8      	b.n	698a <strnlen+0x4>

00006998 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6998:	1e43      	subs	r3, r0, #1
    699a:	3901      	subs	r1, #1
    699c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    69a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    69a4:	4282      	cmp	r2, r0
    69a6:	d101      	bne.n	69ac <strcmp+0x14>
    69a8:	2a00      	cmp	r2, #0
    69aa:	d1f7      	bne.n	699c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    69ac:	1a10      	subs	r0, r2, r0
    69ae:	4770      	bx	lr

000069b0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    69b0:	b510      	push	{r4, lr}
    69b2:	1e43      	subs	r3, r0, #1
    69b4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    69b6:	4291      	cmp	r1, r2
    69b8:	d100      	bne.n	69bc <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    69ba:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    69bc:	f811 4b01 	ldrb.w	r4, [r1], #1
    69c0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    69c4:	e7f7      	b.n	69b6 <memcpy+0x6>

000069c6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    69c6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    69c8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    69ca:	4603      	mov	r3, r0
	while (n > 0) {
    69cc:	4293      	cmp	r3, r2
    69ce:	d100      	bne.n	69d2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    69d0:	4770      	bx	lr
		*(d_byte++) = c_byte;
    69d2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    69d6:	e7f9      	b.n	69cc <memset+0x6>

000069d8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    69d8:	b084      	sub	sp, #16
    69da:	ab04      	add	r3, sp, #16
    69dc:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    69e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    69e4:	2b06      	cmp	r3, #6
    69e6:	d108      	bne.n	69fa <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    69e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    69ec:	2201      	movs	r2, #1
    69ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    69f2:	f3bf 8f4f 	dsb	sy
        __WFE();
    69f6:	bf20      	wfe
    while (true)
    69f8:	e7fd      	b.n	69f6 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    69fa:	b004      	add	sp, #16
    69fc:	4770      	bx	lr

000069fe <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    69fe:	b084      	sub	sp, #16
    6a00:	ab04      	add	r3, sp, #16
    6a02:	e903 0007 	stmdb	r3, {r0, r1, r2}
    6a06:	2300      	movs	r3, #0
    6a08:	f383 8811 	msr	BASEPRI, r3
    6a0c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6a10:	b004      	add	sp, #16
    6a12:	4770      	bx	lr

00006a14 <set_starting_state>:
{
    6a14:	b510      	push	{r4, lr}
	__asm__ volatile(
    6a16:	f04f 0320 	mov.w	r3, #32
    6a1a:	f3ef 8211 	mrs	r2, BASEPRI
    6a1e:	f383 8812 	msr	BASEPRI_MAX, r3
    6a22:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6a26:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6a28:	f003 0407 	and.w	r4, r3, #7
    6a2c:	2c01      	cmp	r4, #1
    6a2e:	d106      	bne.n	6a3e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6a30:	6001      	str	r1, [r0, #0]
	int err = 0;
    6a32:	2000      	movs	r0, #0
	__asm__ volatile(
    6a34:	f382 8811 	msr	BASEPRI, r2
    6a38:	f3bf 8f6f 	isb	sy
}
    6a3c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6a3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    6a42:	428b      	cmp	r3, r1
		err = -EALREADY;
    6a44:	bf14      	ite	ne
    6a46:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6a4a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    6a4e:	e7f1      	b.n	6a34 <set_starting_state+0x20>

00006a50 <set_on_state>:
	__asm__ volatile(
    6a50:	f04f 0320 	mov.w	r3, #32
    6a54:	f3ef 8211 	mrs	r2, BASEPRI
    6a58:	f383 8812 	msr	BASEPRI_MAX, r3
    6a5c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6a60:	6803      	ldr	r3, [r0, #0]
    6a62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6a66:	f043 0302 	orr.w	r3, r3, #2
    6a6a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6a6c:	f382 8811 	msr	BASEPRI, r2
    6a70:	f3bf 8f6f 	isb	sy
}
    6a74:	4770      	bx	lr

00006a76 <onoff_started_callback>:
	return &data->mgr[type];
    6a76:	6900      	ldr	r0, [r0, #16]
    6a78:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6a7a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    6a7e:	2100      	movs	r1, #0
    6a80:	4710      	bx	r2

00006a82 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6a82:	2000      	movs	r0, #0
    6a84:	f7fc bd2e 	b.w	34e4 <nrfx_clock_start>

00006a88 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6a88:	2000      	movs	r0, #0
    6a8a:	f7fc bd7f 	b.w	358c <nrfx_clock_stop>

00006a8e <api_stop>:
	return stop(dev, subsys, CTX_API);
    6a8e:	2280      	movs	r2, #128	; 0x80
    6a90:	f7fb bb32 	b.w	20f8 <stop>

00006a94 <blocking_start_callback>:
{
    6a94:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    6a96:	f7fe bf53 	b.w	5940 <z_impl_k_sem_give>

00006a9a <api_start>:
{
    6a9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a9e:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    6aa0:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6aa2:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    6aa4:	436f      	muls	r7, r5
{
    6aa6:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    6aa8:	f107 0048 	add.w	r0, r7, #72	; 0x48
    6aac:	2180      	movs	r1, #128	; 0x80
    6aae:	4420      	add	r0, r4
{
    6ab0:	4690      	mov	r8, r2
    6ab2:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    6ab4:	f7ff ffae 	bl	6a14 <set_starting_state>
	if (err < 0) {
    6ab8:	2800      	cmp	r0, #0
    6aba:	db07      	blt.n	6acc <api_start+0x32>
	subdata->cb = cb;
    6abc:	443c      	add	r4, r7
	subdata->user_data = user_data;
    6abe:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    6ac2:	6873      	ldr	r3, [r6, #4]
    6ac4:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    6ac8:	4798      	blx	r3
	return 0;
    6aca:	2000      	movs	r0, #0
}
    6acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006ad0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ad0:	6843      	ldr	r3, [r0, #4]
    6ad2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6ad4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6ad8:	600b      	str	r3, [r1, #0]
}
    6ada:	2000      	movs	r0, #0
    6adc:	4770      	bx	lr

00006ade <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ade:	6843      	ldr	r3, [r0, #4]
    6ae0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6ae2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6ae6:	4042      	eors	r2, r0
    6ae8:	400a      	ands	r2, r1
    6aea:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6aec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    6af0:	2000      	movs	r0, #0
    6af2:	4770      	bx	lr

00006af4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6af4:	6843      	ldr	r3, [r0, #4]
    6af6:	685b      	ldr	r3, [r3, #4]
}
    6af8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6afa:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6afe:	4770      	bx	lr

00006b00 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b00:	6843      	ldr	r3, [r0, #4]
    6b02:	685b      	ldr	r3, [r3, #4]
}
    6b04:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6b06:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6b0a:	4770      	bx	lr

00006b0c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b0c:	6843      	ldr	r3, [r0, #4]
    6b0e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6b10:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6b14:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6b16:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6b1a:	2000      	movs	r0, #0
    6b1c:	4770      	bx	lr

00006b1e <nrf_gpio_cfg_sense_set>:
{
    6b1e:	b513      	push	{r0, r1, r4, lr}
    6b20:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6b22:	a801      	add	r0, sp, #4
{
    6b24:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6b26:	f7fb fd7d 	bl	2624 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    6b2a:	9b01      	ldr	r3, [sp, #4]
    6b2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6b30:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    6b34:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    6b38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    6b3c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    6b40:	b002      	add	sp, #8
    6b42:	bd10      	pop	{r4, pc}

00006b44 <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
    6b44:	6903      	ldr	r3, [r0, #16]
{
    6b46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b4a:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    6b4c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
    6b50:	68de      	ldr	r6, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    6b52:	f8d0 b004 	ldr.w	fp, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    6b56:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    6b58:	430a      	orrs	r2, r1
    6b5a:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    6b5e:	f8db 2004 	ldr.w	r2, [fp, #4]
    return p_reg->IN;
    6b62:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    6b66:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    6b68:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
    6b6c:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    6b6e:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    6b70:	f04f 0a00 	mov.w	sl, #0
	while (check_pins) {
    6b74:	b91f      	cbnz	r7, 6b7e <check_level_trigger_pins+0x3a>
}
    6b76:	4628      	mov	r0, r5
    6b78:	b003      	add	sp, #12
    6b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    6b7e:	423c      	tst	r4, r7
    6b80:	d020      	beq.n	6bc4 <check_level_trigger_pins+0x80>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6b82:	f89b 3008 	ldrb.w	r3, [fp, #8]
    6b86:	f00a 091f 	and.w	r9, sl, #31
			if (!(level_pins & bit)) {
    6b8a:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6b8c:	ea49 1943 	orr.w	r9, r9, r3, lsl #5
			if (!(level_pins & bit)) {
    6b90:	d112      	bne.n	6bb8 <check_level_trigger_pins+0x74>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6b92:	a801      	add	r0, sp, #4
    6b94:	f8cd 9004 	str.w	r9, [sp, #4]
    6b98:	f7fb fd44 	bl	2624 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6b9c:	9b01      	ldr	r3, [sp, #4]
    6b9e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6ba2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6ba6:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    6baa:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    6bac:	bf02      	ittt	eq
    6bae:	f8d8 3000 	ldreq.w	r3, [r8]
    6bb2:	4323      	orreq	r3, r4
    6bb4:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    6bb8:	2100      	movs	r1, #0
    6bba:	4648      	mov	r0, r9
    6bbc:	f7ff ffaf 	bl	6b1e <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    6bc0:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    6bc4:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
    6bc8:	0064      	lsls	r4, r4, #1
    6bca:	e7d3      	b.n	6b74 <check_level_trigger_pins+0x30>

00006bcc <cfg_level_pins>:
{
    6bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
    6bd0:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    6bd2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    6bd6:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    6bd8:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    6bdc:	4313      	orrs	r3, r2
    6bde:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
    6be2:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    6be4:	2500      	movs	r5, #0
	while (level_pins) {
    6be6:	b90c      	cbnz	r4, 6bec <cfg_level_pins+0x20>
}
    6be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    6bec:	4226      	tst	r6, r4
    6bee:	d010      	beq.n	6c12 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    6bf0:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6bf2:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    6bf6:	40e9      	lsrs	r1, r5
    6bf8:	f001 0101 	and.w	r1, r1, #1
    6bfc:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6c00:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    6c04:	b2c9      	uxtb	r1, r1
    6c06:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    6c0a:	f7ff ff88 	bl	6b1e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    6c0e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    6c12:	3501      	adds	r5, #1
		bit <<= 1;
    6c14:	0076      	lsls	r6, r6, #1
    6c16:	e7e6      	b.n	6be6 <cfg_level_pins+0x1a>

00006c18 <any_other_channel_is_active>:
{
    6c18:	b530      	push	{r4, r5, lr}
    6c1a:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    6c1c:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    6c1e:	b2da      	uxtb	r2, r3
    6c20:	4282      	cmp	r2, r0
    6c22:	d007      	beq.n	6c34 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    6c24:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    6c28:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    6c2c:	b112      	cbz	r2, 6c34 <any_other_channel_is_active+0x1c>
    6c2e:	898d      	ldrh	r5, [r1, #12]
    6c30:	4295      	cmp	r5, r2
    6c32:	d804      	bhi.n	6c3e <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    6c34:	3301      	adds	r3, #1
    6c36:	2b04      	cmp	r3, #4
    6c38:	d1f1      	bne.n	6c1e <any_other_channel_is_active+0x6>
	return false;
    6c3a:	2000      	movs	r0, #0
}
    6c3c:	bd30      	pop	{r4, r5, pc}
			return true;
    6c3e:	2001      	movs	r0, #1
    6c40:	e7fc      	b.n	6c3c <any_other_channel_is_active+0x24>

00006c42 <pwm_nrfx_pin_set>:
{
    6c42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c46:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
    6c4a:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    6c4c:	6904      	ldr	r4, [r0, #16]
{
    6c4e:	4688      	mov	r8, r1
    6c50:	4616      	mov	r6, r2
    6c52:	4699      	mov	r9, r3
	if (flags) {
    6c54:	2d00      	cmp	r5, #0
    6c56:	d140      	bne.n	6cda <pwm_nrfx_pin_set+0x98>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    6c58:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    6c5a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    6c5e:	2bff      	cmp	r3, #255	; 0xff
    6c60:	d003      	beq.n	6c6a <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    6c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6c66:	4598      	cmp	r8, r3
    6c68:	d03a      	beq.n	6ce0 <pwm_nrfx_pin_set+0x9e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    6c6a:	3501      	adds	r5, #1
    6c6c:	b2ed      	uxtb	r5, r5
    6c6e:	2d04      	cmp	r5, #4
    6c70:	d1f3      	bne.n	6c5a <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    6c72:	f06f 0015 	mvn.w	r0, #21
    6c76:	e009      	b.n	6c8c <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    6c78:	2000      	movs	r0, #0
    6c7a:	e042      	b.n	6d02 <pwm_nrfx_pin_set+0xc0>
		countertop >>= 1;
    6c7c:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    6c7e:	2b08      	cmp	r3, #8
		countertop >>= 1;
    6c80:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    6c84:	d158      	bne.n	6d38 <pwm_nrfx_pin_set+0xf6>
    6c86:	e7f4      	b.n	6c72 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    6c88:	b9d0      	cbnz	r0, 6cc0 <pwm_nrfx_pin_set+0x7e>
	return 0;
    6c8a:	2000      	movs	r0, #0
}
    6c8c:	b003      	add	sp, #12
    6c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    6c92:	454e      	cmp	r6, r9
    6c94:	d87f      	bhi.n	6d96 <pwm_nrfx_pin_set+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6c96:	a801      	add	r0, sp, #4
    6c98:	f8cd 8004 	str.w	r8, [sp, #4]
    6c9c:	f7fb feea 	bl	2a74 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6ca0:	9a01      	ldr	r2, [sp, #4]
    6ca2:	2301      	movs	r3, #1
    6ca4:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    6ca6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    6caa:	4621      	mov	r1, r4
    6cac:	4628      	mov	r0, r5
    6cae:	f7ff ffb3 	bl	6c18 <any_other_channel_is_active>
    6cb2:	2800      	cmp	r0, #0
    6cb4:	d1e9      	bne.n	6c8a <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    6cb6:	4601      	mov	r1, r0
    6cb8:	4638      	mov	r0, r7
    6cba:	f7fc ffb7 	bl	3c2c <nrfx_pwm_stop>
    6cbe:	e7e4      	b.n	6c8a <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    6cc0:	4638      	mov	r0, r7
    6cc2:	f7fc ff85 	bl	3bd0 <nrfx_pwm_is_stopped>
    6cc6:	2800      	cmp	r0, #0
    6cc8:	d0fa      	beq.n	6cc0 <pwm_nrfx_pin_set+0x7e>
			nrfx_pwm_simple_playback(&config->pwm,
    6cca:	2302      	movs	r3, #2
    6ccc:	2201      	movs	r2, #1
    6cce:	f107 0118 	add.w	r1, r7, #24
    6cd2:	4638      	mov	r0, r7
    6cd4:	f7fc ff08 	bl	3ae8 <nrfx_pwm_simple_playback>
    6cd8:	e7d7      	b.n	6c8a <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    6cda:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6cde:	e7d5      	b.n	6c8c <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    6ce0:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    6ce4:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
    6ce8:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    6cec:	b113      	cbz	r3, 6cf4 <pwm_nrfx_pin_set+0xb2>
    6cee:	89a2      	ldrh	r2, [r4, #12]
    6cf0:	429a      	cmp	r2, r3
    6cf2:	d8c1      	bhi.n	6c78 <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    6cf4:	4621      	mov	r1, r4
    6cf6:	4628      	mov	r0, r5
    6cf8:	f7ff ff8e 	bl	6c18 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    6cfc:	f080 0001 	eor.w	r0, r0, #1
    6d00:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    6d02:	7bb9      	ldrb	r1, [r7, #14]
    6d04:	2901      	cmp	r1, #1
		period_cycles /= 2;
    6d06:	bf04      	itt	eq
    6d08:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    6d0a:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    6d0e:	b326      	cbz	r6, 6d5a <pwm_nrfx_pin_set+0x118>
    6d10:	6823      	ldr	r3, [r4, #0]
    6d12:	42b3      	cmp	r3, r6
    6d14:	d021      	beq.n	6d5a <pwm_nrfx_pin_set+0x118>
    6d16:	2300      	movs	r3, #0
				data->current[i]
    6d18:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
    6d1c:	b2da      	uxtb	r2, r3
    6d1e:	42aa      	cmp	r2, r5
    6d20:	d005      	beq.n	6d2e <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    6d22:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    6d26:	f3c2 020e 	ubfx	r2, r2, #0, #15
    6d2a:	2a00      	cmp	r2, #0
    6d2c:	d1a1      	bne.n	6c72 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    6d2e:	3301      	adds	r3, #1
    6d30:	2b04      	cmp	r3, #4
    6d32:	d1f3      	bne.n	6d1c <pwm_nrfx_pin_set+0xda>
    6d34:	4632      	mov	r2, r6
    6d36:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    6d38:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    6d3c:	fa5f fc83 	uxtb.w	ip, r3
    6d40:	d29c      	bcs.n	6c7c <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    6d42:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    6d46:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
    6d4a:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
    6d4c:	81a2      	strh	r2, [r4, #12]
    p_reg->PRESCALER  = base_clock;
    6d4e:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
    6d52:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    6d56:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    6d5a:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    6d5c:	454e      	cmp	r6, r9
    6d5e:	4633      	mov	r3, r6
    6d60:	bf28      	it	cs
    6d62:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
    6d64:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    6d68:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    6d6c:	ea42 020b 	orr.w	r2, r2, fp
    6d70:	b292      	uxth	r2, r2
	data->current[channel] = (
    6d72:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
    6d76:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    6d7a:	b112      	cbz	r2, 6d82 <pwm_nrfx_pin_set+0x140>
    6d7c:	89a1      	ldrh	r1, [r4, #12]
    6d7e:	4291      	cmp	r1, r2
    6d80:	d882      	bhi.n	6c88 <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    6d82:	197a      	adds	r2, r7, r5
    6d84:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    6d88:	2b00      	cmp	r3, #0
    6d8a:	d082      	beq.n	6c92 <pwm_nrfx_pin_set+0x50>
			&& channel_inverted_state;
    6d8c:	454e      	cmp	r6, r9
    6d8e:	d805      	bhi.n	6d9c <pwm_nrfx_pin_set+0x15a>
    6d90:	2a00      	cmp	r2, #0
    6d92:	db80      	blt.n	6c96 <pwm_nrfx_pin_set+0x54>
    6d94:	e002      	b.n	6d9c <pwm_nrfx_pin_set+0x15a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    6d96:	2a00      	cmp	r2, #0
    6d98:	f6bf af7d 	bge.w	6c96 <pwm_nrfx_pin_set+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6d9c:	a801      	add	r0, sp, #4
    6d9e:	f8cd 8004 	str.w	r8, [sp, #4]
    6da2:	f7fb fe67 	bl	2a74 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6da6:	9a01      	ldr	r2, [sp, #4]
    6da8:	2301      	movs	r3, #1
    6daa:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    6dac:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    6db0:	e77b      	b.n	6caa <pwm_nrfx_pin_set+0x68>

00006db2 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    6db2:	6843      	ldr	r3, [r0, #4]
    6db4:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    6db6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6dba:	05d1      	lsls	r1, r2, #23
    6dbc:	d518      	bpl.n	6df0 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6dbe:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    6dc2:	b1aa      	cbz	r2, 6df0 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    6dc4:	f04f 0120 	mov.w	r1, #32
    6dc8:	f3ef 8211 	mrs	r2, BASEPRI
    6dcc:	f381 8812 	msr	BASEPRI_MAX, r1
    6dd0:	f3bf 8f6f 	isb	sy
    6dd4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6dd8:	b131      	cbz	r1, 6de8 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6dda:	2100      	movs	r1, #0
    6ddc:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6de0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6de4:	2101      	movs	r1, #1
    6de6:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6de8:	f382 8811 	msr	BASEPRI, r2
    6dec:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6df0:	6842      	ldr	r2, [r0, #4]
    6df2:	6852      	ldr	r2, [r2, #4]
    6df4:	06d2      	lsls	r2, r2, #27
    6df6:	d515      	bpl.n	6e24 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    6df8:	f04f 0120 	mov.w	r1, #32
    6dfc:	f3ef 8211 	mrs	r2, BASEPRI
    6e00:	f381 8812 	msr	BASEPRI_MAX, r1
    6e04:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e08:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6e0c:	b111      	cbz	r1, 6e14 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6e0e:	2100      	movs	r1, #0
    6e10:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    6e14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6e18:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    6e1c:	f382 8811 	msr	BASEPRI, r2
    6e20:	f3bf 8f6f 	isb	sy
}
    6e24:	4770      	bx	lr

00006e26 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    6e26:	6902      	ldr	r2, [r0, #16]
{
    6e28:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6e2a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6e2e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6e32:	2000      	movs	r0, #0
    6e34:	4770      	bx	lr

00006e36 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6e36:	6843      	ldr	r3, [r0, #4]
    6e38:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6e3a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6e3e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6e42:	4770      	bx	lr

00006e44 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    6e44:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    6e46:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e48:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6e4c:	b940      	cbnz	r0, 6e60 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6e4e:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6e50:	0712      	lsls	r2, r2, #28
    6e52:	d406      	bmi.n	6e62 <is_tx_ready+0x1e>
    6e54:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    6e58:	3800      	subs	r0, #0
    6e5a:	bf18      	it	ne
    6e5c:	2001      	movne	r0, #1
    6e5e:	4770      	bx	lr
    6e60:	2001      	movs	r0, #1
}
    6e62:	4770      	bx	lr

00006e64 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6e64:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    6e66:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6e68:	681b      	ldr	r3, [r3, #0]
    6e6a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6e6e:	b148      	cbz	r0, 6e84 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    6e70:	7c52      	ldrb	r2, [r2, #17]
    6e72:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e74:	2000      	movs	r0, #0
    6e76:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6e7a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e7e:	2201      	movs	r2, #1
    6e80:	601a      	str	r2, [r3, #0]
	return 0;
    6e82:	4770      	bx	lr
		return -1;
    6e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6e88:	4770      	bx	lr

00006e8a <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    6e8a:	b510      	push	{r4, lr}
    6e8c:	2200      	movs	r2, #0
    6e8e:	4604      	mov	r4, r0
    6e90:	2101      	movs	r1, #1
    6e92:	2002      	movs	r0, #2
    6e94:	f7fa fce4 	bl	1860 <z_arm_irq_priority_set>
    6e98:	2002      	movs	r0, #2
    6e9a:	f7fa fcc3 	bl	1824 <arch_irq_enable>
    6e9e:	4620      	mov	r0, r4
    6ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ea4:	f7fb bf82 	b.w	2dac <uarte_instance_init.isra.0>

00006ea8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6ea8:	b510      	push	{r4, lr}
    6eaa:	2200      	movs	r2, #0
    6eac:	4604      	mov	r4, r0
    6eae:	2101      	movs	r1, #1
    6eb0:	2028      	movs	r0, #40	; 0x28
    6eb2:	f7fa fcd5 	bl	1860 <z_arm_irq_priority_set>
    6eb6:	2028      	movs	r0, #40	; 0x28
    6eb8:	f7fa fcb4 	bl	1824 <arch_irq_enable>
    6ebc:	4620      	mov	r0, r4
    6ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ec2:	f7fb bf73 	b.w	2dac <uarte_instance_init.isra.0>

00006ec6 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
    6ec6:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    6ec8:	f7fc f8be 	bl	3048 <z_nrf_rtc_timer_read>
}
    6ecc:	bd08      	pop	{r3, pc}

00006ece <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6ece:	4770      	bx	lr

00006ed0 <sys_clock_disable>:
    6ed0:	4770      	bx	lr

00006ed2 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6ed2:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6ed4:	2000      	movs	r0, #0
    6ed6:	f7fb f8a7 	bl	2028 <sys_arch_reboot>

00006eda <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6eda:	f7ff ba5f 	b.w	639c <nrf_cc3xx_platform_init_no_rng>

00006ede <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6ede:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6ee0:	f7f9 ff86 	bl	df0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6ee4:	f7fa f838 	bl	f58 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6eec:	f7ff ba56 	b.w	639c <nrf_cc3xx_platform_init_no_rng>

00006ef0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6ef0:	4700      	bx	r0

00006ef2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6ef2:	f000 b889 	b.w	7008 <z_impl_k_busy_wait>

00006ef6 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    6ef6:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    6ef8:	2402      	movs	r4, #2
    6efa:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    6efc:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    6efe:	6809      	ldr	r1, [r1, #0]
    6f00:	b171      	cbz	r1, 6f20 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    6f02:	f012 0f04 	tst.w	r2, #4
    6f06:	bf0c      	ite	eq
    6f08:	2182      	moveq	r1, #130	; 0x82
    6f0a:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    6f0c:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    6f0e:	bf48      	it	mi
    6f10:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    6f14:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    6f16:	bf48      	it	mi
    6f18:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    6f1c:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    6f20:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f22:	f04f 0100 	mov.w	r1, #0
    6f26:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6f2a:	bf58      	it	pl
    6f2c:	2201      	movpl	r2, #1
    6f2e:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    6f32:	bf56      	itet	pl
    6f34:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    6f36:	18c0      	addmi	r0, r0, r3
    return 0;
    6f38:	4608      	movpl	r0, r1
}
    6f3a:	bd10      	pop	{r4, pc}

00006f3c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6f3c:	f7fc bfb6 	b.w	3eac <_DoInit>

00006f40 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6f40:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6f42:	f7ff fffb 	bl	6f3c <SEGGER_RTT_Init>

	return 0;
}
    6f46:	2000      	movs	r0, #0
    6f48:	bd08      	pop	{r3, pc}

00006f4a <z_device_state_init>:
}
    6f4a:	4770      	bx	lr

00006f4c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6f4c:	b138      	cbz	r0, 6f5e <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6f4e:	68c3      	ldr	r3, [r0, #12]
    6f50:	8818      	ldrh	r0, [r3, #0]
    6f52:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6f56:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6f5a:	4258      	negs	r0, r3
    6f5c:	4158      	adcs	r0, r3
}
    6f5e:	4770      	bx	lr

00006f60 <z_pm_save_idle_exit>:
{
    6f60:	b508      	push	{r3, lr}
	pm_system_resume();
    6f62:	f7fa fb2d 	bl	15c0 <pm_system_resume>
}
    6f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    6f6a:	f7ff bfb0 	b.w	6ece <sys_clock_idle_exit>

00006f6e <k_mem_slab_init>:
{
    6f6e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    6f70:	2400      	movs	r4, #0
    6f72:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    6f74:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6f76:	ea41 0402 	orr.w	r4, r1, r2
    6f7a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    6f7e:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    6f82:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6f84:	d10c      	bne.n	6fa0 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    6f86:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    6f88:	42a3      	cmp	r3, r4
    6f8a:	d103      	bne.n	6f94 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    6f8c:	e9c0 0000 	strd	r0, r0, [r0]
}
    6f90:	2000      	movs	r0, #0
}
    6f92:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    6f94:	6985      	ldr	r5, [r0, #24]
    6f96:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6f98:	3401      	adds	r4, #1
		slab->free_list = p;
    6f9a:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    6f9c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    6f9e:	e7f3      	b.n	6f88 <k_mem_slab_init+0x1a>
		return -EINVAL;
    6fa0:	f06f 0015 	mvn.w	r0, #21
	return rc;
    6fa4:	e7f5      	b.n	6f92 <k_mem_slab_init+0x24>

00006fa6 <z_impl_k_mutex_init>:
{
    6fa6:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6fa8:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    6faa:	e9c3 0002 	strd	r0, r0, [r3, #8]
    6fae:	e9c3 3300 	strd	r3, r3, [r3]
}
    6fb2:	4770      	bx	lr

00006fb4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6fb4:	4603      	mov	r3, r0
    6fb6:	b920      	cbnz	r0, 6fc2 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6fb8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    6fbc:	b90a      	cbnz	r2, 6fc2 <z_reschedule_irqlock+0xe>
    6fbe:	f7fa bc9f 	b.w	1900 <arch_swap>
    6fc2:	f383 8811 	msr	BASEPRI, r3
    6fc6:	f3bf 8f6f 	isb	sy
}
    6fca:	4770      	bx	lr

00006fcc <z_reschedule_unlocked>:
	__asm__ volatile(
    6fcc:	f04f 0320 	mov.w	r3, #32
    6fd0:	f3ef 8011 	mrs	r0, BASEPRI
    6fd4:	f383 8812 	msr	BASEPRI_MAX, r3
    6fd8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6fdc:	f7ff bfea 	b.w	6fb4 <z_reschedule_irqlock>

00006fe0 <z_priq_dumb_best>:
{
    6fe0:	4603      	mov	r3, r0
	return list->head == list;
    6fe2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6fe4:	4283      	cmp	r3, r0
    6fe6:	d003      	beq.n	6ff0 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    6fe8:	2800      	cmp	r0, #0
    6fea:	bf38      	it	cc
    6fec:	2000      	movcc	r0, #0
    6fee:	4770      	bx	lr
	struct k_thread *thread = NULL;
    6ff0:	2000      	movs	r0, #0
}
    6ff2:	4770      	bx	lr

00006ff4 <k_is_in_isr>:
    6ff4:	f3ef 8005 	mrs	r0, IPSR
}
    6ff8:	3800      	subs	r0, #0
    6ffa:	bf18      	it	ne
    6ffc:	2001      	movne	r0, #1
    6ffe:	4770      	bx	lr

00007000 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7000:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7002:	f7ff f955 	bl	62b0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7006:	bd08      	pop	{r3, pc}

00007008 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7008:	b108      	cbz	r0, 700e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    700a:	f7fb b823 	b.w	2054 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    700e:	4770      	bx	lr

00007010 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7010:	4770      	bx	lr
	...

00007014 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7014:	f7fc be62 	b.w	3cdc <SystemInit>
